/**
 * Autogenerated by RTP (based on Thrift) Compiler (1.10.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.zhgd.zxc;

import com.cetc28.rtp.core.Constants.Phase;
import com.cetc28.rtp.core.Constants.Side;
import com.cetc28.rtp.core.ContextHelper;
import com.cetc28.rtp.core.process.ProcessContext;
import com.cetc28.rtp.core.statistic.StatisticHandler;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TProtocolFactory;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.transport.TTransport;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Generated;
import java.util.*;


@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by RTP (based on Thrift) Compiler (1.10.1)", date = "2018-12-19")
public class DMIThriftInterface {

  public static final String SERVICE_NAME = "DMIDataServ.DMIThriftInterface";

  public interface Iface {

    public List<String> DMI_GetAllResId(String stringType, String stringTag, String stringAccess) throws TException;

    public List<String> DMI_GetDataAttribute(String stringType, String stringAccess) throws TException;

    /**
     * 查询接口
     * @param stringType  表名
     * @param vecTags 所需字段
     * @param mpCondition where 条件   map.put(age ,=20)
     * @param stringQyCondition
     * @param stringAccess
     * @return
     * @throws TException
     */
    public Map<Integer,Map<String,String>> DMI_FilterParam(String stringType, List<String> vecTags, Map<String, List<String>> mpCondition, String stringQyCondition, String stringAccess) throws TException;

    public Map<String,Map<String,String>> DMI_FilterParam2(String stringType, List<String> vecTags, Map<String, List<String>> mpCondition, String stringQyCondition, String stringAccess, String stringKeyMacro) throws TException;

    public int DMI_UpdateData(String stringType, Map<String, Map<String, String>> mpTag2Value, String stringAccess) throws TException;

    public int DMI_DeleteData(String stringType, Map<String, List<String>> mpCondition, String stringAccess) throws TException;

    public void DMI_DeleteData2(String stringType, List<String> vcId, String stringAccess, String stringKeyMacro) throws TException;

    public int DMI_ReceiveCmd(String stringCmd, String stringAccess) throws TException;

    public String DMI_TransBegin(String stringType, String stringAccess) throws TException;

    public int DMI_TransCommit(String stringType, String stringAccess) throws TException;

    public int DMI_TransRollback(String stringType, String stringAccess) throws TException;

  }

  public interface AsyncIface {

    public void DMI_GetAllResId(String stringType, String stringTag, String stringAccess, AsyncMethodCallback<List<String>> resultHandler) throws TException;

    public void DMI_GetDataAttribute(String stringType, String stringAccess, AsyncMethodCallback<List<String>> resultHandler) throws TException;

    public void DMI_FilterParam(String stringType, List<String> vecTags, Map<String, List<String>> mpCondition, String stringQyCondition, String stringAccess, AsyncMethodCallback<Map<Integer, Map<String, String>>> resultHandler) throws TException;

    public void DMI_FilterParam2(String stringType, List<String> vecTags, Map<String, List<String>> mpCondition, String stringQyCondition, String stringAccess, String stringKeyMacro, AsyncMethodCallback<Map<String, Map<String, String>>> resultHandler) throws TException;

    public void DMI_UpdateData(String stringType, Map<String, Map<String, String>> mpTag2Value, String stringAccess, AsyncMethodCallback<Integer> resultHandler) throws TException;

    public void DMI_DeleteData(String stringType, Map<String, List<String>> mpCondition, String stringAccess, AsyncMethodCallback<Integer> resultHandler) throws TException;

    public void DMI_DeleteData2(String stringType, List<String> vcId, String stringAccess, String stringKeyMacro, AsyncMethodCallback<Void> resultHandler) throws TException;

    public void DMI_ReceiveCmd(String stringCmd, String stringAccess, AsyncMethodCallback<Integer> resultHandler) throws TException;

    public void DMI_TransBegin(String stringType, String stringAccess, AsyncMethodCallback<String> resultHandler) throws TException;

    public void DMI_TransCommit(String stringType, String stringAccess, AsyncMethodCallback<Integer> resultHandler) throws TException;

    public void DMI_TransRollback(String stringType, String stringAccess, AsyncMethodCallback<Integer> resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<String> DMI_GetAllResId(String stringType, String stringTag, String stringAccess) throws TException
    {
      send_DMI_GetAllResId(stringType, stringTag, stringAccess);
      return recv_DMI_GetAllResId();
    }

    public void send_DMI_GetAllResId(String stringType, String stringTag, String stringAccess) throws TException
    {
      DMI_GetAllResId_args args = new DMI_GetAllResId_args();
      args.setStringType(stringType);
      args.setStringTag(stringTag);
      args.setStringAccess(stringAccess);
      sendBase("DMI_GetAllResId", args);
    }

    public List<String> recv_DMI_GetAllResId() throws TException
    {
      DMI_GetAllResId_result result = new DMI_GetAllResId_result();
      receiveBase(result, "DMI_GetAllResId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "DMI_GetAllResId failed: unknown result");
    }

    public List<String> DMI_GetDataAttribute(String stringType, String stringAccess) throws TException
    {
      send_DMI_GetDataAttribute(stringType, stringAccess);
      return recv_DMI_GetDataAttribute();
    }

    public void send_DMI_GetDataAttribute(String stringType, String stringAccess) throws TException
    {
      DMI_GetDataAttribute_args args = new DMI_GetDataAttribute_args();
      args.setStringType(stringType);
      args.setStringAccess(stringAccess);
      sendBase("DMI_GetDataAttribute", args);
    }

    public List<String> recv_DMI_GetDataAttribute() throws TException
    {
      DMI_GetDataAttribute_result result = new DMI_GetDataAttribute_result();
      receiveBase(result, "DMI_GetDataAttribute");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "DMI_GetDataAttribute failed: unknown result");
    }

    public Map<Integer,Map<String,String>> DMI_FilterParam(String stringType, List<String> vecTags, Map<String,List<String>> mpCondition, String stringQyCondition, String stringAccess) throws TException
    {
      send_DMI_FilterParam(stringType, vecTags, mpCondition, stringQyCondition, stringAccess);
      return recv_DMI_FilterParam();
    }

    public void send_DMI_FilterParam(String stringType, List<String> vecTags, Map<String,List<String>> mpCondition, String stringQyCondition, String stringAccess) throws TException
    {
      DMI_FilterParam_args args = new DMI_FilterParam_args();
      args.setStringType(stringType);
      args.setVecTags(vecTags);
      args.setMpCondition(mpCondition);
      args.setStringQyCondition(stringQyCondition);
      args.setStringAccess(stringAccess);
      sendBase("DMI_FilterParam", args);
    }

    public Map<Integer,Map<String,String>> recv_DMI_FilterParam() throws TException
    {
      DMI_FilterParam_result result = new DMI_FilterParam_result();
      receiveBase(result, "DMI_FilterParam");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "DMI_FilterParam failed: unknown result");
    }

    public Map<String,Map<String,String>> DMI_FilterParam2(String stringType, List<String> vecTags, Map<String,List<String>> mpCondition, String stringQyCondition, String stringAccess, String stringKeyMacro) throws TException
    {
      send_DMI_FilterParam2(stringType, vecTags, mpCondition, stringQyCondition, stringAccess, stringKeyMacro);
      return recv_DMI_FilterParam2();
    }

    public void send_DMI_FilterParam2(String stringType, List<String> vecTags, Map<String,List<String>> mpCondition, String stringQyCondition, String stringAccess, String stringKeyMacro) throws TException
    {
      DMI_FilterParam2_args args = new DMI_FilterParam2_args();
      args.setStringType(stringType);
      args.setVecTags(vecTags);
      args.setMpCondition(mpCondition);
      args.setStringQyCondition(stringQyCondition);
      args.setStringAccess(stringAccess);
      args.setStringKeyMacro(stringKeyMacro);
      sendBase("DMI_FilterParam2", args);
    }

    public Map<String,Map<String,String>> recv_DMI_FilterParam2() throws TException
    {
      DMI_FilterParam2_result result = new DMI_FilterParam2_result();
      receiveBase(result, "DMI_FilterParam2");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "DMI_FilterParam2 failed: unknown result");
    }

    public int DMI_UpdateData(String stringType, Map<String,Map<String,String>> mpTag2Value, String stringAccess) throws TException
    {
      send_DMI_UpdateData(stringType, mpTag2Value, stringAccess);
      return recv_DMI_UpdateData();
    }

    public void send_DMI_UpdateData(String stringType, Map<String,Map<String,String>> mpTag2Value, String stringAccess) throws TException
    {
      DMI_UpdateData_args args = new DMI_UpdateData_args();
      args.setStringType(stringType);
      args.setMpTag2Value(mpTag2Value);
      args.setStringAccess(stringAccess);
      sendBase("DMI_UpdateData", args);
    }

    public int recv_DMI_UpdateData() throws TException
    {
      DMI_UpdateData_result result = new DMI_UpdateData_result();
      receiveBase(result, "DMI_UpdateData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "DMI_UpdateData failed: unknown result");
    }

    public int DMI_DeleteData(String stringType, Map<String,List<String>> mpCondition, String stringAccess) throws TException
    {
      send_DMI_DeleteData(stringType, mpCondition, stringAccess);
      return recv_DMI_DeleteData();
    }

    public void send_DMI_DeleteData(String stringType, Map<String,List<String>> mpCondition, String stringAccess) throws TException
    {
      DMI_DeleteData_args args = new DMI_DeleteData_args();
      args.setStringType(stringType);
      args.setMpCondition(mpCondition);
      args.setStringAccess(stringAccess);
      sendBase("DMI_DeleteData", args);
    }

    public int recv_DMI_DeleteData() throws TException
    {
      DMI_DeleteData_result result = new DMI_DeleteData_result();
      receiveBase(result, "DMI_DeleteData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "DMI_DeleteData failed: unknown result");
    }

    public void DMI_DeleteData2(String stringType, List<String> vcId, String stringAccess, String stringKeyMacro) throws TException
    {
      send_DMI_DeleteData2(stringType, vcId, stringAccess, stringKeyMacro);
      recv_DMI_DeleteData2();
    }

    public void send_DMI_DeleteData2(String stringType, List<String> vcId, String stringAccess, String stringKeyMacro) throws TException
    {
      DMI_DeleteData2_args args = new DMI_DeleteData2_args();
      args.setStringType(stringType);
      args.setVcId(vcId);
      args.setStringAccess(stringAccess);
      args.setStringKeyMacro(stringKeyMacro);
      sendBase("DMI_DeleteData2", args);
    }

    public void recv_DMI_DeleteData2() throws TException
    {
      DMI_DeleteData2_result result = new DMI_DeleteData2_result();
      receiveBase(result, "DMI_DeleteData2");
      return;
    }

    public int DMI_ReceiveCmd(String stringCmd, String stringAccess) throws TException
    {
      send_DMI_ReceiveCmd(stringCmd, stringAccess);
      return recv_DMI_ReceiveCmd();
    }

    public void send_DMI_ReceiveCmd(String stringCmd, String stringAccess) throws TException
    {
      DMI_ReceiveCmd_args args = new DMI_ReceiveCmd_args();
      args.setStringCmd(stringCmd);
      args.setStringAccess(stringAccess);
      sendBase("DMI_ReceiveCmd", args);
    }

    public int recv_DMI_ReceiveCmd() throws TException
    {
      DMI_ReceiveCmd_result result = new DMI_ReceiveCmd_result();
      receiveBase(result, "DMI_ReceiveCmd");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "DMI_ReceiveCmd failed: unknown result");
    }

    public String DMI_TransBegin(String stringType, String stringAccess) throws TException
    {
      send_DMI_TransBegin(stringType, stringAccess);
      return recv_DMI_TransBegin();
    }

    public void send_DMI_TransBegin(String stringType, String stringAccess) throws TException
    {
      DMI_TransBegin_args args = new DMI_TransBegin_args();
      args.setStringType(stringType);
      args.setStringAccess(stringAccess);
      sendBase("DMI_TransBegin", args);
    }

    public String recv_DMI_TransBegin() throws TException
    {
      DMI_TransBegin_result result = new DMI_TransBegin_result();
      receiveBase(result, "DMI_TransBegin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "DMI_TransBegin failed: unknown result");
    }

    public int DMI_TransCommit(String stringType, String stringAccess) throws TException
    {
      send_DMI_TransCommit(stringType, stringAccess);
      return recv_DMI_TransCommit();
    }

    public void send_DMI_TransCommit(String stringType, String stringAccess) throws TException
    {
      DMI_TransCommit_args args = new DMI_TransCommit_args();
      args.setStringType(stringType);
      args.setStringAccess(stringAccess);
      sendBase("DMI_TransCommit", args);
    }

    public int recv_DMI_TransCommit() throws TException
    {
      DMI_TransCommit_result result = new DMI_TransCommit_result();
      receiveBase(result, "DMI_TransCommit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "DMI_TransCommit failed: unknown result");
    }

    public int DMI_TransRollback(String stringType, String stringAccess) throws TException
    {
      send_DMI_TransRollback(stringType, stringAccess);
      return recv_DMI_TransRollback();
    }

    public void send_DMI_TransRollback(String stringType, String stringAccess) throws TException
    {
      DMI_TransRollback_args args = new DMI_TransRollback_args();
      args.setStringType(stringType);
      args.setStringAccess(stringAccess);
      sendBase("DMI_TransRollback", args);
    }

    public int recv_DMI_TransRollback() throws TException
    {
      DMI_TransRollback_result result = new DMI_TransRollback_result();
      receiveBase(result, "DMI_TransRollback");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "DMI_TransRollback failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    private static final org.apache.thrift.protocol.TStruct PUSH_STRUCT_DESC = new org.apache.thrift.protocol.TStruct("push_args");
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    void initPushMethodCall() throws TException {
      if (!pushMethodCallMap.isEmpty()) {
        return;
      }
    }

    private static void writePushArgs(org.apache.thrift.protocol.TProtocol prot) throws TException {
      prot.writeStructBegin(PUSH_STRUCT_DESC);
      prot.writeFieldStop();
      prot.writeStructEnd();
    }
    public boolean getReady() {
      synchronized (this) {
        try {
          while (___currentMethod != null) {
            wait();
          }
          return true;
        } catch (InterruptedException e) {
          // ignore
        }
      }
      return false;
    }

    @Override
    public void onComplete() {
      super.onComplete();
      synchronized (this) {
        notifyAll();
      }
    }

    public AsyncClient(TProtocolFactory protocolFactory, com.cetc28.rtp.async.client.AsyncClientManager<?> clientManager, TTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    protected void addProcessContext(org.apache.thrift.async.TAsyncMethodCall methodCall, String operation) {
      ProcessContext ctx = new ProcessContext();
      ctx.setService(SERVICE_NAME);
      ctx.setOperation(operation);
      ctx.setTransport(___transport);
      // used as constructor
      StatisticHandler.getInstance().createStatisticEvent(Phase.BEFORE, Side.CLIENT, ctx);
      methodCall.setProcessContext(ctx);
      methodCall.setThreadCache(ContextHelper.getHeaders());
    }

    public void DMI_GetAllResId(String stringType, String stringTag, String stringAccess, AsyncMethodCallback<List<String>> resultHandler) throws TException {
      DMI_GetAllResIdCall method_call = new DMI_GetAllResIdCall(stringType, stringTag, stringAccess, resultHandler, this, ___protocolFactory, ___transport);
      addProcessContext(method_call, "DMI_GetAllResId");
      ___manager.call(method_call);
    }

    public static class DMI_GetAllResIdCall extends org.apache.thrift.async.TAsyncMethodCall {
      private String stringType;
      private String stringTag;
      private String stringAccess;
      public DMI_GetAllResIdCall(String stringType, String stringTag, String stringAccess, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, TProtocolFactory protocolFactory, TTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stringType = stringType;
        this.stringTag = stringTag;
        this.stringAccess = stringAccess;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DMI_GetAllResId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DMI_GetAllResId_args args = new DMI_GetAllResId_args();
        args.setStringType(stringType);
        args.setStringTag(stringTag);
        args.setStringAccess(stringAccess);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws TException {
        if (!isFinished()) {
          throw new IllegalStateException("Method call not finished!");
        }
        if (getFrameBuffer() == null) {
          return null;
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_DMI_GetAllResId();
      }
    }

    public void DMI_GetDataAttribute(String stringType, String stringAccess, AsyncMethodCallback<List<String>> resultHandler) throws TException {
      DMI_GetDataAttributeCall method_call = new DMI_GetDataAttributeCall(stringType, stringAccess, resultHandler, this, ___protocolFactory, ___transport);
      addProcessContext(method_call, "DMI_GetDataAttribute");
      ___manager.call(method_call);
    }

    public static class DMI_GetDataAttributeCall extends org.apache.thrift.async.TAsyncMethodCall {
      private String stringType;
      private String stringAccess;
      public DMI_GetDataAttributeCall(String stringType, String stringAccess, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, TProtocolFactory protocolFactory, TTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stringType = stringType;
        this.stringAccess = stringAccess;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DMI_GetDataAttribute", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DMI_GetDataAttribute_args args = new DMI_GetDataAttribute_args();
        args.setStringType(stringType);
        args.setStringAccess(stringAccess);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws TException {
        if (!isFinished()) {
          throw new IllegalStateException("Method call not finished!");
        }
        if (getFrameBuffer() == null) {
          return null;
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_DMI_GetDataAttribute();
      }
    }

    public void DMI_FilterParam(String stringType, List<String> vecTags, Map<String,List<String>> mpCondition, String stringQyCondition, String stringAccess, AsyncMethodCallback<Map<Integer,Map<String,String>>> resultHandler) throws TException {
      DMI_FilterParamCall method_call = new DMI_FilterParamCall(stringType, vecTags, mpCondition, stringQyCondition, stringAccess, resultHandler, this, ___protocolFactory, ___transport);
      addProcessContext(method_call, "DMI_FilterParam");
      ___manager.call(method_call);
    }

    public static class DMI_FilterParamCall extends org.apache.thrift.async.TAsyncMethodCall {
      private String stringType;
      private List<String> vecTags;
      private Map<String,List<String>> mpCondition;
      private String stringQyCondition;
      private String stringAccess;
      public DMI_FilterParamCall(String stringType, List<String> vecTags, Map<String,List<String>> mpCondition, String stringQyCondition, String stringAccess, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, TProtocolFactory protocolFactory, TTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stringType = stringType;
        this.vecTags = vecTags;
        this.mpCondition = mpCondition;
        this.stringQyCondition = stringQyCondition;
        this.stringAccess = stringAccess;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DMI_FilterParam", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DMI_FilterParam_args args = new DMI_FilterParam_args();
        args.setStringType(stringType);
        args.setVecTags(vecTags);
        args.setMpCondition(mpCondition);
        args.setStringQyCondition(stringQyCondition);
        args.setStringAccess(stringAccess);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Integer,Map<String,String>> getResult() throws TException {
        if (!isFinished()) {
          throw new IllegalStateException("Method call not finished!");
        }
        if (getFrameBuffer() == null) {
          return null;
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_DMI_FilterParam();
      }
    }

    public void DMI_FilterParam2(String stringType, List<String> vecTags, Map<String,List<String>> mpCondition, String stringQyCondition, String stringAccess, String stringKeyMacro, AsyncMethodCallback<Map<String,Map<String,String>>> resultHandler) throws TException {
      DMI_FilterParam2Call method_call = new DMI_FilterParam2Call(stringType, vecTags, mpCondition, stringQyCondition, stringAccess, stringKeyMacro, resultHandler, this, ___protocolFactory, ___transport);
      addProcessContext(method_call, "DMI_FilterParam2");
      ___manager.call(method_call);
    }

    public static class DMI_FilterParam2Call extends org.apache.thrift.async.TAsyncMethodCall {
      private String stringType;
      private List<String> vecTags;
      private Map<String,List<String>> mpCondition;
      private String stringQyCondition;
      private String stringAccess;
      private String stringKeyMacro;
      public DMI_FilterParam2Call(String stringType, List<String> vecTags, Map<String,List<String>> mpCondition, String stringQyCondition, String stringAccess, String stringKeyMacro, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, TProtocolFactory protocolFactory, TTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stringType = stringType;
        this.vecTags = vecTags;
        this.mpCondition = mpCondition;
        this.stringQyCondition = stringQyCondition;
        this.stringAccess = stringAccess;
        this.stringKeyMacro = stringKeyMacro;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DMI_FilterParam2", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DMI_FilterParam2_args args = new DMI_FilterParam2_args();
        args.setStringType(stringType);
        args.setVecTags(vecTags);
        args.setMpCondition(mpCondition);
        args.setStringQyCondition(stringQyCondition);
        args.setStringAccess(stringAccess);
        args.setStringKeyMacro(stringKeyMacro);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Map<String,String>> getResult() throws TException {
        if (!isFinished()) {
          throw new IllegalStateException("Method call not finished!");
        }
        if (getFrameBuffer() == null) {
          return null;
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_DMI_FilterParam2();
      }
    }

    public void DMI_UpdateData(String stringType, Map<String,Map<String,String>> mpTag2Value, String stringAccess, AsyncMethodCallback<Integer> resultHandler) throws TException {
      DMI_UpdateDataCall method_call = new DMI_UpdateDataCall(stringType, mpTag2Value, stringAccess, resultHandler, this, ___protocolFactory, ___transport);
      addProcessContext(method_call, "DMI_UpdateData");
      ___manager.call(method_call);
    }

    public static class DMI_UpdateDataCall extends org.apache.thrift.async.TAsyncMethodCall {
      private String stringType;
      private Map<String,Map<String,String>> mpTag2Value;
      private String stringAccess;
      public DMI_UpdateDataCall(String stringType, Map<String,Map<String,String>> mpTag2Value, String stringAccess, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, TProtocolFactory protocolFactory, TTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stringType = stringType;
        this.mpTag2Value = mpTag2Value;
        this.stringAccess = stringAccess;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DMI_UpdateData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DMI_UpdateData_args args = new DMI_UpdateData_args();
        args.setStringType(stringType);
        args.setMpTag2Value(mpTag2Value);
        args.setStringAccess(stringAccess);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Integer getResult() throws TException {
        if (!isFinished()) {
          throw new IllegalStateException("Method call not finished!");
        }
        if (getFrameBuffer() == null) {
          return null;
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_DMI_UpdateData();
      }
    }

    public void DMI_DeleteData(String stringType, Map<String,List<String>> mpCondition, String stringAccess, AsyncMethodCallback<Integer> resultHandler) throws TException {
      DMI_DeleteDataCall method_call = new DMI_DeleteDataCall(stringType, mpCondition, stringAccess, resultHandler, this, ___protocolFactory, ___transport);
      addProcessContext(method_call, "DMI_DeleteData");
      ___manager.call(method_call);
    }

    public static class DMI_DeleteDataCall extends org.apache.thrift.async.TAsyncMethodCall {
      private String stringType;
      private Map<String,List<String>> mpCondition;
      private String stringAccess;
      public DMI_DeleteDataCall(String stringType, Map<String,List<String>> mpCondition, String stringAccess, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, TProtocolFactory protocolFactory, TTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stringType = stringType;
        this.mpCondition = mpCondition;
        this.stringAccess = stringAccess;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DMI_DeleteData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DMI_DeleteData_args args = new DMI_DeleteData_args();
        args.setStringType(stringType);
        args.setMpCondition(mpCondition);
        args.setStringAccess(stringAccess);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Integer getResult() throws TException {
        if (!isFinished()) {
          throw new IllegalStateException("Method call not finished!");
        }
        if (getFrameBuffer() == null) {
          return null;
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_DMI_DeleteData();
      }
    }

    public void DMI_DeleteData2(String stringType, List<String> vcId, String stringAccess, String stringKeyMacro, AsyncMethodCallback<Void> resultHandler) throws TException {
      DMI_DeleteData2Call method_call = new DMI_DeleteData2Call(stringType, vcId, stringAccess, stringKeyMacro, resultHandler, this, ___protocolFactory, ___transport);
      addProcessContext(method_call, "DMI_DeleteData2");
      ___manager.call(method_call);
    }

    public static class DMI_DeleteData2Call extends org.apache.thrift.async.TAsyncMethodCall {
      private String stringType;
      private List<String> vcId;
      private String stringAccess;
      private String stringKeyMacro;
      public DMI_DeleteData2Call(String stringType, List<String> vcId, String stringAccess, String stringKeyMacro, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, TProtocolFactory protocolFactory, TTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stringType = stringType;
        this.vcId = vcId;
        this.stringAccess = stringAccess;
        this.stringKeyMacro = stringKeyMacro;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DMI_DeleteData2", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DMI_DeleteData2_args args = new DMI_DeleteData2_args();
        args.setStringType(stringType);
        args.setVcId(vcId);
        args.setStringAccess(stringAccess);
        args.setStringKeyMacro(stringKeyMacro);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws TException {
        if (!isFinished()) {
          throw new IllegalStateException("Method call not finished!");
        }
        if (getFrameBuffer() == null) {
          return null;
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_DMI_DeleteData2();
        return null;
      }
    }

    public void DMI_ReceiveCmd(String stringCmd, String stringAccess, AsyncMethodCallback<Integer> resultHandler) throws TException {
      DMI_ReceiveCmdCall method_call = new DMI_ReceiveCmdCall(stringCmd, stringAccess, resultHandler, this, ___protocolFactory, ___transport);
      addProcessContext(method_call, "DMI_ReceiveCmd");
      ___manager.call(method_call);
    }

    public static class DMI_ReceiveCmdCall extends org.apache.thrift.async.TAsyncMethodCall {
      private String stringCmd;
      private String stringAccess;
      public DMI_ReceiveCmdCall(String stringCmd, String stringAccess, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, TProtocolFactory protocolFactory, TTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stringCmd = stringCmd;
        this.stringAccess = stringAccess;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DMI_ReceiveCmd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DMI_ReceiveCmd_args args = new DMI_ReceiveCmd_args();
        args.setStringCmd(stringCmd);
        args.setStringAccess(stringAccess);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Integer getResult() throws TException {
        if (!isFinished()) {
          throw new IllegalStateException("Method call not finished!");
        }
        if (getFrameBuffer() == null) {
          return null;
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_DMI_ReceiveCmd();
      }
    }

    public void DMI_TransBegin(String stringType, String stringAccess, AsyncMethodCallback<String> resultHandler) throws TException {
      DMI_TransBeginCall method_call = new DMI_TransBeginCall(stringType, stringAccess, resultHandler, this, ___protocolFactory, ___transport);
      addProcessContext(method_call, "DMI_TransBegin");
      ___manager.call(method_call);
    }

    public static class DMI_TransBeginCall extends org.apache.thrift.async.TAsyncMethodCall {
      private String stringType;
      private String stringAccess;
      public DMI_TransBeginCall(String stringType, String stringAccess, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, TProtocolFactory protocolFactory, TTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stringType = stringType;
        this.stringAccess = stringAccess;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DMI_TransBegin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DMI_TransBegin_args args = new DMI_TransBegin_args();
        args.setStringType(stringType);
        args.setStringAccess(stringAccess);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (!isFinished()) {
          throw new IllegalStateException("Method call not finished!");
        }
        if (getFrameBuffer() == null) {
          return null;
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_DMI_TransBegin();
      }
    }

    public void DMI_TransCommit(String stringType, String stringAccess, AsyncMethodCallback<Integer> resultHandler) throws TException {
      DMI_TransCommitCall method_call = new DMI_TransCommitCall(stringType, stringAccess, resultHandler, this, ___protocolFactory, ___transport);
      addProcessContext(method_call, "DMI_TransCommit");
      ___manager.call(method_call);
    }

    public static class DMI_TransCommitCall extends org.apache.thrift.async.TAsyncMethodCall {
      private String stringType;
      private String stringAccess;
      public DMI_TransCommitCall(String stringType, String stringAccess, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, TProtocolFactory protocolFactory, TTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stringType = stringType;
        this.stringAccess = stringAccess;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DMI_TransCommit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DMI_TransCommit_args args = new DMI_TransCommit_args();
        args.setStringType(stringType);
        args.setStringAccess(stringAccess);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Integer getResult() throws TException {
        if (!isFinished()) {
          throw new IllegalStateException("Method call not finished!");
        }
        if (getFrameBuffer() == null) {
          return null;
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_DMI_TransCommit();
      }
    }

    public void DMI_TransRollback(String stringType, String stringAccess, AsyncMethodCallback<Integer> resultHandler) throws TException {
      DMI_TransRollbackCall method_call = new DMI_TransRollbackCall(stringType, stringAccess, resultHandler, this, ___protocolFactory, ___transport);
      addProcessContext(method_call, "DMI_TransRollback");
      ___manager.call(method_call);
    }

    public static class DMI_TransRollbackCall extends org.apache.thrift.async.TAsyncMethodCall {
      private String stringType;
      private String stringAccess;
      public DMI_TransRollbackCall(String stringType, String stringAccess, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, TProtocolFactory protocolFactory, TTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stringType = stringType;
        this.stringAccess = stringAccess;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DMI_TransRollback", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DMI_TransRollback_args args = new DMI_TransRollback_args();
        args.setStringType(stringType);
        args.setStringAccess(stringAccess);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Integer getResult() throws TException {
        if (!isFinished()) {
          throw new IllegalStateException("Method call not finished!");
        }
        if (getFrameBuffer() == null) {
          return null;
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_DMI_TransRollback();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

    public String getServiceName() {
      return DMIThriftInterface.SERVICE_NAME;
    }

    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("DMI_GetAllResId", new DMI_GetAllResId());
      processMap.put("DMI_GetDataAttribute", new DMI_GetDataAttribute());
      processMap.put("DMI_FilterParam", new DMI_FilterParam());
      processMap.put("DMI_FilterParam2", new DMI_FilterParam2());
      processMap.put("DMI_UpdateData", new DMI_UpdateData());
      processMap.put("DMI_DeleteData", new DMI_DeleteData());
      processMap.put("DMI_DeleteData2", new DMI_DeleteData2());
      processMap.put("DMI_ReceiveCmd", new DMI_ReceiveCmd());
      processMap.put("DMI_TransBegin", new DMI_TransBegin());
      processMap.put("DMI_TransCommit", new DMI_TransCommit());
      processMap.put("DMI_TransRollback", new DMI_TransRollback());
      return processMap;
    }

    public static class DMI_GetAllResId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DMI_GetAllResId_args> {
      public DMI_GetAllResId() {
        super("DMI_GetAllResId");
      }

      public DMI_GetAllResId_args getEmptyArgsInstance() {
        return new DMI_GetAllResId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DMI_GetAllResId_result getResult(I iface, DMI_GetAllResId_args args) throws TException {
        DMI_GetAllResId_result result = new DMI_GetAllResId_result();
        result.success = iface.DMI_GetAllResId(args.stringType, args.stringTag, args.stringAccess);
        return result;
      }
    }

    public static class DMI_GetDataAttribute<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DMI_GetDataAttribute_args> {
      public DMI_GetDataAttribute() {
        super("DMI_GetDataAttribute");
      }

      public DMI_GetDataAttribute_args getEmptyArgsInstance() {
        return new DMI_GetDataAttribute_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DMI_GetDataAttribute_result getResult(I iface, DMI_GetDataAttribute_args args) throws TException {
        DMI_GetDataAttribute_result result = new DMI_GetDataAttribute_result();
        result.success = iface.DMI_GetDataAttribute(args.stringType, args.stringAccess);
        return result;
      }
    }

    public static class DMI_FilterParam<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DMI_FilterParam_args> {
      public DMI_FilterParam() {
        super("DMI_FilterParam");
      }

      public DMI_FilterParam_args getEmptyArgsInstance() {
        return new DMI_FilterParam_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DMI_FilterParam_result getResult(I iface, DMI_FilterParam_args args) throws TException {
        DMI_FilterParam_result result = new DMI_FilterParam_result();
        result.success = iface.DMI_FilterParam(args.stringType, args.vecTags, args.mpCondition, args.stringQyCondition, args.stringAccess);
        return result;
      }
    }

    public static class DMI_FilterParam2<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DMI_FilterParam2_args> {
      public DMI_FilterParam2() {
        super("DMI_FilterParam2");
      }

      public DMI_FilterParam2_args getEmptyArgsInstance() {
        return new DMI_FilterParam2_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DMI_FilterParam2_result getResult(I iface, DMI_FilterParam2_args args) throws TException {
        DMI_FilterParam2_result result = new DMI_FilterParam2_result();
        result.success = iface.DMI_FilterParam2(args.stringType, args.vecTags, args.mpCondition, args.stringQyCondition, args.stringAccess, args.stringKeyMacro);
        return result;
      }
    }

    public static class DMI_UpdateData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DMI_UpdateData_args> {
      public DMI_UpdateData() {
        super("DMI_UpdateData");
      }

      public DMI_UpdateData_args getEmptyArgsInstance() {
        return new DMI_UpdateData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DMI_UpdateData_result getResult(I iface, DMI_UpdateData_args args) throws TException {
        DMI_UpdateData_result result = new DMI_UpdateData_result();
        result.success = iface.DMI_UpdateData(args.stringType, args.mpTag2Value, args.stringAccess);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class DMI_DeleteData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DMI_DeleteData_args> {
      public DMI_DeleteData() {
        super("DMI_DeleteData");
      }

      public DMI_DeleteData_args getEmptyArgsInstance() {
        return new DMI_DeleteData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DMI_DeleteData_result getResult(I iface, DMI_DeleteData_args args) throws TException {
        DMI_DeleteData_result result = new DMI_DeleteData_result();
        result.success = iface.DMI_DeleteData(args.stringType, args.mpCondition, args.stringAccess);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class DMI_DeleteData2<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DMI_DeleteData2_args> {
      public DMI_DeleteData2() {
        super("DMI_DeleteData2");
      }

      public DMI_DeleteData2_args getEmptyArgsInstance() {
        return new DMI_DeleteData2_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DMI_DeleteData2_result getResult(I iface, DMI_DeleteData2_args args) throws TException {
        DMI_DeleteData2_result result = new DMI_DeleteData2_result();
        iface.DMI_DeleteData2(args.stringType, args.vcId, args.stringAccess, args.stringKeyMacro);
        return result;
      }
    }

    public static class DMI_ReceiveCmd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DMI_ReceiveCmd_args> {
      public DMI_ReceiveCmd() {
        super("DMI_ReceiveCmd");
      }

      public DMI_ReceiveCmd_args getEmptyArgsInstance() {
        return new DMI_ReceiveCmd_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DMI_ReceiveCmd_result getResult(I iface, DMI_ReceiveCmd_args args) throws TException {
        DMI_ReceiveCmd_result result = new DMI_ReceiveCmd_result();
        result.success = iface.DMI_ReceiveCmd(args.stringCmd, args.stringAccess);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class DMI_TransBegin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DMI_TransBegin_args> {
      public DMI_TransBegin() {
        super("DMI_TransBegin");
      }

      public DMI_TransBegin_args getEmptyArgsInstance() {
        return new DMI_TransBegin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DMI_TransBegin_result getResult(I iface, DMI_TransBegin_args args) throws TException {
        DMI_TransBegin_result result = new DMI_TransBegin_result();
        result.success = iface.DMI_TransBegin(args.stringType, args.stringAccess);
        return result;
      }
    }

    public static class DMI_TransCommit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DMI_TransCommit_args> {
      public DMI_TransCommit() {
        super("DMI_TransCommit");
      }

      public DMI_TransCommit_args getEmptyArgsInstance() {
        return new DMI_TransCommit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DMI_TransCommit_result getResult(I iface, DMI_TransCommit_args args) throws TException {
        DMI_TransCommit_result result = new DMI_TransCommit_result();
        result.success = iface.DMI_TransCommit(args.stringType, args.stringAccess);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class DMI_TransRollback<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DMI_TransRollback_args> {
      public DMI_TransRollback() {
        super("DMI_TransRollback");
      }

      public DMI_TransRollback_args getEmptyArgsInstance() {
        return new DMI_TransRollback_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DMI_TransRollback_result getResult(I iface, DMI_TransRollback_args args) throws TException {
        DMI_TransRollback_result result = new DMI_TransRollback_result();
        result.success = iface.DMI_TransRollback(args.stringType, args.stringAccess);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

    public String getServiceName() {
      return DMIThriftInterface.SERVICE_NAME;
    }

    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()), getPushMap(new HashMap<String, org.apache.thrift.AsyncPushFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap, Map<String, org.apache.thrift.AsyncPushFunction<I, ? extends org.apache.thrift.TBase, ?>> pushMap) {
      super(iface, getProcessMap(processMap), getPushMap(pushMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("DMI_GetAllResId", new DMI_GetAllResId());
      processMap.put("DMI_GetDataAttribute", new DMI_GetDataAttribute());
      processMap.put("DMI_FilterParam", new DMI_FilterParam());
      processMap.put("DMI_FilterParam2", new DMI_FilterParam2());
      processMap.put("DMI_UpdateData", new DMI_UpdateData());
      processMap.put("DMI_DeleteData", new DMI_DeleteData());
      processMap.put("DMI_DeleteData2", new DMI_DeleteData2());
      processMap.put("DMI_ReceiveCmd", new DMI_ReceiveCmd());
      processMap.put("DMI_TransBegin", new DMI_TransBegin());
      processMap.put("DMI_TransCommit", new DMI_TransCommit());
      processMap.put("DMI_TransRollback", new DMI_TransRollback());
      return processMap;
    }

    private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncPushFunction<I, ? extends org.apache.thrift.TBase, ?>> getPushMap(Map<String, org.apache.thrift.AsyncPushFunction<I, ? extends org.apache.thrift.TBase, ?>> pushMap) {
      return pushMap;
    }

    public static class DMI_GetAllResId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DMI_GetAllResId_args, List<String>> {
      public DMI_GetAllResId() {
        super("DMI_GetAllResId");
      }

      public DMI_GetAllResId_args getEmptyArgsInstance() {
        return new DMI_GetAllResId_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final ProcessContext processContext) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() {
          public void onComplete(List<String> o) {
            DMI_GetAllResId_result result = new DMI_GetAllResId_result();
            result.success = o;
            try {
              fcall.sendResponse(processContext,result, org.apache.thrift.protocol.TMessageType.REPLY);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            processContext.closeQuietly();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            DMI_GetAllResId_result result = new DMI_GetAllResId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(processContext,msg,msgType);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            processContext.closeQuietly();
          }
        };
      }

      protected boolean isOneway() {
        return false;

      }

      @Override
      public void start(I iface, DMI_GetAllResId_args args, AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.DMI_GetAllResId(args.stringType, args.stringTag, args.stringAccess,resultHandler);
      }
    }

    public static class DMI_GetDataAttribute<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DMI_GetDataAttribute_args, List<String>> {
      public DMI_GetDataAttribute() {
        super("DMI_GetDataAttribute");
      }

      public DMI_GetDataAttribute_args getEmptyArgsInstance() {
        return new DMI_GetDataAttribute_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final ProcessContext processContext) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() {
          public void onComplete(List<String> o) {
            DMI_GetDataAttribute_result result = new DMI_GetDataAttribute_result();
            result.success = o;
            try {
              fcall.sendResponse(processContext,result, org.apache.thrift.protocol.TMessageType.REPLY);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            processContext.closeQuietly();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            DMI_GetDataAttribute_result result = new DMI_GetDataAttribute_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(processContext,msg,msgType);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            processContext.closeQuietly();
          }
        };
      }

      protected boolean isOneway() {
        return false;

      }

      @Override
      public void start(I iface, DMI_GetDataAttribute_args args, AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.DMI_GetDataAttribute(args.stringType, args.stringAccess,resultHandler);
      }
    }

    public static class DMI_FilterParam<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DMI_FilterParam_args, Map<Integer,Map<String,String>>> {
      public DMI_FilterParam() {
        super("DMI_FilterParam");
      }

      public DMI_FilterParam_args getEmptyArgsInstance() {
        return new DMI_FilterParam_args();
      }

      public AsyncMethodCallback<Map<Integer,Map<String,String>>> getResultHandler(final ProcessContext processContext) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<Integer,Map<String,String>>>() {
          public void onComplete(Map<Integer,Map<String,String>> o) {
            DMI_FilterParam_result result = new DMI_FilterParam_result();
            result.success = o;
            try {
              fcall.sendResponse(processContext,result, org.apache.thrift.protocol.TMessageType.REPLY);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            processContext.closeQuietly();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            DMI_FilterParam_result result = new DMI_FilterParam_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(processContext,msg,msgType);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            processContext.closeQuietly();
          }
        };
      }

      protected boolean isOneway() {
        return false;

      }

      @Override
      public void start(I iface, DMI_FilterParam_args args, AsyncMethodCallback<Map<Integer,Map<String,String>>> resultHandler) throws TException {
        iface.DMI_FilterParam(args.stringType, args.vecTags, args.mpCondition, args.stringQyCondition, args.stringAccess,resultHandler);
      }
    }

    public static class DMI_FilterParam2<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DMI_FilterParam2_args, Map<String,Map<String,String>>> {
      public DMI_FilterParam2() {
        super("DMI_FilterParam2");
      }

      public DMI_FilterParam2_args getEmptyArgsInstance() {
        return new DMI_FilterParam2_args();
      }

      public AsyncMethodCallback<Map<String,Map<String,String>>> getResultHandler(final ProcessContext processContext) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,Map<String,String>>>() {
          public void onComplete(Map<String,Map<String,String>> o) {
            DMI_FilterParam2_result result = new DMI_FilterParam2_result();
            result.success = o;
            try {
              fcall.sendResponse(processContext,result, org.apache.thrift.protocol.TMessageType.REPLY);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            processContext.closeQuietly();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            DMI_FilterParam2_result result = new DMI_FilterParam2_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(processContext,msg,msgType);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            processContext.closeQuietly();
          }
        };
      }

      protected boolean isOneway() {
        return false;

      }

      @Override
      public void start(I iface, DMI_FilterParam2_args args, AsyncMethodCallback<Map<String,Map<String,String>>> resultHandler) throws TException {
        iface.DMI_FilterParam2(args.stringType, args.vecTags, args.mpCondition, args.stringQyCondition, args.stringAccess, args.stringKeyMacro,resultHandler);
      }
    }

    public static class DMI_UpdateData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DMI_UpdateData_args, Integer> {
      public DMI_UpdateData() {
        super("DMI_UpdateData");
      }

      public DMI_UpdateData_args getEmptyArgsInstance() {
        return new DMI_UpdateData_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final ProcessContext processContext) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() {
          public void onComplete(Integer o) {
            DMI_UpdateData_result result = new DMI_UpdateData_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(processContext,result, org.apache.thrift.protocol.TMessageType.REPLY);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            processContext.closeQuietly();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            DMI_UpdateData_result result = new DMI_UpdateData_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(processContext,msg,msgType);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            processContext.closeQuietly();
          }
        };
      }

      protected boolean isOneway() {
        return false;

      }

      @Override
      public void start(I iface, DMI_UpdateData_args args, AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.DMI_UpdateData(args.stringType, args.mpTag2Value, args.stringAccess,resultHandler);
      }
    }

    public static class DMI_DeleteData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DMI_DeleteData_args, Integer> {
      public DMI_DeleteData() {
        super("DMI_DeleteData");
      }

      public DMI_DeleteData_args getEmptyArgsInstance() {
        return new DMI_DeleteData_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final ProcessContext processContext) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() {
          public void onComplete(Integer o) {
            DMI_DeleteData_result result = new DMI_DeleteData_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(processContext,result, org.apache.thrift.protocol.TMessageType.REPLY);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            processContext.closeQuietly();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            DMI_DeleteData_result result = new DMI_DeleteData_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(processContext,msg,msgType);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            processContext.closeQuietly();
          }
        };
      }

      protected boolean isOneway() {
        return false;

      }

      @Override
      public void start(I iface, DMI_DeleteData_args args, AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.DMI_DeleteData(args.stringType, args.mpCondition, args.stringAccess,resultHandler);
      }
    }

    public static class DMI_DeleteData2<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DMI_DeleteData2_args, Void> {
      public DMI_DeleteData2() {
        super("DMI_DeleteData2");
      }

      public DMI_DeleteData2_args getEmptyArgsInstance() {
        return new DMI_DeleteData2_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final ProcessContext processContext) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            DMI_DeleteData2_result result = new DMI_DeleteData2_result();
            try {
              fcall.sendResponse(processContext,result, org.apache.thrift.protocol.TMessageType.REPLY);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            processContext.closeQuietly();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            DMI_DeleteData2_result result = new DMI_DeleteData2_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(processContext,msg,msgType);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            processContext.closeQuietly();
          }
        };
      }

      protected boolean isOneway() {
        return false;

      }

      @Override
      public void start(I iface, DMI_DeleteData2_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.DMI_DeleteData2(args.stringType, args.vcId, args.stringAccess, args.stringKeyMacro,resultHandler);
      }
    }

    public static class DMI_ReceiveCmd<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DMI_ReceiveCmd_args, Integer> {
      public DMI_ReceiveCmd() {
        super("DMI_ReceiveCmd");
      }

      public DMI_ReceiveCmd_args getEmptyArgsInstance() {
        return new DMI_ReceiveCmd_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final ProcessContext processContext) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() {
          public void onComplete(Integer o) {
            DMI_ReceiveCmd_result result = new DMI_ReceiveCmd_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(processContext,result, org.apache.thrift.protocol.TMessageType.REPLY);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            processContext.closeQuietly();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            DMI_ReceiveCmd_result result = new DMI_ReceiveCmd_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(processContext,msg,msgType);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            processContext.closeQuietly();
          }
        };
      }

      protected boolean isOneway() {
        return false;

      }

      @Override
      public void start(I iface, DMI_ReceiveCmd_args args, AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.DMI_ReceiveCmd(args.stringCmd, args.stringAccess,resultHandler);
      }
    }

    public static class DMI_TransBegin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DMI_TransBegin_args, String> {
      public DMI_TransBegin() {
        super("DMI_TransBegin");
      }

      public DMI_TransBegin_args getEmptyArgsInstance() {
        return new DMI_TransBegin_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final ProcessContext processContext) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            DMI_TransBegin_result result = new DMI_TransBegin_result();
            result.success = o;
            try {
              fcall.sendResponse(processContext,result, org.apache.thrift.protocol.TMessageType.REPLY);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            processContext.closeQuietly();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            DMI_TransBegin_result result = new DMI_TransBegin_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(processContext,msg,msgType);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            processContext.closeQuietly();
          }
        };
      }

      protected boolean isOneway() {
        return false;

      }

      @Override
      public void start(I iface, DMI_TransBegin_args args, AsyncMethodCallback<String> resultHandler) throws TException {
        iface.DMI_TransBegin(args.stringType, args.stringAccess,resultHandler);
      }
    }

    public static class DMI_TransCommit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DMI_TransCommit_args, Integer> {
      public DMI_TransCommit() {
        super("DMI_TransCommit");
      }

      public DMI_TransCommit_args getEmptyArgsInstance() {
        return new DMI_TransCommit_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final ProcessContext processContext) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() {
          public void onComplete(Integer o) {
            DMI_TransCommit_result result = new DMI_TransCommit_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(processContext,result, org.apache.thrift.protocol.TMessageType.REPLY);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            processContext.closeQuietly();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            DMI_TransCommit_result result = new DMI_TransCommit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(processContext,msg,msgType);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            processContext.closeQuietly();
          }
        };
      }

      protected boolean isOneway() {
        return false;

      }

      @Override
      public void start(I iface, DMI_TransCommit_args args, AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.DMI_TransCommit(args.stringType, args.stringAccess,resultHandler);
      }
    }

    public static class DMI_TransRollback<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DMI_TransRollback_args, Integer> {
      public DMI_TransRollback() {
        super("DMI_TransRollback");
      }

      public DMI_TransRollback_args getEmptyArgsInstance() {
        return new DMI_TransRollback_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final ProcessContext processContext) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() {
          public void onComplete(Integer o) {
            DMI_TransRollback_result result = new DMI_TransRollback_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(processContext,result, org.apache.thrift.protocol.TMessageType.REPLY);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            processContext.closeQuietly();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            DMI_TransRollback_result result = new DMI_TransRollback_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(processContext,msg,msgType);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            processContext.closeQuietly();
          }
        };
      }

      protected boolean isOneway() {
        return false;

      }

      @Override
      public void start(I iface, DMI_TransRollback_args args, AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.DMI_TransRollback(args.stringType, args.stringAccess,resultHandler);
      }
    }

  }

  public static class DMI_GetAllResId_args implements org.apache.thrift.TBase<DMI_GetAllResId_args, DMI_GetAllResId_args._Fields>, java.io.Serializable, Cloneable, Comparable<DMI_GetAllResId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DMI_GetAllResId_args");

    private static final org.apache.thrift.protocol.TField STRING_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("stringType", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STRING_TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("stringTag", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STRING_ACCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("stringAccess", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DMI_GetAllResId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DMI_GetAllResId_argsTupleSchemeFactory());
    }

    public String stringType; // required
    public String stringTag; // required
    public String stringAccess; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRING_TYPE((short)1, "stringType"),
      STRING_TAG((short)2, "stringTag"),
      STRING_ACCESS((short)3, "stringAccess");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRING_TYPE
            return STRING_TYPE;
          case 2: // STRING_TAG
            return STRING_TAG;
          case 3: // STRING_ACCESS
            return STRING_ACCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRING_TYPE, new org.apache.thrift.meta_data.FieldMetaData("stringType", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STRING_TAG, new org.apache.thrift.meta_data.FieldMetaData("stringTag", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STRING_ACCESS, new org.apache.thrift.meta_data.FieldMetaData("stringAccess", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DMI_GetAllResId_args.class, metaDataMap);
    }

    public DMI_GetAllResId_args() {
    }

    public DMI_GetAllResId_args(
      String stringType,
      String stringTag,
      String stringAccess)
    {
      this();
      this.stringType = stringType;
      this.stringTag = stringTag;
      this.stringAccess = stringAccess;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DMI_GetAllResId_args(DMI_GetAllResId_args other) {
      if (other.isSetStringType()) {
        this.stringType = other.stringType;
      }
      if (other.isSetStringTag()) {
        this.stringTag = other.stringTag;
      }
      if (other.isSetStringAccess()) {
        this.stringAccess = other.stringAccess;
      }
    }

    public DMI_GetAllResId_args deepCopy() {
      return new DMI_GetAllResId_args(this);
    }

    @Override
    public void clear() {
      this.stringType = null;
      this.stringTag = null;
      this.stringAccess = null;
    }

    public String getStringType() {
      return this.stringType;
    }

    public DMI_GetAllResId_args setStringType(String stringType) {
      this.stringType = stringType;
      return this;
    }

    public void unsetStringType() {
      this.stringType = null;
    }

    /** Returns true if field stringType is set (has been assigned a value) and false otherwise */
    public boolean isSetStringType() {
      return this.stringType != null;
    }

    public void setStringTypeIsSet(boolean value) {
      if (!value) {
        this.stringType = null;
      }
    }

    public String getStringTag() {
      return this.stringTag;
    }

    public DMI_GetAllResId_args setStringTag(String stringTag) {
      this.stringTag = stringTag;
      return this;
    }

    public void unsetStringTag() {
      this.stringTag = null;
    }

    /** Returns true if field stringTag is set (has been assigned a value) and false otherwise */
    public boolean isSetStringTag() {
      return this.stringTag != null;
    }

    public void setStringTagIsSet(boolean value) {
      if (!value) {
        this.stringTag = null;
      }
    }

    public String getStringAccess() {
      return this.stringAccess;
    }

    public DMI_GetAllResId_args setStringAccess(String stringAccess) {
      this.stringAccess = stringAccess;
      return this;
    }

    public void unsetStringAccess() {
      this.stringAccess = null;
    }

    /** Returns true if field stringAccess is set (has been assigned a value) and false otherwise */
    public boolean isSetStringAccess() {
      return this.stringAccess != null;
    }

    public void setStringAccessIsSet(boolean value) {
      if (!value) {
        this.stringAccess = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRING_TYPE:
        if (value == null) {
          unsetStringType();
        } else {
          setStringType((String)value);
        }
        break;

      case STRING_TAG:
        if (value == null) {
          unsetStringTag();
        } else {
          setStringTag((String)value);
        }
        break;

      case STRING_ACCESS:
        if (value == null) {
          unsetStringAccess();
        } else {
          setStringAccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRING_TYPE:
        return getStringType();

      case STRING_TAG:
        return getStringTag();

      case STRING_ACCESS:
        return getStringAccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRING_TYPE:
        return isSetStringType();
      case STRING_TAG:
        return isSetStringTag();
      case STRING_ACCESS:
        return isSetStringAccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DMI_GetAllResId_args)
        return this.equals((DMI_GetAllResId_args)that);
      return false;
    }

    public boolean equals(DMI_GetAllResId_args that) {
      if (that == null)
        return false;

      boolean this_present_stringType = true && this.isSetStringType();
      boolean that_present_stringType = true && that.isSetStringType();
      if (this_present_stringType || that_present_stringType) {
        if (!(this_present_stringType && that_present_stringType))
          return false;
        if (!this.stringType.equals(that.stringType))
          return false;
      }

      boolean this_present_stringTag = true && this.isSetStringTag();
      boolean that_present_stringTag = true && that.isSetStringTag();
      if (this_present_stringTag || that_present_stringTag) {
        if (!(this_present_stringTag && that_present_stringTag))
          return false;
        if (!this.stringTag.equals(that.stringTag))
          return false;
      }

      boolean this_present_stringAccess = true && this.isSetStringAccess();
      boolean that_present_stringAccess = true && that.isSetStringAccess();
      if (this_present_stringAccess || that_present_stringAccess) {
        if (!(this_present_stringAccess && that_present_stringAccess))
          return false;
        if (!this.stringAccess.equals(that.stringAccess))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stringType = true && (isSetStringType());
      list.add(present_stringType);
      if (present_stringType)
        list.add(stringType);

      boolean present_stringTag = true && (isSetStringTag());
      list.add(present_stringTag);
      if (present_stringTag)
        list.add(stringTag);

      boolean present_stringAccess = true && (isSetStringAccess());
      list.add(present_stringAccess);
      if (present_stringAccess)
        list.add(stringAccess);

      return list.hashCode();
    }

    @Override
    public int compareTo(DMI_GetAllResId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStringType()).compareTo(other.isSetStringType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringType, other.stringType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStringTag()).compareTo(other.isSetStringTag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringTag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringTag, other.stringTag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStringAccess()).compareTo(other.isSetStringAccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringAccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringAccess, other.stringAccess);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DMI_GetAllResId_args(");
      boolean first = true;

      sb.append("stringType:");
      if (this.stringType == null) {
        sb.append("null");
      } else {
        sb.append(this.stringType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stringTag:");
      if (this.stringTag == null) {
        sb.append("null");
      } else {
        sb.append(this.stringTag);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stringAccess:");
      if (this.stringAccess == null) {
        sb.append("null");
      } else {
        sb.append(this.stringAccess);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DMI_GetAllResId_argsStandardSchemeFactory implements SchemeFactory {
      public DMI_GetAllResId_argsStandardScheme getScheme() {
        return new DMI_GetAllResId_argsStandardScheme();
      }
    }

    private static class DMI_GetAllResId_argsStandardScheme extends StandardScheme<DMI_GetAllResId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DMI_GetAllResId_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // STRING_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringType = iprot.readString();
                struct.setStringTypeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STRING_TAG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringTag = iprot.readString();
                struct.setStringTagIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STRING_ACCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringAccess = iprot.readString();
                struct.setStringAccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DMI_GetAllResId_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stringType != null) {
          oprot.writeFieldBegin(STRING_TYPE_FIELD_DESC);
          oprot.writeString(struct.stringType);
          oprot.writeFieldEnd();
        }
        if (struct.stringTag != null) {
          oprot.writeFieldBegin(STRING_TAG_FIELD_DESC);
          oprot.writeString(struct.stringTag);
          oprot.writeFieldEnd();
        }
        if (struct.stringAccess != null) {
          oprot.writeFieldBegin(STRING_ACCESS_FIELD_DESC);
          oprot.writeString(struct.stringAccess);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DMI_GetAllResId_argsTupleSchemeFactory implements SchemeFactory {
      public DMI_GetAllResId_argsTupleScheme getScheme() {
        return new DMI_GetAllResId_argsTupleScheme();
      }
    }

    private static class DMI_GetAllResId_argsTupleScheme extends TupleScheme<DMI_GetAllResId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DMI_GetAllResId_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStringType()) {
          optionals.set(0);
        }
        if (struct.isSetStringTag()) {
          optionals.set(1);
        }
        if (struct.isSetStringAccess()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetStringType()) {
          oprot.writeString(struct.stringType);
        }
        if (struct.isSetStringTag()) {
          oprot.writeString(struct.stringTag);
        }
        if (struct.isSetStringAccess()) {
          oprot.writeString(struct.stringAccess);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DMI_GetAllResId_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.stringType = iprot.readString();
          struct.setStringTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stringTag = iprot.readString();
          struct.setStringTagIsSet(true);
        }
        if (incoming.get(2)) {
          struct.stringAccess = iprot.readString();
          struct.setStringAccessIsSet(true);
        }
      }
    }

  }

  public static class DMI_GetAllResId_result implements org.apache.thrift.TBase<DMI_GetAllResId_result, DMI_GetAllResId_result._Fields>, java.io.Serializable, Cloneable, Comparable<DMI_GetAllResId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DMI_GetAllResId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DMI_GetAllResId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DMI_GetAllResId_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DMI_GetAllResId_result.class, metaDataMap);
    }

    public DMI_GetAllResId_result() {
    }

    public DMI_GetAllResId_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DMI_GetAllResId_result(DMI_GetAllResId_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public DMI_GetAllResId_result deepCopy() {
      return new DMI_GetAllResId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public DMI_GetAllResId_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DMI_GetAllResId_result)
        return this.equals((DMI_GetAllResId_result)that);
      return false;
    }

    public boolean equals(DMI_GetAllResId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(DMI_GetAllResId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DMI_GetAllResId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DMI_GetAllResId_resultStandardSchemeFactory implements SchemeFactory {
      public DMI_GetAllResId_resultStandardScheme getScheme() {
        return new DMI_GetAllResId_resultStandardScheme();
      }
    }

    private static class DMI_GetAllResId_resultStandardScheme extends StandardScheme<DMI_GetAllResId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DMI_GetAllResId_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list0.size);
                  String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DMI_GetAllResId_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter3 : struct.success)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DMI_GetAllResId_resultTupleSchemeFactory implements SchemeFactory {
      public DMI_GetAllResId_resultTupleScheme getScheme() {
        return new DMI_GetAllResId_resultTupleScheme();
      }
    }

    private static class DMI_GetAllResId_resultTupleScheme extends TupleScheme<DMI_GetAllResId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DMI_GetAllResId_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter4 : struct.success)
            {
              oprot.writeString(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DMI_GetAllResId_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list5.size);
            String _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readString();
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class DMI_GetDataAttribute_args implements org.apache.thrift.TBase<DMI_GetDataAttribute_args, DMI_GetDataAttribute_args._Fields>, java.io.Serializable, Cloneable, Comparable<DMI_GetDataAttribute_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DMI_GetDataAttribute_args");

    private static final org.apache.thrift.protocol.TField STRING_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("stringType", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STRING_ACCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("stringAccess", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DMI_GetDataAttribute_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DMI_GetDataAttribute_argsTupleSchemeFactory());
    }

    public String stringType; // required
    public String stringAccess; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRING_TYPE((short)1, "stringType"),
      STRING_ACCESS((short)2, "stringAccess");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRING_TYPE
            return STRING_TYPE;
          case 2: // STRING_ACCESS
            return STRING_ACCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRING_TYPE, new org.apache.thrift.meta_data.FieldMetaData("stringType", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STRING_ACCESS, new org.apache.thrift.meta_data.FieldMetaData("stringAccess", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DMI_GetDataAttribute_args.class, metaDataMap);
    }

    public DMI_GetDataAttribute_args() {
    }

    public DMI_GetDataAttribute_args(
      String stringType,
      String stringAccess)
    {
      this();
      this.stringType = stringType;
      this.stringAccess = stringAccess;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DMI_GetDataAttribute_args(DMI_GetDataAttribute_args other) {
      if (other.isSetStringType()) {
        this.stringType = other.stringType;
      }
      if (other.isSetStringAccess()) {
        this.stringAccess = other.stringAccess;
      }
    }

    public DMI_GetDataAttribute_args deepCopy() {
      return new DMI_GetDataAttribute_args(this);
    }

    @Override
    public void clear() {
      this.stringType = null;
      this.stringAccess = null;
    }

    public String getStringType() {
      return this.stringType;
    }

    public DMI_GetDataAttribute_args setStringType(String stringType) {
      this.stringType = stringType;
      return this;
    }

    public void unsetStringType() {
      this.stringType = null;
    }

    /** Returns true if field stringType is set (has been assigned a value) and false otherwise */
    public boolean isSetStringType() {
      return this.stringType != null;
    }

    public void setStringTypeIsSet(boolean value) {
      if (!value) {
        this.stringType = null;
      }
    }

    public String getStringAccess() {
      return this.stringAccess;
    }

    public DMI_GetDataAttribute_args setStringAccess(String stringAccess) {
      this.stringAccess = stringAccess;
      return this;
    }

    public void unsetStringAccess() {
      this.stringAccess = null;
    }

    /** Returns true if field stringAccess is set (has been assigned a value) and false otherwise */
    public boolean isSetStringAccess() {
      return this.stringAccess != null;
    }

    public void setStringAccessIsSet(boolean value) {
      if (!value) {
        this.stringAccess = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRING_TYPE:
        if (value == null) {
          unsetStringType();
        } else {
          setStringType((String)value);
        }
        break;

      case STRING_ACCESS:
        if (value == null) {
          unsetStringAccess();
        } else {
          setStringAccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRING_TYPE:
        return getStringType();

      case STRING_ACCESS:
        return getStringAccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRING_TYPE:
        return isSetStringType();
      case STRING_ACCESS:
        return isSetStringAccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DMI_GetDataAttribute_args)
        return this.equals((DMI_GetDataAttribute_args)that);
      return false;
    }

    public boolean equals(DMI_GetDataAttribute_args that) {
      if (that == null)
        return false;

      boolean this_present_stringType = true && this.isSetStringType();
      boolean that_present_stringType = true && that.isSetStringType();
      if (this_present_stringType || that_present_stringType) {
        if (!(this_present_stringType && that_present_stringType))
          return false;
        if (!this.stringType.equals(that.stringType))
          return false;
      }

      boolean this_present_stringAccess = true && this.isSetStringAccess();
      boolean that_present_stringAccess = true && that.isSetStringAccess();
      if (this_present_stringAccess || that_present_stringAccess) {
        if (!(this_present_stringAccess && that_present_stringAccess))
          return false;
        if (!this.stringAccess.equals(that.stringAccess))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stringType = true && (isSetStringType());
      list.add(present_stringType);
      if (present_stringType)
        list.add(stringType);

      boolean present_stringAccess = true && (isSetStringAccess());
      list.add(present_stringAccess);
      if (present_stringAccess)
        list.add(stringAccess);

      return list.hashCode();
    }

    @Override
    public int compareTo(DMI_GetDataAttribute_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStringType()).compareTo(other.isSetStringType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringType, other.stringType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStringAccess()).compareTo(other.isSetStringAccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringAccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringAccess, other.stringAccess);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DMI_GetDataAttribute_args(");
      boolean first = true;

      sb.append("stringType:");
      if (this.stringType == null) {
        sb.append("null");
      } else {
        sb.append(this.stringType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stringAccess:");
      if (this.stringAccess == null) {
        sb.append("null");
      } else {
        sb.append(this.stringAccess);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DMI_GetDataAttribute_argsStandardSchemeFactory implements SchemeFactory {
      public DMI_GetDataAttribute_argsStandardScheme getScheme() {
        return new DMI_GetDataAttribute_argsStandardScheme();
      }
    }

    private static class DMI_GetDataAttribute_argsStandardScheme extends StandardScheme<DMI_GetDataAttribute_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DMI_GetDataAttribute_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // STRING_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringType = iprot.readString();
                struct.setStringTypeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STRING_ACCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringAccess = iprot.readString();
                struct.setStringAccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DMI_GetDataAttribute_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stringType != null) {
          oprot.writeFieldBegin(STRING_TYPE_FIELD_DESC);
          oprot.writeString(struct.stringType);
          oprot.writeFieldEnd();
        }
        if (struct.stringAccess != null) {
          oprot.writeFieldBegin(STRING_ACCESS_FIELD_DESC);
          oprot.writeString(struct.stringAccess);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DMI_GetDataAttribute_argsTupleSchemeFactory implements SchemeFactory {
      public DMI_GetDataAttribute_argsTupleScheme getScheme() {
        return new DMI_GetDataAttribute_argsTupleScheme();
      }
    }

    private static class DMI_GetDataAttribute_argsTupleScheme extends TupleScheme<DMI_GetDataAttribute_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DMI_GetDataAttribute_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStringType()) {
          optionals.set(0);
        }
        if (struct.isSetStringAccess()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStringType()) {
          oprot.writeString(struct.stringType);
        }
        if (struct.isSetStringAccess()) {
          oprot.writeString(struct.stringAccess);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DMI_GetDataAttribute_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.stringType = iprot.readString();
          struct.setStringTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stringAccess = iprot.readString();
          struct.setStringAccessIsSet(true);
        }
      }
    }

  }

  public static class DMI_GetDataAttribute_result implements org.apache.thrift.TBase<DMI_GetDataAttribute_result, DMI_GetDataAttribute_result._Fields>, java.io.Serializable, Cloneable, Comparable<DMI_GetDataAttribute_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DMI_GetDataAttribute_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DMI_GetDataAttribute_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DMI_GetDataAttribute_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DMI_GetDataAttribute_result.class, metaDataMap);
    }

    public DMI_GetDataAttribute_result() {
    }

    public DMI_GetDataAttribute_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DMI_GetDataAttribute_result(DMI_GetDataAttribute_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public DMI_GetDataAttribute_result deepCopy() {
      return new DMI_GetDataAttribute_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public DMI_GetDataAttribute_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DMI_GetDataAttribute_result)
        return this.equals((DMI_GetDataAttribute_result)that);
      return false;
    }

    public boolean equals(DMI_GetDataAttribute_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(DMI_GetDataAttribute_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DMI_GetDataAttribute_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DMI_GetDataAttribute_resultStandardSchemeFactory implements SchemeFactory {
      public DMI_GetDataAttribute_resultStandardScheme getScheme() {
        return new DMI_GetDataAttribute_resultStandardScheme();
      }
    }

    private static class DMI_GetDataAttribute_resultStandardScheme extends StandardScheme<DMI_GetDataAttribute_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DMI_GetDataAttribute_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list8.size);
                  String _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = iprot.readString();
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DMI_GetDataAttribute_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter11 : struct.success)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DMI_GetDataAttribute_resultTupleSchemeFactory implements SchemeFactory {
      public DMI_GetDataAttribute_resultTupleScheme getScheme() {
        return new DMI_GetDataAttribute_resultTupleScheme();
      }
    }

    private static class DMI_GetDataAttribute_resultTupleScheme extends TupleScheme<DMI_GetDataAttribute_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DMI_GetDataAttribute_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter12 : struct.success)
            {
              oprot.writeString(_iter12);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DMI_GetDataAttribute_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list13.size);
            String _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readString();
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class DMI_FilterParam_args implements org.apache.thrift.TBase<DMI_FilterParam_args, DMI_FilterParam_args._Fields>, java.io.Serializable, Cloneable, Comparable<DMI_FilterParam_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DMI_FilterParam_args");

    private static final org.apache.thrift.protocol.TField STRING_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("stringType", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VEC_TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("vecTags", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField MP_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("mpCondition", org.apache.thrift.protocol.TType.MAP, (short)3);
    private static final org.apache.thrift.protocol.TField STRING_QY_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("stringQyCondition", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField STRING_ACCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("stringAccess", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DMI_FilterParam_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DMI_FilterParam_argsTupleSchemeFactory());
    }

    public String stringType; // required
    public List<String> vecTags; // required
    public Map<String,List<String>> mpCondition; // required
    public String stringQyCondition; // required
    public String stringAccess; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRING_TYPE((short)1, "stringType"),
      VEC_TAGS((short)2, "vecTags"),
      MP_CONDITION((short)3, "mpCondition"),
      STRING_QY_CONDITION((short)4, "stringQyCondition"),
      STRING_ACCESS((short)5, "stringAccess");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRING_TYPE
            return STRING_TYPE;
          case 2: // VEC_TAGS
            return VEC_TAGS;
          case 3: // MP_CONDITION
            return MP_CONDITION;
          case 4: // STRING_QY_CONDITION
            return STRING_QY_CONDITION;
          case 5: // STRING_ACCESS
            return STRING_ACCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRING_TYPE, new org.apache.thrift.meta_data.FieldMetaData("stringType", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VEC_TAGS, new org.apache.thrift.meta_data.FieldMetaData("vecTags", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.MP_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("mpCondition", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.STRING_QY_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("stringQyCondition", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STRING_ACCESS, new org.apache.thrift.meta_data.FieldMetaData("stringAccess", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DMI_FilterParam_args.class, metaDataMap);
    }

    public DMI_FilterParam_args() {
    }

    public DMI_FilterParam_args(
      String stringType,
      List<String> vecTags,
      Map<String,List<String>> mpCondition,
      String stringQyCondition,
      String stringAccess)
    {
      this();
      this.stringType = stringType;
      this.vecTags = vecTags;
      this.mpCondition = mpCondition;
      this.stringQyCondition = stringQyCondition;
      this.stringAccess = stringAccess;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DMI_FilterParam_args(DMI_FilterParam_args other) {
      if (other.isSetStringType()) {
        this.stringType = other.stringType;
      }
      if (other.isSetVecTags()) {
        List<String> __this__vecTags = new ArrayList<String>(other.vecTags);
        this.vecTags = __this__vecTags;
      }
      if (other.isSetMpCondition()) {
        Map<String,List<String>> __this__mpCondition = new HashMap<String,List<String>>(other.mpCondition.size());
        for (Map.Entry<String, List<String>> other_element : other.mpCondition.entrySet()) {

          String other_element_key = other_element.getKey();
          List<String> other_element_value = other_element.getValue();

          String __this__mpCondition_copy_key = other_element_key;

          List<String> __this__mpCondition_copy_value = new ArrayList<String>(other_element_value);

          __this__mpCondition.put(__this__mpCondition_copy_key, __this__mpCondition_copy_value);
        }
        this.mpCondition = __this__mpCondition;
      }
      if (other.isSetStringQyCondition()) {
        this.stringQyCondition = other.stringQyCondition;
      }
      if (other.isSetStringAccess()) {
        this.stringAccess = other.stringAccess;
      }
    }

    public DMI_FilterParam_args deepCopy() {
      return new DMI_FilterParam_args(this);
    }

    @Override
    public void clear() {
      this.stringType = null;
      this.vecTags = null;
      this.mpCondition = null;
      this.stringQyCondition = null;
      this.stringAccess = null;
    }

    public String getStringType() {
      return this.stringType;
    }

    public DMI_FilterParam_args setStringType(String stringType) {
      this.stringType = stringType;
      return this;
    }

    public void unsetStringType() {
      this.stringType = null;
    }

    /** Returns true if field stringType is set (has been assigned a value) and false otherwise */
    public boolean isSetStringType() {
      return this.stringType != null;
    }

    public void setStringTypeIsSet(boolean value) {
      if (!value) {
        this.stringType = null;
      }
    }

    public int getVecTagsSize() {
      return (this.vecTags == null) ? 0 : this.vecTags.size();
    }

    public Iterator<String> getVecTagsIterator() {
      return (this.vecTags == null) ? null : this.vecTags.iterator();
    }

    public void addToVecTags(String elem) {
      if (this.vecTags == null) {
        this.vecTags = new ArrayList<String>();
      }
      this.vecTags.add(elem);
    }

    public List<String> getVecTags() {
      return this.vecTags;
    }

    public DMI_FilterParam_args setVecTags(List<String> vecTags) {
      this.vecTags = vecTags;
      return this;
    }

    public void unsetVecTags() {
      this.vecTags = null;
    }

    /** Returns true if field vecTags is set (has been assigned a value) and false otherwise */
    public boolean isSetVecTags() {
      return this.vecTags != null;
    }

    public void setVecTagsIsSet(boolean value) {
      if (!value) {
        this.vecTags = null;
      }
    }

    public int getMpConditionSize() {
      return (this.mpCondition == null) ? 0 : this.mpCondition.size();
    }

    public void putToMpCondition(String key, List<String> val) {
      if (this.mpCondition == null) {
        this.mpCondition = new HashMap<String,List<String>>();
      }
      this.mpCondition.put(key, val);
    }

    public Map<String,List<String>> getMpCondition() {
      return this.mpCondition;
    }

    public DMI_FilterParam_args setMpCondition(Map<String,List<String>> mpCondition) {
      this.mpCondition = mpCondition;
      return this;
    }

    public void unsetMpCondition() {
      this.mpCondition = null;
    }

    /** Returns true if field mpCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetMpCondition() {
      return this.mpCondition != null;
    }

    public void setMpConditionIsSet(boolean value) {
      if (!value) {
        this.mpCondition = null;
      }
    }

    public String getStringQyCondition() {
      return this.stringQyCondition;
    }

    public DMI_FilterParam_args setStringQyCondition(String stringQyCondition) {
      this.stringQyCondition = stringQyCondition;
      return this;
    }

    public void unsetStringQyCondition() {
      this.stringQyCondition = null;
    }

    /** Returns true if field stringQyCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetStringQyCondition() {
      return this.stringQyCondition != null;
    }

    public void setStringQyConditionIsSet(boolean value) {
      if (!value) {
        this.stringQyCondition = null;
      }
    }

    public String getStringAccess() {
      return this.stringAccess;
    }

    public DMI_FilterParam_args setStringAccess(String stringAccess) {
      this.stringAccess = stringAccess;
      return this;
    }

    public void unsetStringAccess() {
      this.stringAccess = null;
    }

    /** Returns true if field stringAccess is set (has been assigned a value) and false otherwise */
    public boolean isSetStringAccess() {
      return this.stringAccess != null;
    }

    public void setStringAccessIsSet(boolean value) {
      if (!value) {
        this.stringAccess = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRING_TYPE:
        if (value == null) {
          unsetStringType();
        } else {
          setStringType((String)value);
        }
        break;

      case VEC_TAGS:
        if (value == null) {
          unsetVecTags();
        } else {
          setVecTags((List<String>)value);
        }
        break;

      case MP_CONDITION:
        if (value == null) {
          unsetMpCondition();
        } else {
          setMpCondition((Map<String,List<String>>)value);
        }
        break;

      case STRING_QY_CONDITION:
        if (value == null) {
          unsetStringQyCondition();
        } else {
          setStringQyCondition((String)value);
        }
        break;

      case STRING_ACCESS:
        if (value == null) {
          unsetStringAccess();
        } else {
          setStringAccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRING_TYPE:
        return getStringType();

      case VEC_TAGS:
        return getVecTags();

      case MP_CONDITION:
        return getMpCondition();

      case STRING_QY_CONDITION:
        return getStringQyCondition();

      case STRING_ACCESS:
        return getStringAccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRING_TYPE:
        return isSetStringType();
      case VEC_TAGS:
        return isSetVecTags();
      case MP_CONDITION:
        return isSetMpCondition();
      case STRING_QY_CONDITION:
        return isSetStringQyCondition();
      case STRING_ACCESS:
        return isSetStringAccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DMI_FilterParam_args)
        return this.equals((DMI_FilterParam_args)that);
      return false;
    }

    public boolean equals(DMI_FilterParam_args that) {
      if (that == null)
        return false;

      boolean this_present_stringType = true && this.isSetStringType();
      boolean that_present_stringType = true && that.isSetStringType();
      if (this_present_stringType || that_present_stringType) {
        if (!(this_present_stringType && that_present_stringType))
          return false;
        if (!this.stringType.equals(that.stringType))
          return false;
      }

      boolean this_present_vecTags = true && this.isSetVecTags();
      boolean that_present_vecTags = true && that.isSetVecTags();
      if (this_present_vecTags || that_present_vecTags) {
        if (!(this_present_vecTags && that_present_vecTags))
          return false;
        if (!this.vecTags.equals(that.vecTags))
          return false;
      }

      boolean this_present_mpCondition = true && this.isSetMpCondition();
      boolean that_present_mpCondition = true && that.isSetMpCondition();
      if (this_present_mpCondition || that_present_mpCondition) {
        if (!(this_present_mpCondition && that_present_mpCondition))
          return false;
        if (!this.mpCondition.equals(that.mpCondition))
          return false;
      }

      boolean this_present_stringQyCondition = true && this.isSetStringQyCondition();
      boolean that_present_stringQyCondition = true && that.isSetStringQyCondition();
      if (this_present_stringQyCondition || that_present_stringQyCondition) {
        if (!(this_present_stringQyCondition && that_present_stringQyCondition))
          return false;
        if (!this.stringQyCondition.equals(that.stringQyCondition))
          return false;
      }

      boolean this_present_stringAccess = true && this.isSetStringAccess();
      boolean that_present_stringAccess = true && that.isSetStringAccess();
      if (this_present_stringAccess || that_present_stringAccess) {
        if (!(this_present_stringAccess && that_present_stringAccess))
          return false;
        if (!this.stringAccess.equals(that.stringAccess))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stringType = true && (isSetStringType());
      list.add(present_stringType);
      if (present_stringType)
        list.add(stringType);

      boolean present_vecTags = true && (isSetVecTags());
      list.add(present_vecTags);
      if (present_vecTags)
        list.add(vecTags);

      boolean present_mpCondition = true && (isSetMpCondition());
      list.add(present_mpCondition);
      if (present_mpCondition)
        list.add(mpCondition);

      boolean present_stringQyCondition = true && (isSetStringQyCondition());
      list.add(present_stringQyCondition);
      if (present_stringQyCondition)
        list.add(stringQyCondition);

      boolean present_stringAccess = true && (isSetStringAccess());
      list.add(present_stringAccess);
      if (present_stringAccess)
        list.add(stringAccess);

      return list.hashCode();
    }

    @Override
    public int compareTo(DMI_FilterParam_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStringType()).compareTo(other.isSetStringType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringType, other.stringType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVecTags()).compareTo(other.isSetVecTags());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVecTags()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vecTags, other.vecTags);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMpCondition()).compareTo(other.isSetMpCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMpCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mpCondition, other.mpCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStringQyCondition()).compareTo(other.isSetStringQyCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringQyCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringQyCondition, other.stringQyCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStringAccess()).compareTo(other.isSetStringAccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringAccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringAccess, other.stringAccess);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DMI_FilterParam_args(");
      boolean first = true;

      sb.append("stringType:");
      if (this.stringType == null) {
        sb.append("null");
      } else {
        sb.append(this.stringType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vecTags:");
      if (this.vecTags == null) {
        sb.append("null");
      } else {
        sb.append(this.vecTags);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mpCondition:");
      if (this.mpCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.mpCondition);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stringQyCondition:");
      if (this.stringQyCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.stringQyCondition);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stringAccess:");
      if (this.stringAccess == null) {
        sb.append("null");
      } else {
        sb.append(this.stringAccess);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DMI_FilterParam_argsStandardSchemeFactory implements SchemeFactory {
      public DMI_FilterParam_argsStandardScheme getScheme() {
        return new DMI_FilterParam_argsStandardScheme();
      }
    }

    private static class DMI_FilterParam_argsStandardScheme extends StandardScheme<DMI_FilterParam_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DMI_FilterParam_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // STRING_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringType = iprot.readString();
                struct.setStringTypeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VEC_TAGS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.vecTags = new ArrayList<String>(_list16.size);
                  String _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = iprot.readString();
                    struct.vecTags.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setVecTagsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MP_CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map19 = iprot.readMapBegin();
                  struct.mpCondition = new HashMap<String,List<String>>(2*_map19.size);
                  String _key20;
                  List<String> _val21;
                  for (int _i22 = 0; _i22 < _map19.size; ++_i22)
                  {
                    _key20 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list23 = iprot.readListBegin();
                      _val21 = new ArrayList<String>(_list23.size);
                      String _elem24;
                      for (int _i25 = 0; _i25 < _list23.size; ++_i25)
                      {
                        _elem24 = iprot.readString();
                        _val21.add(_elem24);
                      }
                      iprot.readListEnd();
                    }
                    struct.mpCondition.put(_key20, _val21);
                  }
                  iprot.readMapEnd();
                }
                struct.setMpConditionIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // STRING_QY_CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringQyCondition = iprot.readString();
                struct.setStringQyConditionIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // STRING_ACCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringAccess = iprot.readString();
                struct.setStringAccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DMI_FilterParam_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stringType != null) {
          oprot.writeFieldBegin(STRING_TYPE_FIELD_DESC);
          oprot.writeString(struct.stringType);
          oprot.writeFieldEnd();
        }
        if (struct.vecTags != null) {
          oprot.writeFieldBegin(VEC_TAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.vecTags.size()));
            for (String _iter26 : struct.vecTags)
            {
              oprot.writeString(_iter26);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.mpCondition != null) {
          oprot.writeFieldBegin(MP_CONDITION_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.mpCondition.size()));
            for (Map.Entry<String, List<String>> _iter27 : struct.mpCondition.entrySet())
            {
              oprot.writeString(_iter27.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter27.getValue().size()));
                for (String _iter28 : _iter27.getValue())
                {
                  oprot.writeString(_iter28);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.stringQyCondition != null) {
          oprot.writeFieldBegin(STRING_QY_CONDITION_FIELD_DESC);
          oprot.writeString(struct.stringQyCondition);
          oprot.writeFieldEnd();
        }
        if (struct.stringAccess != null) {
          oprot.writeFieldBegin(STRING_ACCESS_FIELD_DESC);
          oprot.writeString(struct.stringAccess);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DMI_FilterParam_argsTupleSchemeFactory implements SchemeFactory {
      public DMI_FilterParam_argsTupleScheme getScheme() {
        return new DMI_FilterParam_argsTupleScheme();
      }
    }

    private static class DMI_FilterParam_argsTupleScheme extends TupleScheme<DMI_FilterParam_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DMI_FilterParam_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStringType()) {
          optionals.set(0);
        }
        if (struct.isSetVecTags()) {
          optionals.set(1);
        }
        if (struct.isSetMpCondition()) {
          optionals.set(2);
        }
        if (struct.isSetStringQyCondition()) {
          optionals.set(3);
        }
        if (struct.isSetStringAccess()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetStringType()) {
          oprot.writeString(struct.stringType);
        }
        if (struct.isSetVecTags()) {
          {
            oprot.writeI32(struct.vecTags.size());
            for (String _iter29 : struct.vecTags)
            {
              oprot.writeString(_iter29);
            }
          }
        }
        if (struct.isSetMpCondition()) {
          {
            oprot.writeI32(struct.mpCondition.size());
            for (Map.Entry<String, List<String>> _iter30 : struct.mpCondition.entrySet())
            {
              oprot.writeString(_iter30.getKey());
              {
                oprot.writeI32(_iter30.getValue().size());
                for (String _iter31 : _iter30.getValue())
                {
                  oprot.writeString(_iter31);
                }
              }
            }
          }
        }
        if (struct.isSetStringQyCondition()) {
          oprot.writeString(struct.stringQyCondition);
        }
        if (struct.isSetStringAccess()) {
          oprot.writeString(struct.stringAccess);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DMI_FilterParam_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.stringType = iprot.readString();
          struct.setStringTypeIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list32 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.vecTags = new ArrayList<String>(_list32.size);
            String _elem33;
            for (int _i34 = 0; _i34 < _list32.size; ++_i34)
            {
              _elem33 = iprot.readString();
              struct.vecTags.add(_elem33);
            }
          }
          struct.setVecTagsIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map35 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.mpCondition = new HashMap<String,List<String>>(2*_map35.size);
            String _key36;
            List<String> _val37;
            for (int _i38 = 0; _i38 < _map35.size; ++_i38)
            {
              _key36 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _val37 = new ArrayList<String>(_list39.size);
                String _elem40;
                for (int _i41 = 0; _i41 < _list39.size; ++_i41)
                {
                  _elem40 = iprot.readString();
                  _val37.add(_elem40);
                }
              }
              struct.mpCondition.put(_key36, _val37);
            }
          }
          struct.setMpConditionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.stringQyCondition = iprot.readString();
          struct.setStringQyConditionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.stringAccess = iprot.readString();
          struct.setStringAccessIsSet(true);
        }
      }
    }

  }

  public static class DMI_FilterParam_result implements org.apache.thrift.TBase<DMI_FilterParam_result, DMI_FilterParam_result._Fields>, java.io.Serializable, Cloneable, Comparable<DMI_FilterParam_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DMI_FilterParam_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DMI_FilterParam_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DMI_FilterParam_resultTupleSchemeFactory());
    }

    public Map<Integer,Map<String,String>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32),
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DMI_FilterParam_result.class, metaDataMap);
    }

    public DMI_FilterParam_result() {
    }

    public DMI_FilterParam_result(
      Map<Integer,Map<String,String>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DMI_FilterParam_result(DMI_FilterParam_result other) {
      if (other.isSetSuccess()) {
        Map<Integer,Map<String,String>> __this__success = new HashMap<Integer,Map<String,String>>(other.success.size());
        for (Map.Entry<Integer, Map<String,String>> other_element : other.success.entrySet()) {

          Integer other_element_key = other_element.getKey();
          Map<String,String> other_element_value = other_element.getValue();

          Integer __this__success_copy_key = other_element_key;

          Map<String,String> __this__success_copy_value = new HashMap<String,String>(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public DMI_FilterParam_result deepCopy() {
      return new DMI_FilterParam_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(int key, Map<String,String> val) {
      if (this.success == null) {
        this.success = new HashMap<Integer,Map<String,String>>();
      }
      this.success.put(key, val);
    }

    public Map<Integer,Map<String,String>> getSuccess() {
      return this.success;
    }

    public DMI_FilterParam_result setSuccess(Map<Integer,Map<String,String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Integer,Map<String,String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DMI_FilterParam_result)
        return this.equals((DMI_FilterParam_result)that);
      return false;
    }

    public boolean equals(DMI_FilterParam_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(DMI_FilterParam_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DMI_FilterParam_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DMI_FilterParam_resultStandardSchemeFactory implements SchemeFactory {
      public DMI_FilterParam_resultStandardScheme getScheme() {
        return new DMI_FilterParam_resultStandardScheme();
      }
    }

    private static class DMI_FilterParam_resultStandardScheme extends StandardScheme<DMI_FilterParam_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DMI_FilterParam_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map42 = iprot.readMapBegin();
                  struct.success = new HashMap<Integer,Map<String,String>>(2*_map42.size);
                  int _key43;
                  Map<String,String> _val44;
                  for (int _i45 = 0; _i45 < _map42.size; ++_i45)
                  {
                    _key43 = iprot.readI32();
                    {
                      org.apache.thrift.protocol.TMap _map46 = iprot.readMapBegin();
                      _val44 = new HashMap<String,String>(2*_map46.size);
                      String _key47;
                      String _val48;
                      for (int _i49 = 0; _i49 < _map46.size; ++_i49)
                      {
                        _key47 = iprot.readString();
                        _val48 = iprot.readString();
                        _val44.put(_key47, _val48);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.put(_key43, _val44);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DMI_FilterParam_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map.Entry<Integer, Map<String,String>> _iter50 : struct.success.entrySet())
            {
              oprot.writeI32(_iter50.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter50.getValue().size()));
                for (Map.Entry<String, String> _iter51 : _iter50.getValue().entrySet())
                {
                  oprot.writeString(_iter51.getKey());
                  oprot.writeString(_iter51.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DMI_FilterParam_resultTupleSchemeFactory implements SchemeFactory {
      public DMI_FilterParam_resultTupleScheme getScheme() {
        return new DMI_FilterParam_resultTupleScheme();
      }
    }

    private static class DMI_FilterParam_resultTupleScheme extends TupleScheme<DMI_FilterParam_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DMI_FilterParam_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Integer, Map<String,String>> _iter52 : struct.success.entrySet())
            {
              oprot.writeI32(_iter52.getKey());
              {
                oprot.writeI32(_iter52.getValue().size());
                for (Map.Entry<String, String> _iter53 : _iter52.getValue().entrySet())
                {
                  oprot.writeString(_iter53.getKey());
                  oprot.writeString(_iter53.getValue());
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DMI_FilterParam_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map54 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new HashMap<Integer,Map<String,String>>(2*_map54.size);
            int _key55;
            Map<String,String> _val56;
            for (int _i57 = 0; _i57 < _map54.size; ++_i57)
            {
              _key55 = iprot.readI32();
              {
                org.apache.thrift.protocol.TMap _map58 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _val56 = new HashMap<String,String>(2*_map58.size);
                String _key59;
                String _val60;
                for (int _i61 = 0; _i61 < _map58.size; ++_i61)
                {
                  _key59 = iprot.readString();
                  _val60 = iprot.readString();
                  _val56.put(_key59, _val60);
                }
              }
              struct.success.put(_key55, _val56);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class DMI_FilterParam2_args implements org.apache.thrift.TBase<DMI_FilterParam2_args, DMI_FilterParam2_args._Fields>, java.io.Serializable, Cloneable, Comparable<DMI_FilterParam2_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DMI_FilterParam2_args");

    private static final org.apache.thrift.protocol.TField STRING_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("stringType", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VEC_TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("vecTags", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField MP_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("mpCondition", org.apache.thrift.protocol.TType.MAP, (short)3);
    private static final org.apache.thrift.protocol.TField STRING_QY_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("stringQyCondition", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField STRING_ACCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("stringAccess", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField STRING_KEY_MACRO_FIELD_DESC = new org.apache.thrift.protocol.TField("stringKeyMacro", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DMI_FilterParam2_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DMI_FilterParam2_argsTupleSchemeFactory());
    }

    public String stringType; // required
    public List<String> vecTags; // required
    public Map<String,List<String>> mpCondition; // required
    public String stringQyCondition; // required
    public String stringAccess; // required
    public String stringKeyMacro; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRING_TYPE((short)1, "stringType"),
      VEC_TAGS((short)2, "vecTags"),
      MP_CONDITION((short)3, "mpCondition"),
      STRING_QY_CONDITION((short)4, "stringQyCondition"),
      STRING_ACCESS((short)5, "stringAccess"),
      STRING_KEY_MACRO((short)6, "stringKeyMacro");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRING_TYPE
            return STRING_TYPE;
          case 2: // VEC_TAGS
            return VEC_TAGS;
          case 3: // MP_CONDITION
            return MP_CONDITION;
          case 4: // STRING_QY_CONDITION
            return STRING_QY_CONDITION;
          case 5: // STRING_ACCESS
            return STRING_ACCESS;
          case 6: // STRING_KEY_MACRO
            return STRING_KEY_MACRO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRING_TYPE, new org.apache.thrift.meta_data.FieldMetaData("stringType", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VEC_TAGS, new org.apache.thrift.meta_data.FieldMetaData("vecTags", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.MP_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("mpCondition", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.STRING_QY_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("stringQyCondition", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STRING_ACCESS, new org.apache.thrift.meta_data.FieldMetaData("stringAccess", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STRING_KEY_MACRO, new org.apache.thrift.meta_data.FieldMetaData("stringKeyMacro", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DMI_FilterParam2_args.class, metaDataMap);
    }

    public DMI_FilterParam2_args() {
    }

    public DMI_FilterParam2_args(
      String stringType,
      List<String> vecTags,
      Map<String,List<String>> mpCondition,
      String stringQyCondition,
      String stringAccess,
      String stringKeyMacro)
    {
      this();
      this.stringType = stringType;
      this.vecTags = vecTags;
      this.mpCondition = mpCondition;
      this.stringQyCondition = stringQyCondition;
      this.stringAccess = stringAccess;
      this.stringKeyMacro = stringKeyMacro;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DMI_FilterParam2_args(DMI_FilterParam2_args other) {
      if (other.isSetStringType()) {
        this.stringType = other.stringType;
      }
      if (other.isSetVecTags()) {
        List<String> __this__vecTags = new ArrayList<String>(other.vecTags);
        this.vecTags = __this__vecTags;
      }
      if (other.isSetMpCondition()) {
        Map<String,List<String>> __this__mpCondition = new HashMap<String,List<String>>(other.mpCondition.size());
        for (Map.Entry<String, List<String>> other_element : other.mpCondition.entrySet()) {

          String other_element_key = other_element.getKey();
          List<String> other_element_value = other_element.getValue();

          String __this__mpCondition_copy_key = other_element_key;

          List<String> __this__mpCondition_copy_value = new ArrayList<String>(other_element_value);

          __this__mpCondition.put(__this__mpCondition_copy_key, __this__mpCondition_copy_value);
        }
        this.mpCondition = __this__mpCondition;
      }
      if (other.isSetStringQyCondition()) {
        this.stringQyCondition = other.stringQyCondition;
      }
      if (other.isSetStringAccess()) {
        this.stringAccess = other.stringAccess;
      }
      if (other.isSetStringKeyMacro()) {
        this.stringKeyMacro = other.stringKeyMacro;
      }
    }

    public DMI_FilterParam2_args deepCopy() {
      return new DMI_FilterParam2_args(this);
    }

    @Override
    public void clear() {
      this.stringType = null;
      this.vecTags = null;
      this.mpCondition = null;
      this.stringQyCondition = null;
      this.stringAccess = null;
      this.stringKeyMacro = null;
    }

    public String getStringType() {
      return this.stringType;
    }

    public DMI_FilterParam2_args setStringType(String stringType) {
      this.stringType = stringType;
      return this;
    }

    public void unsetStringType() {
      this.stringType = null;
    }

    /** Returns true if field stringType is set (has been assigned a value) and false otherwise */
    public boolean isSetStringType() {
      return this.stringType != null;
    }

    public void setStringTypeIsSet(boolean value) {
      if (!value) {
        this.stringType = null;
      }
    }

    public int getVecTagsSize() {
      return (this.vecTags == null) ? 0 : this.vecTags.size();
    }

    public Iterator<String> getVecTagsIterator() {
      return (this.vecTags == null) ? null : this.vecTags.iterator();
    }

    public void addToVecTags(String elem) {
      if (this.vecTags == null) {
        this.vecTags = new ArrayList<String>();
      }
      this.vecTags.add(elem);
    }

    public List<String> getVecTags() {
      return this.vecTags;
    }

    public DMI_FilterParam2_args setVecTags(List<String> vecTags) {
      this.vecTags = vecTags;
      return this;
    }

    public void unsetVecTags() {
      this.vecTags = null;
    }

    /** Returns true if field vecTags is set (has been assigned a value) and false otherwise */
    public boolean isSetVecTags() {
      return this.vecTags != null;
    }

    public void setVecTagsIsSet(boolean value) {
      if (!value) {
        this.vecTags = null;
      }
    }

    public int getMpConditionSize() {
      return (this.mpCondition == null) ? 0 : this.mpCondition.size();
    }

    public void putToMpCondition(String key, List<String> val) {
      if (this.mpCondition == null) {
        this.mpCondition = new HashMap<String,List<String>>();
      }
      this.mpCondition.put(key, val);
    }

    public Map<String,List<String>> getMpCondition() {
      return this.mpCondition;
    }

    public DMI_FilterParam2_args setMpCondition(Map<String,List<String>> mpCondition) {
      this.mpCondition = mpCondition;
      return this;
    }

    public void unsetMpCondition() {
      this.mpCondition = null;
    }

    /** Returns true if field mpCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetMpCondition() {
      return this.mpCondition != null;
    }

    public void setMpConditionIsSet(boolean value) {
      if (!value) {
        this.mpCondition = null;
      }
    }

    public String getStringQyCondition() {
      return this.stringQyCondition;
    }

    public DMI_FilterParam2_args setStringQyCondition(String stringQyCondition) {
      this.stringQyCondition = stringQyCondition;
      return this;
    }

    public void unsetStringQyCondition() {
      this.stringQyCondition = null;
    }

    /** Returns true if field stringQyCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetStringQyCondition() {
      return this.stringQyCondition != null;
    }

    public void setStringQyConditionIsSet(boolean value) {
      if (!value) {
        this.stringQyCondition = null;
      }
    }

    public String getStringAccess() {
      return this.stringAccess;
    }

    public DMI_FilterParam2_args setStringAccess(String stringAccess) {
      this.stringAccess = stringAccess;
      return this;
    }

    public void unsetStringAccess() {
      this.stringAccess = null;
    }

    /** Returns true if field stringAccess is set (has been assigned a value) and false otherwise */
    public boolean isSetStringAccess() {
      return this.stringAccess != null;
    }

    public void setStringAccessIsSet(boolean value) {
      if (!value) {
        this.stringAccess = null;
      }
    }

    public String getStringKeyMacro() {
      return this.stringKeyMacro;
    }

    public DMI_FilterParam2_args setStringKeyMacro(String stringKeyMacro) {
      this.stringKeyMacro = stringKeyMacro;
      return this;
    }

    public void unsetStringKeyMacro() {
      this.stringKeyMacro = null;
    }

    /** Returns true if field stringKeyMacro is set (has been assigned a value) and false otherwise */
    public boolean isSetStringKeyMacro() {
      return this.stringKeyMacro != null;
    }

    public void setStringKeyMacroIsSet(boolean value) {
      if (!value) {
        this.stringKeyMacro = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRING_TYPE:
        if (value == null) {
          unsetStringType();
        } else {
          setStringType((String)value);
        }
        break;

      case VEC_TAGS:
        if (value == null) {
          unsetVecTags();
        } else {
          setVecTags((List<String>)value);
        }
        break;

      case MP_CONDITION:
        if (value == null) {
          unsetMpCondition();
        } else {
          setMpCondition((Map<String,List<String>>)value);
        }
        break;

      case STRING_QY_CONDITION:
        if (value == null) {
          unsetStringQyCondition();
        } else {
          setStringQyCondition((String)value);
        }
        break;

      case STRING_ACCESS:
        if (value == null) {
          unsetStringAccess();
        } else {
          setStringAccess((String)value);
        }
        break;

      case STRING_KEY_MACRO:
        if (value == null) {
          unsetStringKeyMacro();
        } else {
          setStringKeyMacro((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRING_TYPE:
        return getStringType();

      case VEC_TAGS:
        return getVecTags();

      case MP_CONDITION:
        return getMpCondition();

      case STRING_QY_CONDITION:
        return getStringQyCondition();

      case STRING_ACCESS:
        return getStringAccess();

      case STRING_KEY_MACRO:
        return getStringKeyMacro();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRING_TYPE:
        return isSetStringType();
      case VEC_TAGS:
        return isSetVecTags();
      case MP_CONDITION:
        return isSetMpCondition();
      case STRING_QY_CONDITION:
        return isSetStringQyCondition();
      case STRING_ACCESS:
        return isSetStringAccess();
      case STRING_KEY_MACRO:
        return isSetStringKeyMacro();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DMI_FilterParam2_args)
        return this.equals((DMI_FilterParam2_args)that);
      return false;
    }

    public boolean equals(DMI_FilterParam2_args that) {
      if (that == null)
        return false;

      boolean this_present_stringType = true && this.isSetStringType();
      boolean that_present_stringType = true && that.isSetStringType();
      if (this_present_stringType || that_present_stringType) {
        if (!(this_present_stringType && that_present_stringType))
          return false;
        if (!this.stringType.equals(that.stringType))
          return false;
      }

      boolean this_present_vecTags = true && this.isSetVecTags();
      boolean that_present_vecTags = true && that.isSetVecTags();
      if (this_present_vecTags || that_present_vecTags) {
        if (!(this_present_vecTags && that_present_vecTags))
          return false;
        if (!this.vecTags.equals(that.vecTags))
          return false;
      }

      boolean this_present_mpCondition = true && this.isSetMpCondition();
      boolean that_present_mpCondition = true && that.isSetMpCondition();
      if (this_present_mpCondition || that_present_mpCondition) {
        if (!(this_present_mpCondition && that_present_mpCondition))
          return false;
        if (!this.mpCondition.equals(that.mpCondition))
          return false;
      }

      boolean this_present_stringQyCondition = true && this.isSetStringQyCondition();
      boolean that_present_stringQyCondition = true && that.isSetStringQyCondition();
      if (this_present_stringQyCondition || that_present_stringQyCondition) {
        if (!(this_present_stringQyCondition && that_present_stringQyCondition))
          return false;
        if (!this.stringQyCondition.equals(that.stringQyCondition))
          return false;
      }

      boolean this_present_stringAccess = true && this.isSetStringAccess();
      boolean that_present_stringAccess = true && that.isSetStringAccess();
      if (this_present_stringAccess || that_present_stringAccess) {
        if (!(this_present_stringAccess && that_present_stringAccess))
          return false;
        if (!this.stringAccess.equals(that.stringAccess))
          return false;
      }

      boolean this_present_stringKeyMacro = true && this.isSetStringKeyMacro();
      boolean that_present_stringKeyMacro = true && that.isSetStringKeyMacro();
      if (this_present_stringKeyMacro || that_present_stringKeyMacro) {
        if (!(this_present_stringKeyMacro && that_present_stringKeyMacro))
          return false;
        if (!this.stringKeyMacro.equals(that.stringKeyMacro))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stringType = true && (isSetStringType());
      list.add(present_stringType);
      if (present_stringType)
        list.add(stringType);

      boolean present_vecTags = true && (isSetVecTags());
      list.add(present_vecTags);
      if (present_vecTags)
        list.add(vecTags);

      boolean present_mpCondition = true && (isSetMpCondition());
      list.add(present_mpCondition);
      if (present_mpCondition)
        list.add(mpCondition);

      boolean present_stringQyCondition = true && (isSetStringQyCondition());
      list.add(present_stringQyCondition);
      if (present_stringQyCondition)
        list.add(stringQyCondition);

      boolean present_stringAccess = true && (isSetStringAccess());
      list.add(present_stringAccess);
      if (present_stringAccess)
        list.add(stringAccess);

      boolean present_stringKeyMacro = true && (isSetStringKeyMacro());
      list.add(present_stringKeyMacro);
      if (present_stringKeyMacro)
        list.add(stringKeyMacro);

      return list.hashCode();
    }

    @Override
    public int compareTo(DMI_FilterParam2_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStringType()).compareTo(other.isSetStringType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringType, other.stringType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVecTags()).compareTo(other.isSetVecTags());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVecTags()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vecTags, other.vecTags);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMpCondition()).compareTo(other.isSetMpCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMpCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mpCondition, other.mpCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStringQyCondition()).compareTo(other.isSetStringQyCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringQyCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringQyCondition, other.stringQyCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStringAccess()).compareTo(other.isSetStringAccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringAccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringAccess, other.stringAccess);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStringKeyMacro()).compareTo(other.isSetStringKeyMacro());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringKeyMacro()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringKeyMacro, other.stringKeyMacro);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DMI_FilterParam2_args(");
      boolean first = true;

      sb.append("stringType:");
      if (this.stringType == null) {
        sb.append("null");
      } else {
        sb.append(this.stringType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vecTags:");
      if (this.vecTags == null) {
        sb.append("null");
      } else {
        sb.append(this.vecTags);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mpCondition:");
      if (this.mpCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.mpCondition);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stringQyCondition:");
      if (this.stringQyCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.stringQyCondition);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stringAccess:");
      if (this.stringAccess == null) {
        sb.append("null");
      } else {
        sb.append(this.stringAccess);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stringKeyMacro:");
      if (this.stringKeyMacro == null) {
        sb.append("null");
      } else {
        sb.append(this.stringKeyMacro);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DMI_FilterParam2_argsStandardSchemeFactory implements SchemeFactory {
      public DMI_FilterParam2_argsStandardScheme getScheme() {
        return new DMI_FilterParam2_argsStandardScheme();
      }
    }

    private static class DMI_FilterParam2_argsStandardScheme extends StandardScheme<DMI_FilterParam2_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DMI_FilterParam2_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // STRING_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringType = iprot.readString();
                struct.setStringTypeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VEC_TAGS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list62 = iprot.readListBegin();
                  struct.vecTags = new ArrayList<String>(_list62.size);
                  String _elem63;
                  for (int _i64 = 0; _i64 < _list62.size; ++_i64)
                  {
                    _elem63 = iprot.readString();
                    struct.vecTags.add(_elem63);
                  }
                  iprot.readListEnd();
                }
                struct.setVecTagsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MP_CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map65 = iprot.readMapBegin();
                  struct.mpCondition = new HashMap<String,List<String>>(2*_map65.size);
                  String _key66;
                  List<String> _val67;
                  for (int _i68 = 0; _i68 < _map65.size; ++_i68)
                  {
                    _key66 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list69 = iprot.readListBegin();
                      _val67 = new ArrayList<String>(_list69.size);
                      String _elem70;
                      for (int _i71 = 0; _i71 < _list69.size; ++_i71)
                      {
                        _elem70 = iprot.readString();
                        _val67.add(_elem70);
                      }
                      iprot.readListEnd();
                    }
                    struct.mpCondition.put(_key66, _val67);
                  }
                  iprot.readMapEnd();
                }
                struct.setMpConditionIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // STRING_QY_CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringQyCondition = iprot.readString();
                struct.setStringQyConditionIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // STRING_ACCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringAccess = iprot.readString();
                struct.setStringAccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // STRING_KEY_MACRO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringKeyMacro = iprot.readString();
                struct.setStringKeyMacroIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DMI_FilterParam2_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stringType != null) {
          oprot.writeFieldBegin(STRING_TYPE_FIELD_DESC);
          oprot.writeString(struct.stringType);
          oprot.writeFieldEnd();
        }
        if (struct.vecTags != null) {
          oprot.writeFieldBegin(VEC_TAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.vecTags.size()));
            for (String _iter72 : struct.vecTags)
            {
              oprot.writeString(_iter72);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.mpCondition != null) {
          oprot.writeFieldBegin(MP_CONDITION_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.mpCondition.size()));
            for (Map.Entry<String, List<String>> _iter73 : struct.mpCondition.entrySet())
            {
              oprot.writeString(_iter73.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter73.getValue().size()));
                for (String _iter74 : _iter73.getValue())
                {
                  oprot.writeString(_iter74);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.stringQyCondition != null) {
          oprot.writeFieldBegin(STRING_QY_CONDITION_FIELD_DESC);
          oprot.writeString(struct.stringQyCondition);
          oprot.writeFieldEnd();
        }
        if (struct.stringAccess != null) {
          oprot.writeFieldBegin(STRING_ACCESS_FIELD_DESC);
          oprot.writeString(struct.stringAccess);
          oprot.writeFieldEnd();
        }
        if (struct.stringKeyMacro != null) {
          oprot.writeFieldBegin(STRING_KEY_MACRO_FIELD_DESC);
          oprot.writeString(struct.stringKeyMacro);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DMI_FilterParam2_argsTupleSchemeFactory implements SchemeFactory {
      public DMI_FilterParam2_argsTupleScheme getScheme() {
        return new DMI_FilterParam2_argsTupleScheme();
      }
    }

    private static class DMI_FilterParam2_argsTupleScheme extends TupleScheme<DMI_FilterParam2_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DMI_FilterParam2_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStringType()) {
          optionals.set(0);
        }
        if (struct.isSetVecTags()) {
          optionals.set(1);
        }
        if (struct.isSetMpCondition()) {
          optionals.set(2);
        }
        if (struct.isSetStringQyCondition()) {
          optionals.set(3);
        }
        if (struct.isSetStringAccess()) {
          optionals.set(4);
        }
        if (struct.isSetStringKeyMacro()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetStringType()) {
          oprot.writeString(struct.stringType);
        }
        if (struct.isSetVecTags()) {
          {
            oprot.writeI32(struct.vecTags.size());
            for (String _iter75 : struct.vecTags)
            {
              oprot.writeString(_iter75);
            }
          }
        }
        if (struct.isSetMpCondition()) {
          {
            oprot.writeI32(struct.mpCondition.size());
            for (Map.Entry<String, List<String>> _iter76 : struct.mpCondition.entrySet())
            {
              oprot.writeString(_iter76.getKey());
              {
                oprot.writeI32(_iter76.getValue().size());
                for (String _iter77 : _iter76.getValue())
                {
                  oprot.writeString(_iter77);
                }
              }
            }
          }
        }
        if (struct.isSetStringQyCondition()) {
          oprot.writeString(struct.stringQyCondition);
        }
        if (struct.isSetStringAccess()) {
          oprot.writeString(struct.stringAccess);
        }
        if (struct.isSetStringKeyMacro()) {
          oprot.writeString(struct.stringKeyMacro);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DMI_FilterParam2_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.stringType = iprot.readString();
          struct.setStringTypeIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list78 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.vecTags = new ArrayList<String>(_list78.size);
            String _elem79;
            for (int _i80 = 0; _i80 < _list78.size; ++_i80)
            {
              _elem79 = iprot.readString();
              struct.vecTags.add(_elem79);
            }
          }
          struct.setVecTagsIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map81 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.mpCondition = new HashMap<String,List<String>>(2*_map81.size);
            String _key82;
            List<String> _val83;
            for (int _i84 = 0; _i84 < _map81.size; ++_i84)
            {
              _key82 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _val83 = new ArrayList<String>(_list85.size);
                String _elem86;
                for (int _i87 = 0; _i87 < _list85.size; ++_i87)
                {
                  _elem86 = iprot.readString();
                  _val83.add(_elem86);
                }
              }
              struct.mpCondition.put(_key82, _val83);
            }
          }
          struct.setMpConditionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.stringQyCondition = iprot.readString();
          struct.setStringQyConditionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.stringAccess = iprot.readString();
          struct.setStringAccessIsSet(true);
        }
        if (incoming.get(5)) {
          struct.stringKeyMacro = iprot.readString();
          struct.setStringKeyMacroIsSet(true);
        }
      }
    }

  }

  public static class DMI_FilterParam2_result implements org.apache.thrift.TBase<DMI_FilterParam2_result, DMI_FilterParam2_result._Fields>, java.io.Serializable, Cloneable, Comparable<DMI_FilterParam2_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DMI_FilterParam2_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DMI_FilterParam2_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DMI_FilterParam2_resultTupleSchemeFactory());
    }

    public Map<String,Map<String,String>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DMI_FilterParam2_result.class, metaDataMap);
    }

    public DMI_FilterParam2_result() {
    }

    public DMI_FilterParam2_result(
      Map<String,Map<String,String>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DMI_FilterParam2_result(DMI_FilterParam2_result other) {
      if (other.isSetSuccess()) {
        Map<String,Map<String,String>> __this__success = new HashMap<String,Map<String,String>>(other.success.size());
        for (Map.Entry<String, Map<String,String>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Map<String,String> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Map<String,String> __this__success_copy_value = new HashMap<String,String>(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public DMI_FilterParam2_result deepCopy() {
      return new DMI_FilterParam2_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Map<String,String> val) {
      if (this.success == null) {
        this.success = new HashMap<String,Map<String,String>>();
      }
      this.success.put(key, val);
    }

    public Map<String,Map<String,String>> getSuccess() {
      return this.success;
    }

    public DMI_FilterParam2_result setSuccess(Map<String,Map<String,String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Map<String,String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DMI_FilterParam2_result)
        return this.equals((DMI_FilterParam2_result)that);
      return false;
    }

    public boolean equals(DMI_FilterParam2_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(DMI_FilterParam2_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DMI_FilterParam2_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DMI_FilterParam2_resultStandardSchemeFactory implements SchemeFactory {
      public DMI_FilterParam2_resultStandardScheme getScheme() {
        return new DMI_FilterParam2_resultStandardScheme();
      }
    }

    private static class DMI_FilterParam2_resultStandardScheme extends StandardScheme<DMI_FilterParam2_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DMI_FilterParam2_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map88 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Map<String,String>>(2*_map88.size);
                  String _key89;
                  Map<String,String> _val90;
                  for (int _i91 = 0; _i91 < _map88.size; ++_i91)
                  {
                    _key89 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TMap _map92 = iprot.readMapBegin();
                      _val90 = new HashMap<String,String>(2*_map92.size);
                      String _key93;
                      String _val94;
                      for (int _i95 = 0; _i95 < _map92.size; ++_i95)
                      {
                        _key93 = iprot.readString();
                        _val94 = iprot.readString();
                        _val90.put(_key93, _val94);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.put(_key89, _val90);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DMI_FilterParam2_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map.Entry<String, Map<String,String>> _iter96 : struct.success.entrySet())
            {
              oprot.writeString(_iter96.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter96.getValue().size()));
                for (Map.Entry<String, String> _iter97 : _iter96.getValue().entrySet())
                {
                  oprot.writeString(_iter97.getKey());
                  oprot.writeString(_iter97.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DMI_FilterParam2_resultTupleSchemeFactory implements SchemeFactory {
      public DMI_FilterParam2_resultTupleScheme getScheme() {
        return new DMI_FilterParam2_resultTupleScheme();
      }
    }

    private static class DMI_FilterParam2_resultTupleScheme extends TupleScheme<DMI_FilterParam2_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DMI_FilterParam2_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Map<String,String>> _iter98 : struct.success.entrySet())
            {
              oprot.writeString(_iter98.getKey());
              {
                oprot.writeI32(_iter98.getValue().size());
                for (Map.Entry<String, String> _iter99 : _iter98.getValue().entrySet())
                {
                  oprot.writeString(_iter99.getKey());
                  oprot.writeString(_iter99.getValue());
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DMI_FilterParam2_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map100 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new HashMap<String,Map<String,String>>(2*_map100.size);
            String _key101;
            Map<String,String> _val102;
            for (int _i103 = 0; _i103 < _map100.size; ++_i103)
            {
              _key101 = iprot.readString();
              {
                org.apache.thrift.protocol.TMap _map104 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _val102 = new HashMap<String,String>(2*_map104.size);
                String _key105;
                String _val106;
                for (int _i107 = 0; _i107 < _map104.size; ++_i107)
                {
                  _key105 = iprot.readString();
                  _val106 = iprot.readString();
                  _val102.put(_key105, _val106);
                }
              }
              struct.success.put(_key101, _val102);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class DMI_UpdateData_args implements org.apache.thrift.TBase<DMI_UpdateData_args, DMI_UpdateData_args._Fields>, java.io.Serializable, Cloneable, Comparable<DMI_UpdateData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DMI_UpdateData_args");

    private static final org.apache.thrift.protocol.TField STRING_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("stringType", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MP_TAG2_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("mpTag2Value", org.apache.thrift.protocol.TType.MAP, (short)2);
    private static final org.apache.thrift.protocol.TField STRING_ACCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("stringAccess", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DMI_UpdateData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DMI_UpdateData_argsTupleSchemeFactory());
    }

    public String stringType; // required
    public Map<String,Map<String,String>> mpTag2Value; // required
    public String stringAccess; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRING_TYPE((short)1, "stringType"),
      MP_TAG2_VALUE((short)2, "mpTag2Value"),
      STRING_ACCESS((short)3, "stringAccess");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRING_TYPE
            return STRING_TYPE;
          case 2: // MP_TAG2_VALUE
            return MP_TAG2_VALUE;
          case 3: // STRING_ACCESS
            return STRING_ACCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRING_TYPE, new org.apache.thrift.meta_data.FieldMetaData("stringType", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MP_TAG2_VALUE, new org.apache.thrift.meta_data.FieldMetaData("mpTag2Value", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.STRING_ACCESS, new org.apache.thrift.meta_data.FieldMetaData("stringAccess", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DMI_UpdateData_args.class, metaDataMap);
    }

    public DMI_UpdateData_args() {
    }

    public DMI_UpdateData_args(
      String stringType,
      Map<String,Map<String,String>> mpTag2Value,
      String stringAccess)
    {
      this();
      this.stringType = stringType;
      this.mpTag2Value = mpTag2Value;
      this.stringAccess = stringAccess;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DMI_UpdateData_args(DMI_UpdateData_args other) {
      if (other.isSetStringType()) {
        this.stringType = other.stringType;
      }
      if (other.isSetMpTag2Value()) {
        Map<String,Map<String,String>> __this__mpTag2Value = new HashMap<String,Map<String,String>>(other.mpTag2Value.size());
        for (Map.Entry<String, Map<String,String>> other_element : other.mpTag2Value.entrySet()) {

          String other_element_key = other_element.getKey();
          Map<String,String> other_element_value = other_element.getValue();

          String __this__mpTag2Value_copy_key = other_element_key;

          Map<String,String> __this__mpTag2Value_copy_value = new HashMap<String,String>(other_element_value);

          __this__mpTag2Value.put(__this__mpTag2Value_copy_key, __this__mpTag2Value_copy_value);
        }
        this.mpTag2Value = __this__mpTag2Value;
      }
      if (other.isSetStringAccess()) {
        this.stringAccess = other.stringAccess;
      }
    }

    public DMI_UpdateData_args deepCopy() {
      return new DMI_UpdateData_args(this);
    }

    @Override
    public void clear() {
      this.stringType = null;
      this.mpTag2Value = null;
      this.stringAccess = null;
    }

    public String getStringType() {
      return this.stringType;
    }

    public DMI_UpdateData_args setStringType(String stringType) {
      this.stringType = stringType;
      return this;
    }

    public void unsetStringType() {
      this.stringType = null;
    }

    /** Returns true if field stringType is set (has been assigned a value) and false otherwise */
    public boolean isSetStringType() {
      return this.stringType != null;
    }

    public void setStringTypeIsSet(boolean value) {
      if (!value) {
        this.stringType = null;
      }
    }

    public int getMpTag2ValueSize() {
      return (this.mpTag2Value == null) ? 0 : this.mpTag2Value.size();
    }

    public void putToMpTag2Value(String key, Map<String,String> val) {
      if (this.mpTag2Value == null) {
        this.mpTag2Value = new HashMap<String,Map<String,String>>();
      }
      this.mpTag2Value.put(key, val);
    }

    public Map<String,Map<String,String>> getMpTag2Value() {
      return this.mpTag2Value;
    }

    public DMI_UpdateData_args setMpTag2Value(Map<String,Map<String,String>> mpTag2Value) {
      this.mpTag2Value = mpTag2Value;
      return this;
    }

    public void unsetMpTag2Value() {
      this.mpTag2Value = null;
    }

    /** Returns true if field mpTag2Value is set (has been assigned a value) and false otherwise */
    public boolean isSetMpTag2Value() {
      return this.mpTag2Value != null;
    }

    public void setMpTag2ValueIsSet(boolean value) {
      if (!value) {
        this.mpTag2Value = null;
      }
    }

    public String getStringAccess() {
      return this.stringAccess;
    }

    public DMI_UpdateData_args setStringAccess(String stringAccess) {
      this.stringAccess = stringAccess;
      return this;
    }

    public void unsetStringAccess() {
      this.stringAccess = null;
    }

    /** Returns true if field stringAccess is set (has been assigned a value) and false otherwise */
    public boolean isSetStringAccess() {
      return this.stringAccess != null;
    }

    public void setStringAccessIsSet(boolean value) {
      if (!value) {
        this.stringAccess = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRING_TYPE:
        if (value == null) {
          unsetStringType();
        } else {
          setStringType((String)value);
        }
        break;

      case MP_TAG2_VALUE:
        if (value == null) {
          unsetMpTag2Value();
        } else {
          setMpTag2Value((Map<String,Map<String,String>>)value);
        }
        break;

      case STRING_ACCESS:
        if (value == null) {
          unsetStringAccess();
        } else {
          setStringAccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRING_TYPE:
        return getStringType();

      case MP_TAG2_VALUE:
        return getMpTag2Value();

      case STRING_ACCESS:
        return getStringAccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRING_TYPE:
        return isSetStringType();
      case MP_TAG2_VALUE:
        return isSetMpTag2Value();
      case STRING_ACCESS:
        return isSetStringAccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DMI_UpdateData_args)
        return this.equals((DMI_UpdateData_args)that);
      return false;
    }

    public boolean equals(DMI_UpdateData_args that) {
      if (that == null)
        return false;

      boolean this_present_stringType = true && this.isSetStringType();
      boolean that_present_stringType = true && that.isSetStringType();
      if (this_present_stringType || that_present_stringType) {
        if (!(this_present_stringType && that_present_stringType))
          return false;
        if (!this.stringType.equals(that.stringType))
          return false;
      }

      boolean this_present_mpTag2Value = true && this.isSetMpTag2Value();
      boolean that_present_mpTag2Value = true && that.isSetMpTag2Value();
      if (this_present_mpTag2Value || that_present_mpTag2Value) {
        if (!(this_present_mpTag2Value && that_present_mpTag2Value))
          return false;
        if (!this.mpTag2Value.equals(that.mpTag2Value))
          return false;
      }

      boolean this_present_stringAccess = true && this.isSetStringAccess();
      boolean that_present_stringAccess = true && that.isSetStringAccess();
      if (this_present_stringAccess || that_present_stringAccess) {
        if (!(this_present_stringAccess && that_present_stringAccess))
          return false;
        if (!this.stringAccess.equals(that.stringAccess))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stringType = true && (isSetStringType());
      list.add(present_stringType);
      if (present_stringType)
        list.add(stringType);

      boolean present_mpTag2Value = true && (isSetMpTag2Value());
      list.add(present_mpTag2Value);
      if (present_mpTag2Value)
        list.add(mpTag2Value);

      boolean present_stringAccess = true && (isSetStringAccess());
      list.add(present_stringAccess);
      if (present_stringAccess)
        list.add(stringAccess);

      return list.hashCode();
    }

    @Override
    public int compareTo(DMI_UpdateData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStringType()).compareTo(other.isSetStringType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringType, other.stringType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMpTag2Value()).compareTo(other.isSetMpTag2Value());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMpTag2Value()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mpTag2Value, other.mpTag2Value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStringAccess()).compareTo(other.isSetStringAccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringAccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringAccess, other.stringAccess);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DMI_UpdateData_args(");
      boolean first = true;

      sb.append("stringType:");
      if (this.stringType == null) {
        sb.append("null");
      } else {
        sb.append(this.stringType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mpTag2Value:");
      if (this.mpTag2Value == null) {
        sb.append("null");
      } else {
        sb.append(this.mpTag2Value);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stringAccess:");
      if (this.stringAccess == null) {
        sb.append("null");
      } else {
        sb.append(this.stringAccess);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DMI_UpdateData_argsStandardSchemeFactory implements SchemeFactory {
      public DMI_UpdateData_argsStandardScheme getScheme() {
        return new DMI_UpdateData_argsStandardScheme();
      }
    }

    private static class DMI_UpdateData_argsStandardScheme extends StandardScheme<DMI_UpdateData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DMI_UpdateData_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // STRING_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringType = iprot.readString();
                struct.setStringTypeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MP_TAG2_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map108 = iprot.readMapBegin();
                  struct.mpTag2Value = new HashMap<String,Map<String,String>>(2*_map108.size);
                  String _key109;
                  Map<String,String> _val110;
                  for (int _i111 = 0; _i111 < _map108.size; ++_i111)
                  {
                    _key109 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TMap _map112 = iprot.readMapBegin();
                      _val110 = new HashMap<String,String>(2*_map112.size);
                      String _key113;
                      String _val114;
                      for (int _i115 = 0; _i115 < _map112.size; ++_i115)
                      {
                        _key113 = iprot.readString();
                        _val114 = iprot.readString();
                        _val110.put(_key113, _val114);
                      }
                      iprot.readMapEnd();
                    }
                    struct.mpTag2Value.put(_key109, _val110);
                  }
                  iprot.readMapEnd();
                }
                struct.setMpTag2ValueIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STRING_ACCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringAccess = iprot.readString();
                struct.setStringAccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DMI_UpdateData_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stringType != null) {
          oprot.writeFieldBegin(STRING_TYPE_FIELD_DESC);
          oprot.writeString(struct.stringType);
          oprot.writeFieldEnd();
        }
        if (struct.mpTag2Value != null) {
          oprot.writeFieldBegin(MP_TAG2_VALUE_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.mpTag2Value.size()));
            for (Map.Entry<String, Map<String,String>> _iter116 : struct.mpTag2Value.entrySet())
            {
              oprot.writeString(_iter116.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter116.getValue().size()));
                for (Map.Entry<String, String> _iter117 : _iter116.getValue().entrySet())
                {
                  oprot.writeString(_iter117.getKey());
                  oprot.writeString(_iter117.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.stringAccess != null) {
          oprot.writeFieldBegin(STRING_ACCESS_FIELD_DESC);
          oprot.writeString(struct.stringAccess);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DMI_UpdateData_argsTupleSchemeFactory implements SchemeFactory {
      public DMI_UpdateData_argsTupleScheme getScheme() {
        return new DMI_UpdateData_argsTupleScheme();
      }
    }

    private static class DMI_UpdateData_argsTupleScheme extends TupleScheme<DMI_UpdateData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DMI_UpdateData_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStringType()) {
          optionals.set(0);
        }
        if (struct.isSetMpTag2Value()) {
          optionals.set(1);
        }
        if (struct.isSetStringAccess()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetStringType()) {
          oprot.writeString(struct.stringType);
        }
        if (struct.isSetMpTag2Value()) {
          {
            oprot.writeI32(struct.mpTag2Value.size());
            for (Map.Entry<String, Map<String,String>> _iter118 : struct.mpTag2Value.entrySet())
            {
              oprot.writeString(_iter118.getKey());
              {
                oprot.writeI32(_iter118.getValue().size());
                for (Map.Entry<String, String> _iter119 : _iter118.getValue().entrySet())
                {
                  oprot.writeString(_iter119.getKey());
                  oprot.writeString(_iter119.getValue());
                }
              }
            }
          }
        }
        if (struct.isSetStringAccess()) {
          oprot.writeString(struct.stringAccess);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DMI_UpdateData_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.stringType = iprot.readString();
          struct.setStringTypeIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map120 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.mpTag2Value = new HashMap<String,Map<String,String>>(2*_map120.size);
            String _key121;
            Map<String,String> _val122;
            for (int _i123 = 0; _i123 < _map120.size; ++_i123)
            {
              _key121 = iprot.readString();
              {
                org.apache.thrift.protocol.TMap _map124 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _val122 = new HashMap<String,String>(2*_map124.size);
                String _key125;
                String _val126;
                for (int _i127 = 0; _i127 < _map124.size; ++_i127)
                {
                  _key125 = iprot.readString();
                  _val126 = iprot.readString();
                  _val122.put(_key125, _val126);
                }
              }
              struct.mpTag2Value.put(_key121, _val122);
            }
          }
          struct.setMpTag2ValueIsSet(true);
        }
        if (incoming.get(2)) {
          struct.stringAccess = iprot.readString();
          struct.setStringAccessIsSet(true);
        }
      }
    }

  }

  public static class DMI_UpdateData_result implements org.apache.thrift.TBase<DMI_UpdateData_result, DMI_UpdateData_result._Fields>, java.io.Serializable, Cloneable, Comparable<DMI_UpdateData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DMI_UpdateData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DMI_UpdateData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DMI_UpdateData_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DMI_UpdateData_result.class, metaDataMap);
    }

    public DMI_UpdateData_result() {
    }

    public DMI_UpdateData_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DMI_UpdateData_result(DMI_UpdateData_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public DMI_UpdateData_result deepCopy() {
      return new DMI_UpdateData_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public DMI_UpdateData_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DMI_UpdateData_result)
        return this.equals((DMI_UpdateData_result)that);
      return false;
    }

    public boolean equals(DMI_UpdateData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(DMI_UpdateData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DMI_UpdateData_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DMI_UpdateData_resultStandardSchemeFactory implements SchemeFactory {
      public DMI_UpdateData_resultStandardScheme getScheme() {
        return new DMI_UpdateData_resultStandardScheme();
      }
    }

    private static class DMI_UpdateData_resultStandardScheme extends StandardScheme<DMI_UpdateData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DMI_UpdateData_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DMI_UpdateData_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DMI_UpdateData_resultTupleSchemeFactory implements SchemeFactory {
      public DMI_UpdateData_resultTupleScheme getScheme() {
        return new DMI_UpdateData_resultTupleScheme();
      }
    }

    private static class DMI_UpdateData_resultTupleScheme extends TupleScheme<DMI_UpdateData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DMI_UpdateData_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DMI_UpdateData_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class DMI_DeleteData_args implements org.apache.thrift.TBase<DMI_DeleteData_args, DMI_DeleteData_args._Fields>, java.io.Serializable, Cloneable, Comparable<DMI_DeleteData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DMI_DeleteData_args");

    private static final org.apache.thrift.protocol.TField STRING_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("stringType", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MP_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("mpCondition", org.apache.thrift.protocol.TType.MAP, (short)2);
    private static final org.apache.thrift.protocol.TField STRING_ACCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("stringAccess", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DMI_DeleteData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DMI_DeleteData_argsTupleSchemeFactory());
    }

    public String stringType; // required
    public Map<String,List<String>> mpCondition; // required
    public String stringAccess; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRING_TYPE((short)1, "stringType"),
      MP_CONDITION((short)2, "mpCondition"),
      STRING_ACCESS((short)3, "stringAccess");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRING_TYPE
            return STRING_TYPE;
          case 2: // MP_CONDITION
            return MP_CONDITION;
          case 3: // STRING_ACCESS
            return STRING_ACCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRING_TYPE, new org.apache.thrift.meta_data.FieldMetaData("stringType", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MP_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("mpCondition", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.STRING_ACCESS, new org.apache.thrift.meta_data.FieldMetaData("stringAccess", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DMI_DeleteData_args.class, metaDataMap);
    }

    public DMI_DeleteData_args() {
    }

    public DMI_DeleteData_args(
      String stringType,
      Map<String,List<String>> mpCondition,
      String stringAccess)
    {
      this();
      this.stringType = stringType;
      this.mpCondition = mpCondition;
      this.stringAccess = stringAccess;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DMI_DeleteData_args(DMI_DeleteData_args other) {
      if (other.isSetStringType()) {
        this.stringType = other.stringType;
      }
      if (other.isSetMpCondition()) {
        Map<String,List<String>> __this__mpCondition = new HashMap<String,List<String>>(other.mpCondition.size());
        for (Map.Entry<String, List<String>> other_element : other.mpCondition.entrySet()) {

          String other_element_key = other_element.getKey();
          List<String> other_element_value = other_element.getValue();

          String __this__mpCondition_copy_key = other_element_key;

          List<String> __this__mpCondition_copy_value = new ArrayList<String>(other_element_value);

          __this__mpCondition.put(__this__mpCondition_copy_key, __this__mpCondition_copy_value);
        }
        this.mpCondition = __this__mpCondition;
      }
      if (other.isSetStringAccess()) {
        this.stringAccess = other.stringAccess;
      }
    }

    public DMI_DeleteData_args deepCopy() {
      return new DMI_DeleteData_args(this);
    }

    @Override
    public void clear() {
      this.stringType = null;
      this.mpCondition = null;
      this.stringAccess = null;
    }

    public String getStringType() {
      return this.stringType;
    }

    public DMI_DeleteData_args setStringType(String stringType) {
      this.stringType = stringType;
      return this;
    }

    public void unsetStringType() {
      this.stringType = null;
    }

    /** Returns true if field stringType is set (has been assigned a value) and false otherwise */
    public boolean isSetStringType() {
      return this.stringType != null;
    }

    public void setStringTypeIsSet(boolean value) {
      if (!value) {
        this.stringType = null;
      }
    }

    public int getMpConditionSize() {
      return (this.mpCondition == null) ? 0 : this.mpCondition.size();
    }

    public void putToMpCondition(String key, List<String> val) {
      if (this.mpCondition == null) {
        this.mpCondition = new HashMap<String,List<String>>();
      }
      this.mpCondition.put(key, val);
    }

    public Map<String,List<String>> getMpCondition() {
      return this.mpCondition;
    }

    public DMI_DeleteData_args setMpCondition(Map<String,List<String>> mpCondition) {
      this.mpCondition = mpCondition;
      return this;
    }

    public void unsetMpCondition() {
      this.mpCondition = null;
    }

    /** Returns true if field mpCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetMpCondition() {
      return this.mpCondition != null;
    }

    public void setMpConditionIsSet(boolean value) {
      if (!value) {
        this.mpCondition = null;
      }
    }

    public String getStringAccess() {
      return this.stringAccess;
    }

    public DMI_DeleteData_args setStringAccess(String stringAccess) {
      this.stringAccess = stringAccess;
      return this;
    }

    public void unsetStringAccess() {
      this.stringAccess = null;
    }

    /** Returns true if field stringAccess is set (has been assigned a value) and false otherwise */
    public boolean isSetStringAccess() {
      return this.stringAccess != null;
    }

    public void setStringAccessIsSet(boolean value) {
      if (!value) {
        this.stringAccess = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRING_TYPE:
        if (value == null) {
          unsetStringType();
        } else {
          setStringType((String)value);
        }
        break;

      case MP_CONDITION:
        if (value == null) {
          unsetMpCondition();
        } else {
          setMpCondition((Map<String,List<String>>)value);
        }
        break;

      case STRING_ACCESS:
        if (value == null) {
          unsetStringAccess();
        } else {
          setStringAccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRING_TYPE:
        return getStringType();

      case MP_CONDITION:
        return getMpCondition();

      case STRING_ACCESS:
        return getStringAccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRING_TYPE:
        return isSetStringType();
      case MP_CONDITION:
        return isSetMpCondition();
      case STRING_ACCESS:
        return isSetStringAccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DMI_DeleteData_args)
        return this.equals((DMI_DeleteData_args)that);
      return false;
    }

    public boolean equals(DMI_DeleteData_args that) {
      if (that == null)
        return false;

      boolean this_present_stringType = true && this.isSetStringType();
      boolean that_present_stringType = true && that.isSetStringType();
      if (this_present_stringType || that_present_stringType) {
        if (!(this_present_stringType && that_present_stringType))
          return false;
        if (!this.stringType.equals(that.stringType))
          return false;
      }

      boolean this_present_mpCondition = true && this.isSetMpCondition();
      boolean that_present_mpCondition = true && that.isSetMpCondition();
      if (this_present_mpCondition || that_present_mpCondition) {
        if (!(this_present_mpCondition && that_present_mpCondition))
          return false;
        if (!this.mpCondition.equals(that.mpCondition))
          return false;
      }

      boolean this_present_stringAccess = true && this.isSetStringAccess();
      boolean that_present_stringAccess = true && that.isSetStringAccess();
      if (this_present_stringAccess || that_present_stringAccess) {
        if (!(this_present_stringAccess && that_present_stringAccess))
          return false;
        if (!this.stringAccess.equals(that.stringAccess))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stringType = true && (isSetStringType());
      list.add(present_stringType);
      if (present_stringType)
        list.add(stringType);

      boolean present_mpCondition = true && (isSetMpCondition());
      list.add(present_mpCondition);
      if (present_mpCondition)
        list.add(mpCondition);

      boolean present_stringAccess = true && (isSetStringAccess());
      list.add(present_stringAccess);
      if (present_stringAccess)
        list.add(stringAccess);

      return list.hashCode();
    }

    @Override
    public int compareTo(DMI_DeleteData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStringType()).compareTo(other.isSetStringType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringType, other.stringType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMpCondition()).compareTo(other.isSetMpCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMpCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mpCondition, other.mpCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStringAccess()).compareTo(other.isSetStringAccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringAccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringAccess, other.stringAccess);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DMI_DeleteData_args(");
      boolean first = true;

      sb.append("stringType:");
      if (this.stringType == null) {
        sb.append("null");
      } else {
        sb.append(this.stringType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mpCondition:");
      if (this.mpCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.mpCondition);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stringAccess:");
      if (this.stringAccess == null) {
        sb.append("null");
      } else {
        sb.append(this.stringAccess);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DMI_DeleteData_argsStandardSchemeFactory implements SchemeFactory {
      public DMI_DeleteData_argsStandardScheme getScheme() {
        return new DMI_DeleteData_argsStandardScheme();
      }
    }

    private static class DMI_DeleteData_argsStandardScheme extends StandardScheme<DMI_DeleteData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DMI_DeleteData_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // STRING_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringType = iprot.readString();
                struct.setStringTypeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MP_CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map128 = iprot.readMapBegin();
                  struct.mpCondition = new HashMap<String,List<String>>(2*_map128.size);
                  String _key129;
                  List<String> _val130;
                  for (int _i131 = 0; _i131 < _map128.size; ++_i131)
                  {
                    _key129 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list132 = iprot.readListBegin();
                      _val130 = new ArrayList<String>(_list132.size);
                      String _elem133;
                      for (int _i134 = 0; _i134 < _list132.size; ++_i134)
                      {
                        _elem133 = iprot.readString();
                        _val130.add(_elem133);
                      }
                      iprot.readListEnd();
                    }
                    struct.mpCondition.put(_key129, _val130);
                  }
                  iprot.readMapEnd();
                }
                struct.setMpConditionIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STRING_ACCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringAccess = iprot.readString();
                struct.setStringAccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DMI_DeleteData_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stringType != null) {
          oprot.writeFieldBegin(STRING_TYPE_FIELD_DESC);
          oprot.writeString(struct.stringType);
          oprot.writeFieldEnd();
        }
        if (struct.mpCondition != null) {
          oprot.writeFieldBegin(MP_CONDITION_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.mpCondition.size()));
            for (Map.Entry<String, List<String>> _iter135 : struct.mpCondition.entrySet())
            {
              oprot.writeString(_iter135.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter135.getValue().size()));
                for (String _iter136 : _iter135.getValue())
                {
                  oprot.writeString(_iter136);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.stringAccess != null) {
          oprot.writeFieldBegin(STRING_ACCESS_FIELD_DESC);
          oprot.writeString(struct.stringAccess);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DMI_DeleteData_argsTupleSchemeFactory implements SchemeFactory {
      public DMI_DeleteData_argsTupleScheme getScheme() {
        return new DMI_DeleteData_argsTupleScheme();
      }
    }

    private static class DMI_DeleteData_argsTupleScheme extends TupleScheme<DMI_DeleteData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DMI_DeleteData_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStringType()) {
          optionals.set(0);
        }
        if (struct.isSetMpCondition()) {
          optionals.set(1);
        }
        if (struct.isSetStringAccess()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetStringType()) {
          oprot.writeString(struct.stringType);
        }
        if (struct.isSetMpCondition()) {
          {
            oprot.writeI32(struct.mpCondition.size());
            for (Map.Entry<String, List<String>> _iter137 : struct.mpCondition.entrySet())
            {
              oprot.writeString(_iter137.getKey());
              {
                oprot.writeI32(_iter137.getValue().size());
                for (String _iter138 : _iter137.getValue())
                {
                  oprot.writeString(_iter138);
                }
              }
            }
          }
        }
        if (struct.isSetStringAccess()) {
          oprot.writeString(struct.stringAccess);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DMI_DeleteData_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.stringType = iprot.readString();
          struct.setStringTypeIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map139 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.mpCondition = new HashMap<String,List<String>>(2*_map139.size);
            String _key140;
            List<String> _val141;
            for (int _i142 = 0; _i142 < _map139.size; ++_i142)
            {
              _key140 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list143 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _val141 = new ArrayList<String>(_list143.size);
                String _elem144;
                for (int _i145 = 0; _i145 < _list143.size; ++_i145)
                {
                  _elem144 = iprot.readString();
                  _val141.add(_elem144);
                }
              }
              struct.mpCondition.put(_key140, _val141);
            }
          }
          struct.setMpConditionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.stringAccess = iprot.readString();
          struct.setStringAccessIsSet(true);
        }
      }
    }

  }

  public static class DMI_DeleteData_result implements org.apache.thrift.TBase<DMI_DeleteData_result, DMI_DeleteData_result._Fields>, java.io.Serializable, Cloneable, Comparable<DMI_DeleteData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DMI_DeleteData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DMI_DeleteData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DMI_DeleteData_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DMI_DeleteData_result.class, metaDataMap);
    }

    public DMI_DeleteData_result() {
    }

    public DMI_DeleteData_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DMI_DeleteData_result(DMI_DeleteData_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public DMI_DeleteData_result deepCopy() {
      return new DMI_DeleteData_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public DMI_DeleteData_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DMI_DeleteData_result)
        return this.equals((DMI_DeleteData_result)that);
      return false;
    }

    public boolean equals(DMI_DeleteData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(DMI_DeleteData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DMI_DeleteData_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DMI_DeleteData_resultStandardSchemeFactory implements SchemeFactory {
      public DMI_DeleteData_resultStandardScheme getScheme() {
        return new DMI_DeleteData_resultStandardScheme();
      }
    }

    private static class DMI_DeleteData_resultStandardScheme extends StandardScheme<DMI_DeleteData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DMI_DeleteData_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DMI_DeleteData_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DMI_DeleteData_resultTupleSchemeFactory implements SchemeFactory {
      public DMI_DeleteData_resultTupleScheme getScheme() {
        return new DMI_DeleteData_resultTupleScheme();
      }
    }

    private static class DMI_DeleteData_resultTupleScheme extends TupleScheme<DMI_DeleteData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DMI_DeleteData_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DMI_DeleteData_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class DMI_DeleteData2_args implements org.apache.thrift.TBase<DMI_DeleteData2_args, DMI_DeleteData2_args._Fields>, java.io.Serializable, Cloneable, Comparable<DMI_DeleteData2_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DMI_DeleteData2_args");

    private static final org.apache.thrift.protocol.TField STRING_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("stringType", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vcId", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField STRING_ACCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("stringAccess", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField STRING_KEY_MACRO_FIELD_DESC = new org.apache.thrift.protocol.TField("stringKeyMacro", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DMI_DeleteData2_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DMI_DeleteData2_argsTupleSchemeFactory());
    }

    public String stringType; // required
    public List<String> vcId; // required
    public String stringAccess; // required
    public String stringKeyMacro; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRING_TYPE((short)1, "stringType"),
      VC_ID((short)2, "vcId"),
      STRING_ACCESS((short)3, "stringAccess"),
      STRING_KEY_MACRO((short)4, "stringKeyMacro");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRING_TYPE
            return STRING_TYPE;
          case 2: // VC_ID
            return VC_ID;
          case 3: // STRING_ACCESS
            return STRING_ACCESS;
          case 4: // STRING_KEY_MACRO
            return STRING_KEY_MACRO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRING_TYPE, new org.apache.thrift.meta_data.FieldMetaData("stringType", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VC_ID, new org.apache.thrift.meta_data.FieldMetaData("vcId", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.STRING_ACCESS, new org.apache.thrift.meta_data.FieldMetaData("stringAccess", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STRING_KEY_MACRO, new org.apache.thrift.meta_data.FieldMetaData("stringKeyMacro", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DMI_DeleteData2_args.class, metaDataMap);
    }

    public DMI_DeleteData2_args() {
    }

    public DMI_DeleteData2_args(
      String stringType,
      List<String> vcId,
      String stringAccess,
      String stringKeyMacro)
    {
      this();
      this.stringType = stringType;
      this.vcId = vcId;
      this.stringAccess = stringAccess;
      this.stringKeyMacro = stringKeyMacro;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DMI_DeleteData2_args(DMI_DeleteData2_args other) {
      if (other.isSetStringType()) {
        this.stringType = other.stringType;
      }
      if (other.isSetVcId()) {
        List<String> __this__vcId = new ArrayList<String>(other.vcId);
        this.vcId = __this__vcId;
      }
      if (other.isSetStringAccess()) {
        this.stringAccess = other.stringAccess;
      }
      if (other.isSetStringKeyMacro()) {
        this.stringKeyMacro = other.stringKeyMacro;
      }
    }

    public DMI_DeleteData2_args deepCopy() {
      return new DMI_DeleteData2_args(this);
    }

    @Override
    public void clear() {
      this.stringType = null;
      this.vcId = null;
      this.stringAccess = null;
      this.stringKeyMacro = null;
    }

    public String getStringType() {
      return this.stringType;
    }

    public DMI_DeleteData2_args setStringType(String stringType) {
      this.stringType = stringType;
      return this;
    }

    public void unsetStringType() {
      this.stringType = null;
    }

    /** Returns true if field stringType is set (has been assigned a value) and false otherwise */
    public boolean isSetStringType() {
      return this.stringType != null;
    }

    public void setStringTypeIsSet(boolean value) {
      if (!value) {
        this.stringType = null;
      }
    }

    public int getVcIdSize() {
      return (this.vcId == null) ? 0 : this.vcId.size();
    }

    public Iterator<String> getVcIdIterator() {
      return (this.vcId == null) ? null : this.vcId.iterator();
    }

    public void addToVcId(String elem) {
      if (this.vcId == null) {
        this.vcId = new ArrayList<String>();
      }
      this.vcId.add(elem);
    }

    public List<String> getVcId() {
      return this.vcId;
    }

    public DMI_DeleteData2_args setVcId(List<String> vcId) {
      this.vcId = vcId;
      return this;
    }

    public void unsetVcId() {
      this.vcId = null;
    }

    /** Returns true if field vcId is set (has been assigned a value) and false otherwise */
    public boolean isSetVcId() {
      return this.vcId != null;
    }

    public void setVcIdIsSet(boolean value) {
      if (!value) {
        this.vcId = null;
      }
    }

    public String getStringAccess() {
      return this.stringAccess;
    }

    public DMI_DeleteData2_args setStringAccess(String stringAccess) {
      this.stringAccess = stringAccess;
      return this;
    }

    public void unsetStringAccess() {
      this.stringAccess = null;
    }

    /** Returns true if field stringAccess is set (has been assigned a value) and false otherwise */
    public boolean isSetStringAccess() {
      return this.stringAccess != null;
    }

    public void setStringAccessIsSet(boolean value) {
      if (!value) {
        this.stringAccess = null;
      }
    }

    public String getStringKeyMacro() {
      return this.stringKeyMacro;
    }

    public DMI_DeleteData2_args setStringKeyMacro(String stringKeyMacro) {
      this.stringKeyMacro = stringKeyMacro;
      return this;
    }

    public void unsetStringKeyMacro() {
      this.stringKeyMacro = null;
    }

    /** Returns true if field stringKeyMacro is set (has been assigned a value) and false otherwise */
    public boolean isSetStringKeyMacro() {
      return this.stringKeyMacro != null;
    }

    public void setStringKeyMacroIsSet(boolean value) {
      if (!value) {
        this.stringKeyMacro = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRING_TYPE:
        if (value == null) {
          unsetStringType();
        } else {
          setStringType((String)value);
        }
        break;

      case VC_ID:
        if (value == null) {
          unsetVcId();
        } else {
          setVcId((List<String>)value);
        }
        break;

      case STRING_ACCESS:
        if (value == null) {
          unsetStringAccess();
        } else {
          setStringAccess((String)value);
        }
        break;

      case STRING_KEY_MACRO:
        if (value == null) {
          unsetStringKeyMacro();
        } else {
          setStringKeyMacro((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRING_TYPE:
        return getStringType();

      case VC_ID:
        return getVcId();

      case STRING_ACCESS:
        return getStringAccess();

      case STRING_KEY_MACRO:
        return getStringKeyMacro();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRING_TYPE:
        return isSetStringType();
      case VC_ID:
        return isSetVcId();
      case STRING_ACCESS:
        return isSetStringAccess();
      case STRING_KEY_MACRO:
        return isSetStringKeyMacro();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DMI_DeleteData2_args)
        return this.equals((DMI_DeleteData2_args)that);
      return false;
    }

    public boolean equals(DMI_DeleteData2_args that) {
      if (that == null)
        return false;

      boolean this_present_stringType = true && this.isSetStringType();
      boolean that_present_stringType = true && that.isSetStringType();
      if (this_present_stringType || that_present_stringType) {
        if (!(this_present_stringType && that_present_stringType))
          return false;
        if (!this.stringType.equals(that.stringType))
          return false;
      }

      boolean this_present_vcId = true && this.isSetVcId();
      boolean that_present_vcId = true && that.isSetVcId();
      if (this_present_vcId || that_present_vcId) {
        if (!(this_present_vcId && that_present_vcId))
          return false;
        if (!this.vcId.equals(that.vcId))
          return false;
      }

      boolean this_present_stringAccess = true && this.isSetStringAccess();
      boolean that_present_stringAccess = true && that.isSetStringAccess();
      if (this_present_stringAccess || that_present_stringAccess) {
        if (!(this_present_stringAccess && that_present_stringAccess))
          return false;
        if (!this.stringAccess.equals(that.stringAccess))
          return false;
      }

      boolean this_present_stringKeyMacro = true && this.isSetStringKeyMacro();
      boolean that_present_stringKeyMacro = true && that.isSetStringKeyMacro();
      if (this_present_stringKeyMacro || that_present_stringKeyMacro) {
        if (!(this_present_stringKeyMacro && that_present_stringKeyMacro))
          return false;
        if (!this.stringKeyMacro.equals(that.stringKeyMacro))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stringType = true && (isSetStringType());
      list.add(present_stringType);
      if (present_stringType)
        list.add(stringType);

      boolean present_vcId = true && (isSetVcId());
      list.add(present_vcId);
      if (present_vcId)
        list.add(vcId);

      boolean present_stringAccess = true && (isSetStringAccess());
      list.add(present_stringAccess);
      if (present_stringAccess)
        list.add(stringAccess);

      boolean present_stringKeyMacro = true && (isSetStringKeyMacro());
      list.add(present_stringKeyMacro);
      if (present_stringKeyMacro)
        list.add(stringKeyMacro);

      return list.hashCode();
    }

    @Override
    public int compareTo(DMI_DeleteData2_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStringType()).compareTo(other.isSetStringType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringType, other.stringType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVcId()).compareTo(other.isSetVcId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVcId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vcId, other.vcId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStringAccess()).compareTo(other.isSetStringAccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringAccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringAccess, other.stringAccess);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStringKeyMacro()).compareTo(other.isSetStringKeyMacro());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringKeyMacro()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringKeyMacro, other.stringKeyMacro);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DMI_DeleteData2_args(");
      boolean first = true;

      sb.append("stringType:");
      if (this.stringType == null) {
        sb.append("null");
      } else {
        sb.append(this.stringType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vcId:");
      if (this.vcId == null) {
        sb.append("null");
      } else {
        sb.append(this.vcId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stringAccess:");
      if (this.stringAccess == null) {
        sb.append("null");
      } else {
        sb.append(this.stringAccess);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stringKeyMacro:");
      if (this.stringKeyMacro == null) {
        sb.append("null");
      } else {
        sb.append(this.stringKeyMacro);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DMI_DeleteData2_argsStandardSchemeFactory implements SchemeFactory {
      public DMI_DeleteData2_argsStandardScheme getScheme() {
        return new DMI_DeleteData2_argsStandardScheme();
      }
    }

    private static class DMI_DeleteData2_argsStandardScheme extends StandardScheme<DMI_DeleteData2_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DMI_DeleteData2_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // STRING_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringType = iprot.readString();
                struct.setStringTypeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list146 = iprot.readListBegin();
                  struct.vcId = new ArrayList<String>(_list146.size);
                  String _elem147;
                  for (int _i148 = 0; _i148 < _list146.size; ++_i148)
                  {
                    _elem147 = iprot.readString();
                    struct.vcId.add(_elem147);
                  }
                  iprot.readListEnd();
                }
                struct.setVcIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STRING_ACCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringAccess = iprot.readString();
                struct.setStringAccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // STRING_KEY_MACRO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringKeyMacro = iprot.readString();
                struct.setStringKeyMacroIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DMI_DeleteData2_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stringType != null) {
          oprot.writeFieldBegin(STRING_TYPE_FIELD_DESC);
          oprot.writeString(struct.stringType);
          oprot.writeFieldEnd();
        }
        if (struct.vcId != null) {
          oprot.writeFieldBegin(VC_ID_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.vcId.size()));
            for (String _iter149 : struct.vcId)
            {
              oprot.writeString(_iter149);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.stringAccess != null) {
          oprot.writeFieldBegin(STRING_ACCESS_FIELD_DESC);
          oprot.writeString(struct.stringAccess);
          oprot.writeFieldEnd();
        }
        if (struct.stringKeyMacro != null) {
          oprot.writeFieldBegin(STRING_KEY_MACRO_FIELD_DESC);
          oprot.writeString(struct.stringKeyMacro);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DMI_DeleteData2_argsTupleSchemeFactory implements SchemeFactory {
      public DMI_DeleteData2_argsTupleScheme getScheme() {
        return new DMI_DeleteData2_argsTupleScheme();
      }
    }

    private static class DMI_DeleteData2_argsTupleScheme extends TupleScheme<DMI_DeleteData2_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DMI_DeleteData2_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStringType()) {
          optionals.set(0);
        }
        if (struct.isSetVcId()) {
          optionals.set(1);
        }
        if (struct.isSetStringAccess()) {
          optionals.set(2);
        }
        if (struct.isSetStringKeyMacro()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetStringType()) {
          oprot.writeString(struct.stringType);
        }
        if (struct.isSetVcId()) {
          {
            oprot.writeI32(struct.vcId.size());
            for (String _iter150 : struct.vcId)
            {
              oprot.writeString(_iter150);
            }
          }
        }
        if (struct.isSetStringAccess()) {
          oprot.writeString(struct.stringAccess);
        }
        if (struct.isSetStringKeyMacro()) {
          oprot.writeString(struct.stringKeyMacro);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DMI_DeleteData2_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.stringType = iprot.readString();
          struct.setStringTypeIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list151 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.vcId = new ArrayList<String>(_list151.size);
            String _elem152;
            for (int _i153 = 0; _i153 < _list151.size; ++_i153)
            {
              _elem152 = iprot.readString();
              struct.vcId.add(_elem152);
            }
          }
          struct.setVcIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.stringAccess = iprot.readString();
          struct.setStringAccessIsSet(true);
        }
        if (incoming.get(3)) {
          struct.stringKeyMacro = iprot.readString();
          struct.setStringKeyMacroIsSet(true);
        }
      }
    }

  }

  public static class DMI_DeleteData2_result implements org.apache.thrift.TBase<DMI_DeleteData2_result, DMI_DeleteData2_result._Fields>, java.io.Serializable, Cloneable, Comparable<DMI_DeleteData2_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DMI_DeleteData2_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DMI_DeleteData2_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DMI_DeleteData2_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DMI_DeleteData2_result.class, metaDataMap);
    }

    public DMI_DeleteData2_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DMI_DeleteData2_result(DMI_DeleteData2_result other) {
    }

    public DMI_DeleteData2_result deepCopy() {
      return new DMI_DeleteData2_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DMI_DeleteData2_result)
        return this.equals((DMI_DeleteData2_result)that);
      return false;
    }

    public boolean equals(DMI_DeleteData2_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(DMI_DeleteData2_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DMI_DeleteData2_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DMI_DeleteData2_resultStandardSchemeFactory implements SchemeFactory {
      public DMI_DeleteData2_resultStandardScheme getScheme() {
        return new DMI_DeleteData2_resultStandardScheme();
      }
    }

    private static class DMI_DeleteData2_resultStandardScheme extends StandardScheme<DMI_DeleteData2_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DMI_DeleteData2_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DMI_DeleteData2_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DMI_DeleteData2_resultTupleSchemeFactory implements SchemeFactory {
      public DMI_DeleteData2_resultTupleScheme getScheme() {
        return new DMI_DeleteData2_resultTupleScheme();
      }
    }

    private static class DMI_DeleteData2_resultTupleScheme extends TupleScheme<DMI_DeleteData2_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DMI_DeleteData2_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DMI_DeleteData2_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class DMI_ReceiveCmd_args implements org.apache.thrift.TBase<DMI_ReceiveCmd_args, DMI_ReceiveCmd_args._Fields>, java.io.Serializable, Cloneable, Comparable<DMI_ReceiveCmd_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DMI_ReceiveCmd_args");

    private static final org.apache.thrift.protocol.TField STRING_CMD_FIELD_DESC = new org.apache.thrift.protocol.TField("stringCmd", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STRING_ACCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("stringAccess", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DMI_ReceiveCmd_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DMI_ReceiveCmd_argsTupleSchemeFactory());
    }

    public String stringCmd; // required
    public String stringAccess; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRING_CMD((short)1, "stringCmd"),
      STRING_ACCESS((short)2, "stringAccess");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRING_CMD
            return STRING_CMD;
          case 2: // STRING_ACCESS
            return STRING_ACCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRING_CMD, new org.apache.thrift.meta_data.FieldMetaData("stringCmd", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STRING_ACCESS, new org.apache.thrift.meta_data.FieldMetaData("stringAccess", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DMI_ReceiveCmd_args.class, metaDataMap);
    }

    public DMI_ReceiveCmd_args() {
    }

    public DMI_ReceiveCmd_args(
      String stringCmd,
      String stringAccess)
    {
      this();
      this.stringCmd = stringCmd;
      this.stringAccess = stringAccess;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DMI_ReceiveCmd_args(DMI_ReceiveCmd_args other) {
      if (other.isSetStringCmd()) {
        this.stringCmd = other.stringCmd;
      }
      if (other.isSetStringAccess()) {
        this.stringAccess = other.stringAccess;
      }
    }

    public DMI_ReceiveCmd_args deepCopy() {
      return new DMI_ReceiveCmd_args(this);
    }

    @Override
    public void clear() {
      this.stringCmd = null;
      this.stringAccess = null;
    }

    public String getStringCmd() {
      return this.stringCmd;
    }

    public DMI_ReceiveCmd_args setStringCmd(String stringCmd) {
      this.stringCmd = stringCmd;
      return this;
    }

    public void unsetStringCmd() {
      this.stringCmd = null;
    }

    /** Returns true if field stringCmd is set (has been assigned a value) and false otherwise */
    public boolean isSetStringCmd() {
      return this.stringCmd != null;
    }

    public void setStringCmdIsSet(boolean value) {
      if (!value) {
        this.stringCmd = null;
      }
    }

    public String getStringAccess() {
      return this.stringAccess;
    }

    public DMI_ReceiveCmd_args setStringAccess(String stringAccess) {
      this.stringAccess = stringAccess;
      return this;
    }

    public void unsetStringAccess() {
      this.stringAccess = null;
    }

    /** Returns true if field stringAccess is set (has been assigned a value) and false otherwise */
    public boolean isSetStringAccess() {
      return this.stringAccess != null;
    }

    public void setStringAccessIsSet(boolean value) {
      if (!value) {
        this.stringAccess = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRING_CMD:
        if (value == null) {
          unsetStringCmd();
        } else {
          setStringCmd((String)value);
        }
        break;

      case STRING_ACCESS:
        if (value == null) {
          unsetStringAccess();
        } else {
          setStringAccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRING_CMD:
        return getStringCmd();

      case STRING_ACCESS:
        return getStringAccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRING_CMD:
        return isSetStringCmd();
      case STRING_ACCESS:
        return isSetStringAccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DMI_ReceiveCmd_args)
        return this.equals((DMI_ReceiveCmd_args)that);
      return false;
    }

    public boolean equals(DMI_ReceiveCmd_args that) {
      if (that == null)
        return false;

      boolean this_present_stringCmd = true && this.isSetStringCmd();
      boolean that_present_stringCmd = true && that.isSetStringCmd();
      if (this_present_stringCmd || that_present_stringCmd) {
        if (!(this_present_stringCmd && that_present_stringCmd))
          return false;
        if (!this.stringCmd.equals(that.stringCmd))
          return false;
      }

      boolean this_present_stringAccess = true && this.isSetStringAccess();
      boolean that_present_stringAccess = true && that.isSetStringAccess();
      if (this_present_stringAccess || that_present_stringAccess) {
        if (!(this_present_stringAccess && that_present_stringAccess))
          return false;
        if (!this.stringAccess.equals(that.stringAccess))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stringCmd = true && (isSetStringCmd());
      list.add(present_stringCmd);
      if (present_stringCmd)
        list.add(stringCmd);

      boolean present_stringAccess = true && (isSetStringAccess());
      list.add(present_stringAccess);
      if (present_stringAccess)
        list.add(stringAccess);

      return list.hashCode();
    }

    @Override
    public int compareTo(DMI_ReceiveCmd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStringCmd()).compareTo(other.isSetStringCmd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringCmd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringCmd, other.stringCmd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStringAccess()).compareTo(other.isSetStringAccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringAccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringAccess, other.stringAccess);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DMI_ReceiveCmd_args(");
      boolean first = true;

      sb.append("stringCmd:");
      if (this.stringCmd == null) {
        sb.append("null");
      } else {
        sb.append(this.stringCmd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stringAccess:");
      if (this.stringAccess == null) {
        sb.append("null");
      } else {
        sb.append(this.stringAccess);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DMI_ReceiveCmd_argsStandardSchemeFactory implements SchemeFactory {
      public DMI_ReceiveCmd_argsStandardScheme getScheme() {
        return new DMI_ReceiveCmd_argsStandardScheme();
      }
    }

    private static class DMI_ReceiveCmd_argsStandardScheme extends StandardScheme<DMI_ReceiveCmd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DMI_ReceiveCmd_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // STRING_CMD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringCmd = iprot.readString();
                struct.setStringCmdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STRING_ACCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringAccess = iprot.readString();
                struct.setStringAccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DMI_ReceiveCmd_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stringCmd != null) {
          oprot.writeFieldBegin(STRING_CMD_FIELD_DESC);
          oprot.writeString(struct.stringCmd);
          oprot.writeFieldEnd();
        }
        if (struct.stringAccess != null) {
          oprot.writeFieldBegin(STRING_ACCESS_FIELD_DESC);
          oprot.writeString(struct.stringAccess);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DMI_ReceiveCmd_argsTupleSchemeFactory implements SchemeFactory {
      public DMI_ReceiveCmd_argsTupleScheme getScheme() {
        return new DMI_ReceiveCmd_argsTupleScheme();
      }
    }

    private static class DMI_ReceiveCmd_argsTupleScheme extends TupleScheme<DMI_ReceiveCmd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DMI_ReceiveCmd_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStringCmd()) {
          optionals.set(0);
        }
        if (struct.isSetStringAccess()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStringCmd()) {
          oprot.writeString(struct.stringCmd);
        }
        if (struct.isSetStringAccess()) {
          oprot.writeString(struct.stringAccess);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DMI_ReceiveCmd_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.stringCmd = iprot.readString();
          struct.setStringCmdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stringAccess = iprot.readString();
          struct.setStringAccessIsSet(true);
        }
      }
    }

  }

  public static class DMI_ReceiveCmd_result implements org.apache.thrift.TBase<DMI_ReceiveCmd_result, DMI_ReceiveCmd_result._Fields>, java.io.Serializable, Cloneable, Comparable<DMI_ReceiveCmd_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DMI_ReceiveCmd_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DMI_ReceiveCmd_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DMI_ReceiveCmd_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DMI_ReceiveCmd_result.class, metaDataMap);
    }

    public DMI_ReceiveCmd_result() {
    }

    public DMI_ReceiveCmd_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DMI_ReceiveCmd_result(DMI_ReceiveCmd_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public DMI_ReceiveCmd_result deepCopy() {
      return new DMI_ReceiveCmd_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public DMI_ReceiveCmd_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DMI_ReceiveCmd_result)
        return this.equals((DMI_ReceiveCmd_result)that);
      return false;
    }

    public boolean equals(DMI_ReceiveCmd_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(DMI_ReceiveCmd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DMI_ReceiveCmd_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DMI_ReceiveCmd_resultStandardSchemeFactory implements SchemeFactory {
      public DMI_ReceiveCmd_resultStandardScheme getScheme() {
        return new DMI_ReceiveCmd_resultStandardScheme();
      }
    }

    private static class DMI_ReceiveCmd_resultStandardScheme extends StandardScheme<DMI_ReceiveCmd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DMI_ReceiveCmd_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DMI_ReceiveCmd_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DMI_ReceiveCmd_resultTupleSchemeFactory implements SchemeFactory {
      public DMI_ReceiveCmd_resultTupleScheme getScheme() {
        return new DMI_ReceiveCmd_resultTupleScheme();
      }
    }

    private static class DMI_ReceiveCmd_resultTupleScheme extends TupleScheme<DMI_ReceiveCmd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DMI_ReceiveCmd_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DMI_ReceiveCmd_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class DMI_TransBegin_args implements org.apache.thrift.TBase<DMI_TransBegin_args, DMI_TransBegin_args._Fields>, java.io.Serializable, Cloneable, Comparable<DMI_TransBegin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DMI_TransBegin_args");

    private static final org.apache.thrift.protocol.TField STRING_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("stringType", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STRING_ACCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("stringAccess", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DMI_TransBegin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DMI_TransBegin_argsTupleSchemeFactory());
    }

    public String stringType; // required
    public String stringAccess; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRING_TYPE((short)1, "stringType"),
      STRING_ACCESS((short)2, "stringAccess");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRING_TYPE
            return STRING_TYPE;
          case 2: // STRING_ACCESS
            return STRING_ACCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRING_TYPE, new org.apache.thrift.meta_data.FieldMetaData("stringType", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STRING_ACCESS, new org.apache.thrift.meta_data.FieldMetaData("stringAccess", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DMI_TransBegin_args.class, metaDataMap);
    }

    public DMI_TransBegin_args() {
    }

    public DMI_TransBegin_args(
      String stringType,
      String stringAccess)
    {
      this();
      this.stringType = stringType;
      this.stringAccess = stringAccess;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DMI_TransBegin_args(DMI_TransBegin_args other) {
      if (other.isSetStringType()) {
        this.stringType = other.stringType;
      }
      if (other.isSetStringAccess()) {
        this.stringAccess = other.stringAccess;
      }
    }

    public DMI_TransBegin_args deepCopy() {
      return new DMI_TransBegin_args(this);
    }

    @Override
    public void clear() {
      this.stringType = null;
      this.stringAccess = null;
    }

    public String getStringType() {
      return this.stringType;
    }

    public DMI_TransBegin_args setStringType(String stringType) {
      this.stringType = stringType;
      return this;
    }

    public void unsetStringType() {
      this.stringType = null;
    }

    /** Returns true if field stringType is set (has been assigned a value) and false otherwise */
    public boolean isSetStringType() {
      return this.stringType != null;
    }

    public void setStringTypeIsSet(boolean value) {
      if (!value) {
        this.stringType = null;
      }
    }

    public String getStringAccess() {
      return this.stringAccess;
    }

    public DMI_TransBegin_args setStringAccess(String stringAccess) {
      this.stringAccess = stringAccess;
      return this;
    }

    public void unsetStringAccess() {
      this.stringAccess = null;
    }

    /** Returns true if field stringAccess is set (has been assigned a value) and false otherwise */
    public boolean isSetStringAccess() {
      return this.stringAccess != null;
    }

    public void setStringAccessIsSet(boolean value) {
      if (!value) {
        this.stringAccess = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRING_TYPE:
        if (value == null) {
          unsetStringType();
        } else {
          setStringType((String)value);
        }
        break;

      case STRING_ACCESS:
        if (value == null) {
          unsetStringAccess();
        } else {
          setStringAccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRING_TYPE:
        return getStringType();

      case STRING_ACCESS:
        return getStringAccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRING_TYPE:
        return isSetStringType();
      case STRING_ACCESS:
        return isSetStringAccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DMI_TransBegin_args)
        return this.equals((DMI_TransBegin_args)that);
      return false;
    }

    public boolean equals(DMI_TransBegin_args that) {
      if (that == null)
        return false;

      boolean this_present_stringType = true && this.isSetStringType();
      boolean that_present_stringType = true && that.isSetStringType();
      if (this_present_stringType || that_present_stringType) {
        if (!(this_present_stringType && that_present_stringType))
          return false;
        if (!this.stringType.equals(that.stringType))
          return false;
      }

      boolean this_present_stringAccess = true && this.isSetStringAccess();
      boolean that_present_stringAccess = true && that.isSetStringAccess();
      if (this_present_stringAccess || that_present_stringAccess) {
        if (!(this_present_stringAccess && that_present_stringAccess))
          return false;
        if (!this.stringAccess.equals(that.stringAccess))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stringType = true && (isSetStringType());
      list.add(present_stringType);
      if (present_stringType)
        list.add(stringType);

      boolean present_stringAccess = true && (isSetStringAccess());
      list.add(present_stringAccess);
      if (present_stringAccess)
        list.add(stringAccess);

      return list.hashCode();
    }

    @Override
    public int compareTo(DMI_TransBegin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStringType()).compareTo(other.isSetStringType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringType, other.stringType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStringAccess()).compareTo(other.isSetStringAccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringAccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringAccess, other.stringAccess);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DMI_TransBegin_args(");
      boolean first = true;

      sb.append("stringType:");
      if (this.stringType == null) {
        sb.append("null");
      } else {
        sb.append(this.stringType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stringAccess:");
      if (this.stringAccess == null) {
        sb.append("null");
      } else {
        sb.append(this.stringAccess);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DMI_TransBegin_argsStandardSchemeFactory implements SchemeFactory {
      public DMI_TransBegin_argsStandardScheme getScheme() {
        return new DMI_TransBegin_argsStandardScheme();
      }
    }

    private static class DMI_TransBegin_argsStandardScheme extends StandardScheme<DMI_TransBegin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DMI_TransBegin_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // STRING_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringType = iprot.readString();
                struct.setStringTypeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STRING_ACCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringAccess = iprot.readString();
                struct.setStringAccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DMI_TransBegin_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stringType != null) {
          oprot.writeFieldBegin(STRING_TYPE_FIELD_DESC);
          oprot.writeString(struct.stringType);
          oprot.writeFieldEnd();
        }
        if (struct.stringAccess != null) {
          oprot.writeFieldBegin(STRING_ACCESS_FIELD_DESC);
          oprot.writeString(struct.stringAccess);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DMI_TransBegin_argsTupleSchemeFactory implements SchemeFactory {
      public DMI_TransBegin_argsTupleScheme getScheme() {
        return new DMI_TransBegin_argsTupleScheme();
      }
    }

    private static class DMI_TransBegin_argsTupleScheme extends TupleScheme<DMI_TransBegin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DMI_TransBegin_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStringType()) {
          optionals.set(0);
        }
        if (struct.isSetStringAccess()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStringType()) {
          oprot.writeString(struct.stringType);
        }
        if (struct.isSetStringAccess()) {
          oprot.writeString(struct.stringAccess);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DMI_TransBegin_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.stringType = iprot.readString();
          struct.setStringTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stringAccess = iprot.readString();
          struct.setStringAccessIsSet(true);
        }
      }
    }

  }

  public static class DMI_TransBegin_result implements org.apache.thrift.TBase<DMI_TransBegin_result, DMI_TransBegin_result._Fields>, java.io.Serializable, Cloneable, Comparable<DMI_TransBegin_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DMI_TransBegin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DMI_TransBegin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DMI_TransBegin_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DMI_TransBegin_result.class, metaDataMap);
    }

    public DMI_TransBegin_result() {
    }

    public DMI_TransBegin_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DMI_TransBegin_result(DMI_TransBegin_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public DMI_TransBegin_result deepCopy() {
      return new DMI_TransBegin_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public DMI_TransBegin_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DMI_TransBegin_result)
        return this.equals((DMI_TransBegin_result)that);
      return false;
    }

    public boolean equals(DMI_TransBegin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(DMI_TransBegin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DMI_TransBegin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DMI_TransBegin_resultStandardSchemeFactory implements SchemeFactory {
      public DMI_TransBegin_resultStandardScheme getScheme() {
        return new DMI_TransBegin_resultStandardScheme();
      }
    }

    private static class DMI_TransBegin_resultStandardScheme extends StandardScheme<DMI_TransBegin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DMI_TransBegin_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DMI_TransBegin_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DMI_TransBegin_resultTupleSchemeFactory implements SchemeFactory {
      public DMI_TransBegin_resultTupleScheme getScheme() {
        return new DMI_TransBegin_resultTupleScheme();
      }
    }

    private static class DMI_TransBegin_resultTupleScheme extends TupleScheme<DMI_TransBegin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DMI_TransBegin_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DMI_TransBegin_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class DMI_TransCommit_args implements org.apache.thrift.TBase<DMI_TransCommit_args, DMI_TransCommit_args._Fields>, java.io.Serializable, Cloneable, Comparable<DMI_TransCommit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DMI_TransCommit_args");

    private static final org.apache.thrift.protocol.TField STRING_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("stringType", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STRING_ACCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("stringAccess", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DMI_TransCommit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DMI_TransCommit_argsTupleSchemeFactory());
    }

    public String stringType; // required
    public String stringAccess; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRING_TYPE((short)1, "stringType"),
      STRING_ACCESS((short)2, "stringAccess");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRING_TYPE
            return STRING_TYPE;
          case 2: // STRING_ACCESS
            return STRING_ACCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRING_TYPE, new org.apache.thrift.meta_data.FieldMetaData("stringType", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STRING_ACCESS, new org.apache.thrift.meta_data.FieldMetaData("stringAccess", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DMI_TransCommit_args.class, metaDataMap);
    }

    public DMI_TransCommit_args() {
    }

    public DMI_TransCommit_args(
      String stringType,
      String stringAccess)
    {
      this();
      this.stringType = stringType;
      this.stringAccess = stringAccess;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DMI_TransCommit_args(DMI_TransCommit_args other) {
      if (other.isSetStringType()) {
        this.stringType = other.stringType;
      }
      if (other.isSetStringAccess()) {
        this.stringAccess = other.stringAccess;
      }
    }

    public DMI_TransCommit_args deepCopy() {
      return new DMI_TransCommit_args(this);
    }

    @Override
    public void clear() {
      this.stringType = null;
      this.stringAccess = null;
    }

    public String getStringType() {
      return this.stringType;
    }

    public DMI_TransCommit_args setStringType(String stringType) {
      this.stringType = stringType;
      return this;
    }

    public void unsetStringType() {
      this.stringType = null;
    }

    /** Returns true if field stringType is set (has been assigned a value) and false otherwise */
    public boolean isSetStringType() {
      return this.stringType != null;
    }

    public void setStringTypeIsSet(boolean value) {
      if (!value) {
        this.stringType = null;
      }
    }

    public String getStringAccess() {
      return this.stringAccess;
    }

    public DMI_TransCommit_args setStringAccess(String stringAccess) {
      this.stringAccess = stringAccess;
      return this;
    }

    public void unsetStringAccess() {
      this.stringAccess = null;
    }

    /** Returns true if field stringAccess is set (has been assigned a value) and false otherwise */
    public boolean isSetStringAccess() {
      return this.stringAccess != null;
    }

    public void setStringAccessIsSet(boolean value) {
      if (!value) {
        this.stringAccess = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRING_TYPE:
        if (value == null) {
          unsetStringType();
        } else {
          setStringType((String)value);
        }
        break;

      case STRING_ACCESS:
        if (value == null) {
          unsetStringAccess();
        } else {
          setStringAccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRING_TYPE:
        return getStringType();

      case STRING_ACCESS:
        return getStringAccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRING_TYPE:
        return isSetStringType();
      case STRING_ACCESS:
        return isSetStringAccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DMI_TransCommit_args)
        return this.equals((DMI_TransCommit_args)that);
      return false;
    }

    public boolean equals(DMI_TransCommit_args that) {
      if (that == null)
        return false;

      boolean this_present_stringType = true && this.isSetStringType();
      boolean that_present_stringType = true && that.isSetStringType();
      if (this_present_stringType || that_present_stringType) {
        if (!(this_present_stringType && that_present_stringType))
          return false;
        if (!this.stringType.equals(that.stringType))
          return false;
      }

      boolean this_present_stringAccess = true && this.isSetStringAccess();
      boolean that_present_stringAccess = true && that.isSetStringAccess();
      if (this_present_stringAccess || that_present_stringAccess) {
        if (!(this_present_stringAccess && that_present_stringAccess))
          return false;
        if (!this.stringAccess.equals(that.stringAccess))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stringType = true && (isSetStringType());
      list.add(present_stringType);
      if (present_stringType)
        list.add(stringType);

      boolean present_stringAccess = true && (isSetStringAccess());
      list.add(present_stringAccess);
      if (present_stringAccess)
        list.add(stringAccess);

      return list.hashCode();
    }

    @Override
    public int compareTo(DMI_TransCommit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStringType()).compareTo(other.isSetStringType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringType, other.stringType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStringAccess()).compareTo(other.isSetStringAccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringAccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringAccess, other.stringAccess);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DMI_TransCommit_args(");
      boolean first = true;

      sb.append("stringType:");
      if (this.stringType == null) {
        sb.append("null");
      } else {
        sb.append(this.stringType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stringAccess:");
      if (this.stringAccess == null) {
        sb.append("null");
      } else {
        sb.append(this.stringAccess);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DMI_TransCommit_argsStandardSchemeFactory implements SchemeFactory {
      public DMI_TransCommit_argsStandardScheme getScheme() {
        return new DMI_TransCommit_argsStandardScheme();
      }
    }

    private static class DMI_TransCommit_argsStandardScheme extends StandardScheme<DMI_TransCommit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DMI_TransCommit_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // STRING_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringType = iprot.readString();
                struct.setStringTypeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STRING_ACCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringAccess = iprot.readString();
                struct.setStringAccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DMI_TransCommit_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stringType != null) {
          oprot.writeFieldBegin(STRING_TYPE_FIELD_DESC);
          oprot.writeString(struct.stringType);
          oprot.writeFieldEnd();
        }
        if (struct.stringAccess != null) {
          oprot.writeFieldBegin(STRING_ACCESS_FIELD_DESC);
          oprot.writeString(struct.stringAccess);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DMI_TransCommit_argsTupleSchemeFactory implements SchemeFactory {
      public DMI_TransCommit_argsTupleScheme getScheme() {
        return new DMI_TransCommit_argsTupleScheme();
      }
    }

    private static class DMI_TransCommit_argsTupleScheme extends TupleScheme<DMI_TransCommit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DMI_TransCommit_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStringType()) {
          optionals.set(0);
        }
        if (struct.isSetStringAccess()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStringType()) {
          oprot.writeString(struct.stringType);
        }
        if (struct.isSetStringAccess()) {
          oprot.writeString(struct.stringAccess);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DMI_TransCommit_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.stringType = iprot.readString();
          struct.setStringTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stringAccess = iprot.readString();
          struct.setStringAccessIsSet(true);
        }
      }
    }

  }

  public static class DMI_TransCommit_result implements org.apache.thrift.TBase<DMI_TransCommit_result, DMI_TransCommit_result._Fields>, java.io.Serializable, Cloneable, Comparable<DMI_TransCommit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DMI_TransCommit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DMI_TransCommit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DMI_TransCommit_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DMI_TransCommit_result.class, metaDataMap);
    }

    public DMI_TransCommit_result() {
    }

    public DMI_TransCommit_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DMI_TransCommit_result(DMI_TransCommit_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public DMI_TransCommit_result deepCopy() {
      return new DMI_TransCommit_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public DMI_TransCommit_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DMI_TransCommit_result)
        return this.equals((DMI_TransCommit_result)that);
      return false;
    }

    public boolean equals(DMI_TransCommit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(DMI_TransCommit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DMI_TransCommit_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DMI_TransCommit_resultStandardSchemeFactory implements SchemeFactory {
      public DMI_TransCommit_resultStandardScheme getScheme() {
        return new DMI_TransCommit_resultStandardScheme();
      }
    }

    private static class DMI_TransCommit_resultStandardScheme extends StandardScheme<DMI_TransCommit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DMI_TransCommit_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DMI_TransCommit_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DMI_TransCommit_resultTupleSchemeFactory implements SchemeFactory {
      public DMI_TransCommit_resultTupleScheme getScheme() {
        return new DMI_TransCommit_resultTupleScheme();
      }
    }

    private static class DMI_TransCommit_resultTupleScheme extends TupleScheme<DMI_TransCommit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DMI_TransCommit_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DMI_TransCommit_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class DMI_TransRollback_args implements org.apache.thrift.TBase<DMI_TransRollback_args, DMI_TransRollback_args._Fields>, java.io.Serializable, Cloneable, Comparable<DMI_TransRollback_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DMI_TransRollback_args");

    private static final org.apache.thrift.protocol.TField STRING_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("stringType", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STRING_ACCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("stringAccess", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DMI_TransRollback_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DMI_TransRollback_argsTupleSchemeFactory());
    }

    public String stringType; // required
    public String stringAccess; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRING_TYPE((short)1, "stringType"),
      STRING_ACCESS((short)2, "stringAccess");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRING_TYPE
            return STRING_TYPE;
          case 2: // STRING_ACCESS
            return STRING_ACCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRING_TYPE, new org.apache.thrift.meta_data.FieldMetaData("stringType", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STRING_ACCESS, new org.apache.thrift.meta_data.FieldMetaData("stringAccess", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DMI_TransRollback_args.class, metaDataMap);
    }

    public DMI_TransRollback_args() {
    }

    public DMI_TransRollback_args(
      String stringType,
      String stringAccess)
    {
      this();
      this.stringType = stringType;
      this.stringAccess = stringAccess;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DMI_TransRollback_args(DMI_TransRollback_args other) {
      if (other.isSetStringType()) {
        this.stringType = other.stringType;
      }
      if (other.isSetStringAccess()) {
        this.stringAccess = other.stringAccess;
      }
    }

    public DMI_TransRollback_args deepCopy() {
      return new DMI_TransRollback_args(this);
    }

    @Override
    public void clear() {
      this.stringType = null;
      this.stringAccess = null;
    }

    public String getStringType() {
      return this.stringType;
    }

    public DMI_TransRollback_args setStringType(String stringType) {
      this.stringType = stringType;
      return this;
    }

    public void unsetStringType() {
      this.stringType = null;
    }

    /** Returns true if field stringType is set (has been assigned a value) and false otherwise */
    public boolean isSetStringType() {
      return this.stringType != null;
    }

    public void setStringTypeIsSet(boolean value) {
      if (!value) {
        this.stringType = null;
      }
    }

    public String getStringAccess() {
      return this.stringAccess;
    }

    public DMI_TransRollback_args setStringAccess(String stringAccess) {
      this.stringAccess = stringAccess;
      return this;
    }

    public void unsetStringAccess() {
      this.stringAccess = null;
    }

    /** Returns true if field stringAccess is set (has been assigned a value) and false otherwise */
    public boolean isSetStringAccess() {
      return this.stringAccess != null;
    }

    public void setStringAccessIsSet(boolean value) {
      if (!value) {
        this.stringAccess = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRING_TYPE:
        if (value == null) {
          unsetStringType();
        } else {
          setStringType((String)value);
        }
        break;

      case STRING_ACCESS:
        if (value == null) {
          unsetStringAccess();
        } else {
          setStringAccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRING_TYPE:
        return getStringType();

      case STRING_ACCESS:
        return getStringAccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRING_TYPE:
        return isSetStringType();
      case STRING_ACCESS:
        return isSetStringAccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DMI_TransRollback_args)
        return this.equals((DMI_TransRollback_args)that);
      return false;
    }

    public boolean equals(DMI_TransRollback_args that) {
      if (that == null)
        return false;

      boolean this_present_stringType = true && this.isSetStringType();
      boolean that_present_stringType = true && that.isSetStringType();
      if (this_present_stringType || that_present_stringType) {
        if (!(this_present_stringType && that_present_stringType))
          return false;
        if (!this.stringType.equals(that.stringType))
          return false;
      }

      boolean this_present_stringAccess = true && this.isSetStringAccess();
      boolean that_present_stringAccess = true && that.isSetStringAccess();
      if (this_present_stringAccess || that_present_stringAccess) {
        if (!(this_present_stringAccess && that_present_stringAccess))
          return false;
        if (!this.stringAccess.equals(that.stringAccess))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stringType = true && (isSetStringType());
      list.add(present_stringType);
      if (present_stringType)
        list.add(stringType);

      boolean present_stringAccess = true && (isSetStringAccess());
      list.add(present_stringAccess);
      if (present_stringAccess)
        list.add(stringAccess);

      return list.hashCode();
    }

    @Override
    public int compareTo(DMI_TransRollback_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStringType()).compareTo(other.isSetStringType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringType, other.stringType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStringAccess()).compareTo(other.isSetStringAccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringAccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringAccess, other.stringAccess);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DMI_TransRollback_args(");
      boolean first = true;

      sb.append("stringType:");
      if (this.stringType == null) {
        sb.append("null");
      } else {
        sb.append(this.stringType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stringAccess:");
      if (this.stringAccess == null) {
        sb.append("null");
      } else {
        sb.append(this.stringAccess);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DMI_TransRollback_argsStandardSchemeFactory implements SchemeFactory {
      public DMI_TransRollback_argsStandardScheme getScheme() {
        return new DMI_TransRollback_argsStandardScheme();
      }
    }

    private static class DMI_TransRollback_argsStandardScheme extends StandardScheme<DMI_TransRollback_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DMI_TransRollback_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // STRING_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringType = iprot.readString();
                struct.setStringTypeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STRING_ACCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringAccess = iprot.readString();
                struct.setStringAccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DMI_TransRollback_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stringType != null) {
          oprot.writeFieldBegin(STRING_TYPE_FIELD_DESC);
          oprot.writeString(struct.stringType);
          oprot.writeFieldEnd();
        }
        if (struct.stringAccess != null) {
          oprot.writeFieldBegin(STRING_ACCESS_FIELD_DESC);
          oprot.writeString(struct.stringAccess);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DMI_TransRollback_argsTupleSchemeFactory implements SchemeFactory {
      public DMI_TransRollback_argsTupleScheme getScheme() {
        return new DMI_TransRollback_argsTupleScheme();
      }
    }

    private static class DMI_TransRollback_argsTupleScheme extends TupleScheme<DMI_TransRollback_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DMI_TransRollback_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStringType()) {
          optionals.set(0);
        }
        if (struct.isSetStringAccess()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStringType()) {
          oprot.writeString(struct.stringType);
        }
        if (struct.isSetStringAccess()) {
          oprot.writeString(struct.stringAccess);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DMI_TransRollback_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.stringType = iprot.readString();
          struct.setStringTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stringAccess = iprot.readString();
          struct.setStringAccessIsSet(true);
        }
      }
    }

  }

  public static class DMI_TransRollback_result implements org.apache.thrift.TBase<DMI_TransRollback_result, DMI_TransRollback_result._Fields>, java.io.Serializable, Cloneable, Comparable<DMI_TransRollback_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DMI_TransRollback_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DMI_TransRollback_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DMI_TransRollback_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DMI_TransRollback_result.class, metaDataMap);
    }

    public DMI_TransRollback_result() {
    }

    public DMI_TransRollback_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DMI_TransRollback_result(DMI_TransRollback_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public DMI_TransRollback_result deepCopy() {
      return new DMI_TransRollback_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public DMI_TransRollback_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DMI_TransRollback_result)
        return this.equals((DMI_TransRollback_result)that);
      return false;
    }

    public boolean equals(DMI_TransRollback_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(DMI_TransRollback_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DMI_TransRollback_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DMI_TransRollback_resultStandardSchemeFactory implements SchemeFactory {
      public DMI_TransRollback_resultStandardScheme getScheme() {
        return new DMI_TransRollback_resultStandardScheme();
      }
    }

    private static class DMI_TransRollback_resultStandardScheme extends StandardScheme<DMI_TransRollback_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DMI_TransRollback_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DMI_TransRollback_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DMI_TransRollback_resultTupleSchemeFactory implements SchemeFactory {
      public DMI_TransRollback_resultTupleScheme getScheme() {
        return new DMI_TransRollback_resultTupleScheme();
      }
    }

    private static class DMI_TransRollback_resultTupleScheme extends TupleScheme<DMI_TransRollback_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DMI_TransRollback_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DMI_TransRollback_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
