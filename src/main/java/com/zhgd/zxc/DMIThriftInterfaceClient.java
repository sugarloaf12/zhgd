/**
 * Autogenerated by RTP (based on Thrift) Compiler (1.10.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.zhgd.zxc;

import com.cetc28.rtp.async.client.AsyncPushIface;
import com.cetc28.rtp.beans.URL;
import com.cetc28.rtp.core.ContextHelper;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.Map;

/**
 * RTP Client Object
 * 
 * Not Thread Safe
 */
public class DMIThriftInterfaceClient {

  private static Logger LOGGER = LoggerFactory.getLogger(DMIThriftInterfaceClient.class);

  private DMIThriftInterface.AsyncClient asyncClient;

  /**
   * save the conditions when this client was created.
   */
  private URL url;

  private String inquiry;

  /**
   * check this client is whether available or not.
   */
  private volatile boolean available = false;

  private DMIThriftInterface.AsyncIface proxyAsyncIface;

  private AsyncPushIface proxyAsyncPushIface;

  public DMIThriftInterfaceClient() {
    super();
  }

  public void asyncDMI_GetAllResId(final String stringType, final String stringTag, final String stringAccess, final AsyncMethodCallback<List<String>> resultHandler) throws TException {
    final DMIThriftInterfaceClientFactory.AsyncCall<List<String>> asyncCall = DMIThriftInterfaceClientFactory.getInstance().new AsyncCall() {
      @Override
      public void doExecute() throws TException {
        getProxyAsyncIface().DMI_GetAllResId(stringType, stringTag, stringAccess, resultHandler);
      }
    };
    asyncCall.setThreadCache(ContextHelper.getHeaders());
    DMIThriftInterfaceClientFactory.getInstance().addAsyncCallTask(asyncCall);
  }

  public void asyncDMI_GetDataAttribute(final String stringType, final String stringAccess, final AsyncMethodCallback<List<String>> resultHandler) throws TException {
    final DMIThriftInterfaceClientFactory.AsyncCall<List<String>> asyncCall = DMIThriftInterfaceClientFactory.getInstance().new AsyncCall() {
      @Override
      public void doExecute() throws TException {
        getProxyAsyncIface().DMI_GetDataAttribute(stringType, stringAccess, resultHandler);
      }
    };
    asyncCall.setThreadCache(ContextHelper.getHeaders());
    DMIThriftInterfaceClientFactory.getInstance().addAsyncCallTask(asyncCall);
  }

  public void asyncDMI_FilterParam(final String stringType, final List<String> vecTags, final Map<String,List<String>> mpCondition, final String stringQyCondition, final String stringAccess, final AsyncMethodCallback<Map<Integer,Map<String,String>>> resultHandler) throws TException {
    final DMIThriftInterfaceClientFactory.AsyncCall<Map<Integer,Map<String,String>>> asyncCall = DMIThriftInterfaceClientFactory.getInstance().new AsyncCall() {
      @Override
      public void doExecute() throws TException {
        getProxyAsyncIface().DMI_FilterParam(stringType, vecTags, mpCondition, stringQyCondition, stringAccess, resultHandler);
      }
    };
    asyncCall.setThreadCache(ContextHelper.getHeaders());
    DMIThriftInterfaceClientFactory.getInstance().addAsyncCallTask(asyncCall);
  }

  public void asyncDMI_FilterParam2(final String stringType, final List<String> vecTags, final Map<String,List<String>> mpCondition, final String stringQyCondition, final String stringAccess, final String stringKeyMacro, final AsyncMethodCallback<Map<String,Map<String,String>>> resultHandler) throws TException {
    final DMIThriftInterfaceClientFactory.AsyncCall<Map<String,Map<String,String>>> asyncCall = DMIThriftInterfaceClientFactory.getInstance().new AsyncCall() {
      @Override
      public void doExecute() throws TException {
        getProxyAsyncIface().DMI_FilterParam2(stringType, vecTags, mpCondition, stringQyCondition, stringAccess, stringKeyMacro, resultHandler);
      }
    };
    asyncCall.setThreadCache(ContextHelper.getHeaders());
    DMIThriftInterfaceClientFactory.getInstance().addAsyncCallTask(asyncCall);
  }

  public void asyncDMI_UpdateData(final String stringType, final Map<String,Map<String,String>> mpTag2Value, final String stringAccess, final AsyncMethodCallback<Integer> resultHandler) throws TException {
    final DMIThriftInterfaceClientFactory.AsyncCall<Integer> asyncCall = DMIThriftInterfaceClientFactory.getInstance().new AsyncCall() {
      @Override
      public void doExecute() throws TException {
        getProxyAsyncIface().DMI_UpdateData(stringType, mpTag2Value, stringAccess, resultHandler);
      }
    };
    asyncCall.setThreadCache(ContextHelper.getHeaders());
    DMIThriftInterfaceClientFactory.getInstance().addAsyncCallTask(asyncCall);
  }

  public void asyncDMI_DeleteData(final String stringType, final Map<String,List<String>> mpCondition, final String stringAccess, final AsyncMethodCallback<Integer> resultHandler) throws TException {
    final DMIThriftInterfaceClientFactory.AsyncCall<Integer> asyncCall = DMIThriftInterfaceClientFactory.getInstance().new AsyncCall() {
      @Override
      public void doExecute() throws TException {
        getProxyAsyncIface().DMI_DeleteData(stringType, mpCondition, stringAccess, resultHandler);
      }
    };
    asyncCall.setThreadCache(ContextHelper.getHeaders());
    DMIThriftInterfaceClientFactory.getInstance().addAsyncCallTask(asyncCall);
  }

  public void asyncDMI_DeleteData2(final String stringType, final List<String> vcId, final String stringAccess, final String stringKeyMacro, final AsyncMethodCallback<Void> resultHandler) throws TException {
    final DMIThriftInterfaceClientFactory.AsyncCall<Void> asyncCall = DMIThriftInterfaceClientFactory.getInstance().new AsyncCall() {
      @Override
      public void doExecute() throws TException {
        getProxyAsyncIface().DMI_DeleteData2(stringType, vcId, stringAccess, stringKeyMacro, resultHandler);
      }
    };
    asyncCall.setThreadCache(ContextHelper.getHeaders());
    DMIThriftInterfaceClientFactory.getInstance().addAsyncCallTask(asyncCall);
  }

  public void asyncDMI_ReceiveCmd(final String stringCmd, final String stringAccess, final AsyncMethodCallback<Integer> resultHandler) throws TException {
    final DMIThriftInterfaceClientFactory.AsyncCall<Integer> asyncCall = DMIThriftInterfaceClientFactory.getInstance().new AsyncCall() {
      @Override
      public void doExecute() throws TException {
        getProxyAsyncIface().DMI_ReceiveCmd(stringCmd, stringAccess, resultHandler);
      }
    };
    asyncCall.setThreadCache(ContextHelper.getHeaders());
    DMIThriftInterfaceClientFactory.getInstance().addAsyncCallTask(asyncCall);
  }

  public void asyncDMI_TransBegin(final String stringType, final String stringAccess, final AsyncMethodCallback<String> resultHandler) throws TException {
    final DMIThriftInterfaceClientFactory.AsyncCall<String> asyncCall = DMIThriftInterfaceClientFactory.getInstance().new AsyncCall() {
      @Override
      public void doExecute() throws TException {
        getProxyAsyncIface().DMI_TransBegin(stringType, stringAccess, resultHandler);
      }
    };
    asyncCall.setThreadCache(ContextHelper.getHeaders());
    DMIThriftInterfaceClientFactory.getInstance().addAsyncCallTask(asyncCall);
  }

  public void asyncDMI_TransCommit(final String stringType, final String stringAccess, final AsyncMethodCallback<Integer> resultHandler) throws TException {
    final DMIThriftInterfaceClientFactory.AsyncCall<Integer> asyncCall = DMIThriftInterfaceClientFactory.getInstance().new AsyncCall() {
      @Override
      public void doExecute() throws TException {
        getProxyAsyncIface().DMI_TransCommit(stringType, stringAccess, resultHandler);
      }
    };
    asyncCall.setThreadCache(ContextHelper.getHeaders());
    DMIThriftInterfaceClientFactory.getInstance().addAsyncCallTask(asyncCall);
  }

  public void asyncDMI_TransRollback(final String stringType, final String stringAccess, final AsyncMethodCallback<Integer> resultHandler) throws TException {
    final DMIThriftInterfaceClientFactory.AsyncCall<Integer> asyncCall = DMIThriftInterfaceClientFactory.getInstance().new AsyncCall() {
      @Override
      public void doExecute() throws TException {
        getProxyAsyncIface().DMI_TransRollback(stringType, stringAccess, resultHandler);
      }
    };
    asyncCall.setThreadCache(ContextHelper.getHeaders());
    DMIThriftInterfaceClientFactory.getInstance().addAsyncCallTask(asyncCall);
  }

  public List<String> DMI_GetAllResId(final String stringType, final String stringTag, final String stringAccess) throws TException {
    final Object lock = new Object();
    final DMIThriftInterfaceClientFactory.AsyncCall<List<String>> asyncCall = DMIThriftInterfaceClientFactory.getInstance().new AsyncCall() {
      private final DMIThriftInterfaceClientFactory.AsyncCall<List<String>> asyncCall = this;

      @Override
      public void doExecute() throws TException {
        getProxyAsyncIface().DMI_GetAllResId(stringType, stringTag, stringAccess, new AsyncMethodCallback<List<String>>() {
          private final DMIThriftInterfaceClientFactory.AsyncCall<List<String>> innerAsyncCall = asyncCall;
          public void onComplete(List<String> response) {
            innerAsyncCall.setSuccess(true);
            innerAsyncCall.setResult(response);
            synchronized (lock) {
              lock.notifyAll();
            }
          }

          public void onError(Exception exception) {
            innerAsyncCall.setSuccess(false);
            innerAsyncCall.setException(exception);
            synchronized (lock) {
              lock.notifyAll();
            }
          }
        });
      }
    };
    asyncCall.setExpListener(new DMIThriftInterfaceClientFactory.ExceptionListener() {
      @Override
      public void onException(Exception exp) {
        synchronized (lock) {
          lock.notifyAll();
        }
      }
    });
    asyncCall.setThreadCache(ContextHelper.getHeaders());
    DMIThriftInterfaceClientFactory.getInstance().addAsyncCallTask(asyncCall);
    try {
      synchronized (lock) {
        lock.wait();
      }
    } catch (Exception e) {
      // ignore
    }
    if (asyncCall.isSuccess()) {
      return asyncCall.getResult();
    }
    throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,"DMI_GetAllResId failed: " + asyncCall.getException() == null ? "unknown exception": asyncCall.getException().getMessage());
  }

  public List<String> DMI_GetDataAttribute(final String stringType, final String stringAccess) throws TException {
    final Object lock = new Object();
    final DMIThriftInterfaceClientFactory.AsyncCall<List<String>> asyncCall = DMIThriftInterfaceClientFactory.getInstance().new AsyncCall() {
      private final DMIThriftInterfaceClientFactory.AsyncCall<List<String>> asyncCall = this;

      @Override
      public void doExecute() throws TException {
        getProxyAsyncIface().DMI_GetDataAttribute(stringType, stringAccess, new AsyncMethodCallback<List<String>>() {
          private final DMIThriftInterfaceClientFactory.AsyncCall<List<String>> innerAsyncCall = asyncCall;
          public void onComplete(List<String> response) {
            innerAsyncCall.setSuccess(true);
            innerAsyncCall.setResult(response);
            synchronized (lock) {
              lock.notifyAll();
            }
          }

          public void onError(Exception exception) {
            innerAsyncCall.setSuccess(false);
            innerAsyncCall.setException(exception);
            synchronized (lock) {
              lock.notifyAll();
            }
          }
        });
      }
    };
    asyncCall.setExpListener(new DMIThriftInterfaceClientFactory.ExceptionListener() {
      @Override
      public void onException(Exception exp) {
        synchronized (lock) {
          lock.notifyAll();
        }
      }
    });
    asyncCall.setThreadCache(ContextHelper.getHeaders());
    DMIThriftInterfaceClientFactory.getInstance().addAsyncCallTask(asyncCall);
    try {
      synchronized (lock) {
        lock.wait();
      }
    } catch (Exception e) {
      // ignore
    }
    if (asyncCall.isSuccess()) {
      return asyncCall.getResult();
    }
    throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,"DMI_GetDataAttribute failed: " + asyncCall.getException() == null ? "unknown exception": asyncCall.getException().getMessage());
  }

  public Map<Integer,Map<String,String>> DMI_FilterParam(final String stringType, final List<String> vecTags, final Map<String,List<String>> mpCondition, final String stringQyCondition, final String stringAccess) throws TException {
    final Object lock = new Object();
    final DMIThriftInterfaceClientFactory.AsyncCall<Map<Integer,Map<String,String>>> asyncCall = DMIThriftInterfaceClientFactory.getInstance().new AsyncCall() {
      private final DMIThriftInterfaceClientFactory.AsyncCall<Map<Integer,Map<String,String>>> asyncCall = this;

      @Override
      public void doExecute() throws TException {
        getProxyAsyncIface().DMI_FilterParam(stringType, vecTags, mpCondition, stringQyCondition, stringAccess, new AsyncMethodCallback<Map<Integer,Map<String,String>>>() {
          private final DMIThriftInterfaceClientFactory.AsyncCall<Map<Integer,Map<String,String>>> innerAsyncCall = asyncCall;
          public void onComplete(Map<Integer,Map<String,String>> response) {
            innerAsyncCall.setSuccess(true);
            innerAsyncCall.setResult(response);
            synchronized (lock) {
              lock.notifyAll();
            }
          }

          public void onError(Exception exception) {
            innerAsyncCall.setSuccess(false);
            innerAsyncCall.setException(exception);
            synchronized (lock) {
              lock.notifyAll();
            }
          }
        });
      }
    };
    asyncCall.setExpListener(new DMIThriftInterfaceClientFactory.ExceptionListener() {
      @Override
      public void onException(Exception exp) {
        synchronized (lock) {
          lock.notifyAll();
        }
      }
    });
    asyncCall.setThreadCache(ContextHelper.getHeaders());
    DMIThriftInterfaceClientFactory.getInstance().addAsyncCallTask(asyncCall);
    try {
      synchronized (lock) {
        lock.wait();
      }
    } catch (Exception e) {
      // ignore
    }
    if (asyncCall.isSuccess()) {
      return asyncCall.getResult();
    }

    throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,"DMI_FilterParam failed: " + asyncCall.getException() == null ? "unknown exception": asyncCall.getException().getMessage());
  }

  public Map<String,Map<String,String>> DMI_FilterParam2(final String stringType, final List<String> vecTags, final Map<String,List<String>> mpCondition, final String stringQyCondition, final String stringAccess, final String stringKeyMacro) throws TException {
    final Object lock = new Object();
    final DMIThriftInterfaceClientFactory.AsyncCall<Map<String,Map<String,String>>> asyncCall = DMIThriftInterfaceClientFactory.getInstance().new AsyncCall() {
      private final DMIThriftInterfaceClientFactory.AsyncCall<Map<String,Map<String,String>>> asyncCall = this;

      @Override
      public void doExecute() throws TException {
        getProxyAsyncIface().DMI_FilterParam2(stringType, vecTags, mpCondition, stringQyCondition, stringAccess, stringKeyMacro, new AsyncMethodCallback<Map<String,Map<String,String>>>() {
          private final DMIThriftInterfaceClientFactory.AsyncCall<Map<String,Map<String,String>>> innerAsyncCall = asyncCall;
          public void onComplete(Map<String,Map<String,String>> response) {
            innerAsyncCall.setSuccess(true);
            innerAsyncCall.setResult(response);
            synchronized (lock) {
              lock.notifyAll();
            }
          }

          public void onError(Exception exception) {
            innerAsyncCall.setSuccess(false);
            innerAsyncCall.setException(exception);
            synchronized (lock) {
              lock.notifyAll();
            }
          }
        });
      }
    };
    asyncCall.setExpListener(new DMIThriftInterfaceClientFactory.ExceptionListener() {
      @Override
      public void onException(Exception exp) {
        synchronized (lock) {
          lock.notifyAll();
        }
      }
    });
    asyncCall.setThreadCache(ContextHelper.getHeaders());
    DMIThriftInterfaceClientFactory.getInstance().addAsyncCallTask(asyncCall);
    try {
      synchronized (lock) {
        lock.wait();
      }
    } catch (Exception e) {
      // ignore
    }
    if (asyncCall.isSuccess()) {
      return asyncCall.getResult();
    }
    throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,"DMI_FilterParam2 failed: " + asyncCall.getException() == null ? "unknown exception": asyncCall.getException().getMessage());
  }

  public int DMI_UpdateData(final String stringType, final Map<String,Map<String,String>> mpTag2Value, final String stringAccess) throws TException {
    final Object lock = new Object();
    final DMIThriftInterfaceClientFactory.AsyncCall<Integer> asyncCall = DMIThriftInterfaceClientFactory.getInstance().new AsyncCall() {
      private final DMIThriftInterfaceClientFactory.AsyncCall<Integer> asyncCall = this;

      @Override
      public void doExecute() throws TException {
        getProxyAsyncIface().DMI_UpdateData(stringType, mpTag2Value, stringAccess, new AsyncMethodCallback<Integer>() {
          private final DMIThriftInterfaceClientFactory.AsyncCall<Integer> innerAsyncCall = asyncCall;
          public void onComplete(Integer response) {
            innerAsyncCall.setSuccess(true);
            innerAsyncCall.setResult(response);
            synchronized (lock) {
              lock.notifyAll();
            }
          }

          public void onError(Exception exception) {
            innerAsyncCall.setSuccess(false);
            innerAsyncCall.setException(exception);
            synchronized (lock) {
              lock.notifyAll();
            }
          }
        });
      }
    };
    asyncCall.setExpListener(new DMIThriftInterfaceClientFactory.ExceptionListener() {
      @Override
      public void onException(Exception exp) {
        synchronized (lock) {
          lock.notifyAll();
        }
      }
    });
    asyncCall.setThreadCache(ContextHelper.getHeaders());
    DMIThriftInterfaceClientFactory.getInstance().addAsyncCallTask(asyncCall);
    try {
      synchronized (lock) {
        lock.wait();
      }
    } catch (Exception e) {
      // ignore
    }
    if (asyncCall.isSuccess()) {
      return asyncCall.getResult();
    }
    throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,"DMI_UpdateData failed: " + asyncCall.getException() == null ? "unknown exception": asyncCall.getException().getMessage());
  }

  public int DMI_DeleteData(final String stringType, final Map<String,List<String>> mpCondition, final String stringAccess) throws TException {
    final Object lock = new Object();
    final DMIThriftInterfaceClientFactory.AsyncCall<Integer> asyncCall = DMIThriftInterfaceClientFactory.getInstance().new AsyncCall() {
      private final DMIThriftInterfaceClientFactory.AsyncCall<Integer> asyncCall = this;

      @Override
      public void doExecute() throws TException {
        getProxyAsyncIface().DMI_DeleteData(stringType, mpCondition, stringAccess, new AsyncMethodCallback<Integer>() {
          private final DMIThriftInterfaceClientFactory.AsyncCall<Integer> innerAsyncCall = asyncCall;
          public void onComplete(Integer response) {
            innerAsyncCall.setSuccess(true);
            innerAsyncCall.setResult(response);
            synchronized (lock) {
              lock.notifyAll();
            }
          }

          public void onError(Exception exception) {
            innerAsyncCall.setSuccess(false);
            innerAsyncCall.setException(exception);
            synchronized (lock) {
              lock.notifyAll();
            }
          }
        });
      }
    };
    asyncCall.setExpListener(new DMIThriftInterfaceClientFactory.ExceptionListener() {
      @Override
      public void onException(Exception exp) {
        synchronized (lock) {
          lock.notifyAll();
        }
      }
    });
    asyncCall.setThreadCache(ContextHelper.getHeaders());
    DMIThriftInterfaceClientFactory.getInstance().addAsyncCallTask(asyncCall);
    try {
      synchronized (lock) {
        lock.wait();
      }
    } catch (Exception e) {
      // ignore
    }
    if (asyncCall.isSuccess()) {
      return asyncCall.getResult();
    }
    throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,"DMI_DeleteData failed: " + asyncCall.getException() == null ? "unknown exception": asyncCall.getException().getMessage());
  }

  public void DMI_DeleteData2(final String stringType, final List<String> vcId, final String stringAccess, final String stringKeyMacro) throws TException {
    final Object lock = new Object();
    final DMIThriftInterfaceClientFactory.AsyncCall<Void> asyncCall = DMIThriftInterfaceClientFactory.getInstance().new AsyncCall() {
      private final DMIThriftInterfaceClientFactory.AsyncCall<Void> asyncCall = this;

      @Override
      public void doExecute() throws TException {
        getProxyAsyncIface().DMI_DeleteData2(stringType, vcId, stringAccess, stringKeyMacro, new AsyncMethodCallback<Void>() {
          private final DMIThriftInterfaceClientFactory.AsyncCall<Void> innerAsyncCall = asyncCall;
          public void onComplete(Void response) {
            innerAsyncCall.setSuccess(true);
            innerAsyncCall.setResult(response);
            synchronized (lock) {
              lock.notifyAll();
            }
          }

          public void onError(Exception exception) {
            innerAsyncCall.setSuccess(false);
            innerAsyncCall.setException(exception);
            synchronized (lock) {
              lock.notifyAll();
            }
          }
        });
      }
    };
    asyncCall.setExpListener(new DMIThriftInterfaceClientFactory.ExceptionListener() {
      @Override
      public void onException(Exception exp) {
        synchronized (lock) {
          lock.notifyAll();
        }
      }
    });
    asyncCall.setThreadCache(ContextHelper.getHeaders());
    DMIThriftInterfaceClientFactory.getInstance().addAsyncCallTask(asyncCall);
    try {
      synchronized (lock) {
        lock.wait();
      }
    } catch (Exception e) {
      // ignore
    }
    if (asyncCall.isSuccess()) {
      return;
    }
    throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,"DMI_DeleteData2 failed: " + asyncCall.getException() == null ? "unknown exception": asyncCall.getException().getMessage());
  }

  public int DMI_ReceiveCmd(final String stringCmd, final String stringAccess) throws TException {
    final Object lock = new Object();
    final DMIThriftInterfaceClientFactory.AsyncCall<Integer> asyncCall = DMIThriftInterfaceClientFactory.getInstance().new AsyncCall() {
      private final DMIThriftInterfaceClientFactory.AsyncCall<Integer> asyncCall = this;

      @Override
      public void doExecute() throws TException {
        getProxyAsyncIface().DMI_ReceiveCmd(stringCmd, stringAccess, new AsyncMethodCallback<Integer>() {
          private final DMIThriftInterfaceClientFactory.AsyncCall<Integer> innerAsyncCall = asyncCall;
          public void onComplete(Integer response) {
            innerAsyncCall.setSuccess(true);
            innerAsyncCall.setResult(response);
            synchronized (lock) {
              lock.notifyAll();
            }
          }

          public void onError(Exception exception) {
            innerAsyncCall.setSuccess(false);
            innerAsyncCall.setException(exception);
            synchronized (lock) {
              lock.notifyAll();
            }
          }
        });
      }
    };
    asyncCall.setExpListener(new DMIThriftInterfaceClientFactory.ExceptionListener() {
      @Override
      public void onException(Exception exp) {
        synchronized (lock) {
          lock.notifyAll();
        }
      }
    });
    asyncCall.setThreadCache(ContextHelper.getHeaders());
    DMIThriftInterfaceClientFactory.getInstance().addAsyncCallTask(asyncCall);
    try {
      synchronized (lock) {
        lock.wait();
      }
    } catch (Exception e) {
      // ignore
    }
    if (asyncCall.isSuccess()) {
      return asyncCall.getResult();
    }
    throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,"DMI_ReceiveCmd failed: " + asyncCall.getException() == null ? "unknown exception": asyncCall.getException().getMessage());
  }

  public String DMI_TransBegin(final String stringType, final String stringAccess) throws TException {
    final Object lock = new Object();
    final DMIThriftInterfaceClientFactory.AsyncCall<String> asyncCall = DMIThriftInterfaceClientFactory.getInstance().new AsyncCall() {
      private final DMIThriftInterfaceClientFactory.AsyncCall<String> asyncCall = this;

      @Override
      public void doExecute() throws TException {
        getProxyAsyncIface().DMI_TransBegin(stringType, stringAccess, new AsyncMethodCallback<String>() {
          private final DMIThriftInterfaceClientFactory.AsyncCall<String> innerAsyncCall = asyncCall;
          public void onComplete(String response) {
            innerAsyncCall.setSuccess(true);
            innerAsyncCall.setResult(response);
            synchronized (lock) {
              lock.notifyAll();
            }
          }

          public void onError(Exception exception) {
            innerAsyncCall.setSuccess(false);
            innerAsyncCall.setException(exception);
            synchronized (lock) {
              lock.notifyAll();
            }
          }
        });
      }
    };
    asyncCall.setExpListener(new DMIThriftInterfaceClientFactory.ExceptionListener() {
      @Override
      public void onException(Exception exp) {
        synchronized (lock) {
          lock.notifyAll();
        }
      }
    });
    asyncCall.setThreadCache(ContextHelper.getHeaders());
    DMIThriftInterfaceClientFactory.getInstance().addAsyncCallTask(asyncCall);
    try {
      synchronized (lock) {
        lock.wait();
      }
    } catch (Exception e) {
      // ignore
    }
    if (asyncCall.isSuccess()) {
      return asyncCall.getResult();
    }
    throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,"DMI_TransBegin failed: " + asyncCall.getException() == null ? "unknown exception": asyncCall.getException().getMessage());
  }

  public int DMI_TransCommit(final String stringType, final String stringAccess) throws TException {
    final Object lock = new Object();
    final DMIThriftInterfaceClientFactory.AsyncCall<Integer> asyncCall = DMIThriftInterfaceClientFactory.getInstance().new AsyncCall() {
      private final DMIThriftInterfaceClientFactory.AsyncCall<Integer> asyncCall = this;

      @Override
      public void doExecute() throws TException {
        getProxyAsyncIface().DMI_TransCommit(stringType, stringAccess, new AsyncMethodCallback<Integer>() {
          private final DMIThriftInterfaceClientFactory.AsyncCall<Integer> innerAsyncCall = asyncCall;
          public void onComplete(Integer response) {
            innerAsyncCall.setSuccess(true);
            innerAsyncCall.setResult(response);
            synchronized (lock) {
              lock.notifyAll();
            }
          }

          public void onError(Exception exception) {
            innerAsyncCall.setSuccess(false);
            innerAsyncCall.setException(exception);
            synchronized (lock) {
              lock.notifyAll();
            }
          }
        });
      }
    };
    asyncCall.setExpListener(new DMIThriftInterfaceClientFactory.ExceptionListener() {
      @Override
      public void onException(Exception exp) {
        synchronized (lock) {
          lock.notifyAll();
        }
      }
    });
    asyncCall.setThreadCache(ContextHelper.getHeaders());
    DMIThriftInterfaceClientFactory.getInstance().addAsyncCallTask(asyncCall);
    try {
      synchronized (lock) {
        lock.wait();
      }
    } catch (Exception e) {
      // ignore
    }
    if (asyncCall.isSuccess()) {
      return asyncCall.getResult();
    }
    throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,"DMI_TransCommit failed: " + asyncCall.getException() == null ? "unknown exception": asyncCall.getException().getMessage());
  }

  public int DMI_TransRollback(final String stringType, final String stringAccess) throws TException {
    final Object lock = new Object();
    final DMIThriftInterfaceClientFactory.AsyncCall<Integer> asyncCall = DMIThriftInterfaceClientFactory.getInstance().new AsyncCall() {
      private final DMIThriftInterfaceClientFactory.AsyncCall<Integer> asyncCall = this;

      @Override
      public void doExecute() throws TException {
        getProxyAsyncIface().DMI_TransRollback(stringType, stringAccess, new AsyncMethodCallback<Integer>() {
          private final DMIThriftInterfaceClientFactory.AsyncCall<Integer> innerAsyncCall = asyncCall;
          public void onComplete(Integer response) {
            innerAsyncCall.setSuccess(true);
            innerAsyncCall.setResult(response);
            synchronized (lock) {
              lock.notifyAll();
            }
          }

          public void onError(Exception exception) {
            innerAsyncCall.setSuccess(false);
            innerAsyncCall.setException(exception);
            synchronized (lock) {
              lock.notifyAll();
            }
          }
        });
      }
    };
    asyncCall.setExpListener(new DMIThriftInterfaceClientFactory.ExceptionListener() {
      @Override
      public void onException(Exception exp) {
        synchronized (lock) {
          lock.notifyAll();
        }
      }
    });
    asyncCall.setThreadCache(ContextHelper.getHeaders());
    DMIThriftInterfaceClientFactory.getInstance().addAsyncCallTask(asyncCall);
    try {
      synchronized (lock) {
        lock.wait();
      }
    } catch (Exception e) {
      // ignore
    }
    if (asyncCall.isSuccess()) {
      return asyncCall.getResult();
    }
    throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,"DMI_TransRollback failed: " + asyncCall.getException() == null ? "unknown exception": asyncCall.getException().getMessage());
  }

  DMIThriftInterface.AsyncClient getAsyncClient() {
    return asyncClient;
  }

  void setAsyncClient(DMIThriftInterface.AsyncClient asyncClient) {
    this.asyncClient = asyncClient;
  }

  public DMIThriftInterface.AsyncIface getProxyAsyncIface() {
    return proxyAsyncIface;
  }

  public void setProxyAsyncIface(DMIThriftInterface.AsyncIface proxyAsyncIface) {
    this.proxyAsyncIface = proxyAsyncIface;
  }

  public AsyncPushIface getProxyAsyncPushIface() {
    return proxyAsyncPushIface;
  }

  public void setProxyAsyncPushIface(AsyncPushIface proxyAsyncPushIface) {
    this.proxyAsyncPushIface = proxyAsyncPushIface;
  }

  public URL getUrl() {
    return url;
  }

  public void setUrl(URL url) {
    this.url = url;
  }

  String getInquiry() {
    return inquiry;
  }

  void setInquiry(String inquiry) {
    this.inquiry = inquiry;
  }

  void setAvailable(boolean available) {
    this.available = available;
  }

  public boolean isAvailable() {
    return available;
  }

}
