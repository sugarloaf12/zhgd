/**
 * Autogenerated by RTP (based on Thrift) Compiler (1.10.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.zhgd.ucc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TProtocolFactory;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import org.apache.thrift.transport.TTransport;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;

import javax.annotation.Generated;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.cetc28.rtp.async.client.AsyncPushIface;
import com.cetc28.rtp.core.Constants.Phase;
import com.cetc28.rtp.core.Constants.Side;
import com.cetc28.rtp.core.ContextHelper;
import com.cetc28.rtp.core.process.ProcessContext;
import com.cetc28.rtp.core.statistic.StatisticHandler;

import com.cetc28.rtp.meta_data.AFile;
import org.apache.thrift.async.AsyncPushMethodCallback;


@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by RTP (based on Thrift) Compiler (1.10.1)", date = "2019-1-6")
public class UCCalThriftInterface {

  public static final String SERVICE_NAME = "UCCalServ.UCCalThriftInterface";

  public interface Iface {

    public int UCCal_ReceiveCmd(String stringCmd, String stringAccess) throws TException;

    public Map<String,String> UCCal_ReadIDCardInfo(String stringID) throws TException;

  }

  public interface AsyncIface {

    public void UCCal_ReceiveCmd(String stringCmd, String stringAccess, AsyncMethodCallback<Integer> resultHandler) throws TException;

    public void UCCal_ReadIDCardInfo(String stringID, AsyncMethodCallback<Map<String, String>> resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int UCCal_ReceiveCmd(String stringCmd, String stringAccess) throws TException
    {
      send_UCCal_ReceiveCmd(stringCmd, stringAccess);
      return recv_UCCal_ReceiveCmd();
    }

    public void send_UCCal_ReceiveCmd(String stringCmd, String stringAccess) throws TException
    {
      UCCal_ReceiveCmd_args args = new UCCal_ReceiveCmd_args();
      args.setStringCmd(stringCmd);
      args.setStringAccess(stringAccess);
      sendBase("UCCal_ReceiveCmd", args);
    }

    public int recv_UCCal_ReceiveCmd() throws TException
    {
      UCCal_ReceiveCmd_result result = new UCCal_ReceiveCmd_result();
      receiveBase(result, "UCCal_ReceiveCmd");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "UCCal_ReceiveCmd failed: unknown result");
    }

    public Map<String,String> UCCal_ReadIDCardInfo(String stringID) throws TException
    {
      send_UCCal_ReadIDCardInfo(stringID);
      return recv_UCCal_ReadIDCardInfo();
    }

    public void send_UCCal_ReadIDCardInfo(String stringID) throws TException
    {
      UCCal_ReadIDCardInfo_args args = new UCCal_ReadIDCardInfo_args();
      args.setStringID(stringID);
      sendBase("UCCal_ReadIDCardInfo", args);
    }

    public Map<String,String> recv_UCCal_ReadIDCardInfo() throws TException
    {
      UCCal_ReadIDCardInfo_result result = new UCCal_ReadIDCardInfo_result();
      receiveBase(result, "UCCal_ReadIDCardInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "UCCal_ReadIDCardInfo failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    private static final org.apache.thrift.protocol.TStruct PUSH_STRUCT_DESC = new org.apache.thrift.protocol.TStruct("push_args");
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    void initPushMethodCall() throws TException {
      if (!pushMethodCallMap.isEmpty()) {
        return;
      }
    }

    private static void writePushArgs(org.apache.thrift.protocol.TProtocol prot) throws TException {
      prot.writeStructBegin(PUSH_STRUCT_DESC);
      prot.writeFieldStop();
      prot.writeStructEnd();
    }
    public boolean getReady() {
      synchronized (this) {
        try {
          while (___currentMethod != null) {
            wait();
          }
          return true;
        } catch (InterruptedException e) {
          // ignore
        }
      }
      return false;
    }

    @Override
    public void onComplete() {
      super.onComplete();
      synchronized (this) {
        notifyAll();
      }
    }

    public AsyncClient(TProtocolFactory protocolFactory, com.cetc28.rtp.async.client.AsyncClientManager<?> clientManager, TTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    protected void addProcessContext(org.apache.thrift.async.TAsyncMethodCall methodCall, String operation) {
      ProcessContext ctx = new ProcessContext();
      ctx.setService(SERVICE_NAME);
      ctx.setOperation(operation);
      ctx.setTransport(___transport);
      // used as constructor
      StatisticHandler.getInstance().createStatisticEvent(Phase.BEFORE, Side.CLIENT, ctx);
      methodCall.setProcessContext(ctx);
      methodCall.setThreadCache(ContextHelper.getHeaders());
    }

    public void UCCal_ReceiveCmd(String stringCmd, String stringAccess, AsyncMethodCallback<Integer> resultHandler) throws TException {
      UCCal_ReceiveCmdCall method_call = new UCCal_ReceiveCmdCall(stringCmd, stringAccess, resultHandler, this, ___protocolFactory, ___transport);
      addProcessContext(method_call, "UCCal_ReceiveCmd");
      ___manager.call(method_call);
    }

    public static class UCCal_ReceiveCmdCall extends org.apache.thrift.async.TAsyncMethodCall {
      private String stringCmd;
      private String stringAccess;
      public UCCal_ReceiveCmdCall(String stringCmd, String stringAccess, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, TProtocolFactory protocolFactory, TTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stringCmd = stringCmd;
        this.stringAccess = stringAccess;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UCCal_ReceiveCmd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UCCal_ReceiveCmd_args args = new UCCal_ReceiveCmd_args();
        args.setStringCmd(stringCmd);
        args.setStringAccess(stringAccess);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Integer getResult() throws TException {
        if (!isFinished()) {
          throw new IllegalStateException("Method call not finished!");
        }
        if (getFrameBuffer() == null) {
          return null;
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_UCCal_ReceiveCmd();
      }
    }

    public void UCCal_ReadIDCardInfo(String stringID, AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
      UCCal_ReadIDCardInfoCall method_call = new UCCal_ReadIDCardInfoCall(stringID, resultHandler, this, ___protocolFactory, ___transport);
      addProcessContext(method_call, "UCCal_ReadIDCardInfo");
      ___manager.call(method_call);
    }

    public static class UCCal_ReadIDCardInfoCall extends org.apache.thrift.async.TAsyncMethodCall {
      private String stringID;
      public UCCal_ReadIDCardInfoCall(String stringID, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, TProtocolFactory protocolFactory, TTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stringID = stringID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UCCal_ReadIDCardInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UCCal_ReadIDCardInfo_args args = new UCCal_ReadIDCardInfo_args();
        args.setStringID(stringID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws TException {
        if (!isFinished()) {
          throw new IllegalStateException("Method call not finished!");
        }
        if (getFrameBuffer() == null) {
          return null;
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_UCCal_ReadIDCardInfo();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

    public String getServiceName() {
      return UCCalThriftInterface.SERVICE_NAME;
    }

    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("UCCal_ReceiveCmd", new UCCal_ReceiveCmd());
      processMap.put("UCCal_ReadIDCardInfo", new UCCal_ReadIDCardInfo());
      return processMap;
    }

    public static class UCCal_ReceiveCmd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UCCal_ReceiveCmd_args> {
      public UCCal_ReceiveCmd() {
        super("UCCal_ReceiveCmd");
      }

      public UCCal_ReceiveCmd_args getEmptyArgsInstance() {
        return new UCCal_ReceiveCmd_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UCCal_ReceiveCmd_result getResult(I iface, UCCal_ReceiveCmd_args args) throws TException {
        UCCal_ReceiveCmd_result result = new UCCal_ReceiveCmd_result();
        result.success = iface.UCCal_ReceiveCmd(args.stringCmd, args.stringAccess);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class UCCal_ReadIDCardInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UCCal_ReadIDCardInfo_args> {
      public UCCal_ReadIDCardInfo() {
        super("UCCal_ReadIDCardInfo");
      }

      public UCCal_ReadIDCardInfo_args getEmptyArgsInstance() {
        return new UCCal_ReadIDCardInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UCCal_ReadIDCardInfo_result getResult(I iface, UCCal_ReadIDCardInfo_args args) throws TException {
        UCCal_ReadIDCardInfo_result result = new UCCal_ReadIDCardInfo_result();
        result.success = iface.UCCal_ReadIDCardInfo(args.stringID);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

    public String getServiceName() {
      return UCCalThriftInterface.SERVICE_NAME;
    }

    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()), getPushMap(new HashMap<String, org.apache.thrift.AsyncPushFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap, Map<String, org.apache.thrift.AsyncPushFunction<I, ? extends org.apache.thrift.TBase, ?>> pushMap) {
      super(iface, getProcessMap(processMap), getPushMap(pushMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("UCCal_ReceiveCmd", new UCCal_ReceiveCmd());
      processMap.put("UCCal_ReadIDCardInfo", new UCCal_ReadIDCardInfo());
      return processMap;
    }

    private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncPushFunction<I, ? extends org.apache.thrift.TBase, ?>> getPushMap(Map<String, org.apache.thrift.AsyncPushFunction<I, ? extends org.apache.thrift.TBase, ?>> pushMap) {
      return pushMap;
    }

    public static class UCCal_ReceiveCmd<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UCCal_ReceiveCmd_args, Integer> {
      public UCCal_ReceiveCmd() {
        super("UCCal_ReceiveCmd");
      }

      public UCCal_ReceiveCmd_args getEmptyArgsInstance() {
        return new UCCal_ReceiveCmd_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final ProcessContext processContext) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            UCCal_ReceiveCmd_result result = new UCCal_ReceiveCmd_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(processContext,result, org.apache.thrift.protocol.TMessageType.REPLY);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            processContext.closeQuietly();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            UCCal_ReceiveCmd_result result = new UCCal_ReceiveCmd_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(processContext,msg,msgType);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            processContext.closeQuietly();
          }
        };
      }

      protected boolean isOneway() {
        return false;

      }

      @Override
      public void start(I iface, UCCal_ReceiveCmd_args args, AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.UCCal_ReceiveCmd(args.stringCmd, args.stringAccess,resultHandler);
      }
    }

    public static class UCCal_ReadIDCardInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UCCal_ReadIDCardInfo_args, Map<String,String>> {
      public UCCal_ReadIDCardInfo() {
        super("UCCal_ReadIDCardInfo");
      }

      public UCCal_ReadIDCardInfo_args getEmptyArgsInstance() {
        return new UCCal_ReadIDCardInfo_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final ProcessContext processContext) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            UCCal_ReadIDCardInfo_result result = new UCCal_ReadIDCardInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(processContext,result, org.apache.thrift.protocol.TMessageType.REPLY);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            processContext.closeQuietly();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            UCCal_ReadIDCardInfo_result result = new UCCal_ReadIDCardInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(processContext,msg,msgType);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            processContext.closeQuietly();
          }
        };
      }

      protected boolean isOneway() {
        return false;

      }

      @Override
      public void start(I iface, UCCal_ReadIDCardInfo_args args, AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.UCCal_ReadIDCardInfo(args.stringID,resultHandler);
      }
    }

  }

  public static class UCCal_ReceiveCmd_args implements org.apache.thrift.TBase<UCCal_ReceiveCmd_args, UCCal_ReceiveCmd_args._Fields>, java.io.Serializable, Cloneable, Comparable<UCCal_ReceiveCmd_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UCCal_ReceiveCmd_args");

    private static final org.apache.thrift.protocol.TField STRING_CMD_FIELD_DESC = new org.apache.thrift.protocol.TField("stringCmd", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STRING_ACCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("stringAccess", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UCCal_ReceiveCmd_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UCCal_ReceiveCmd_argsTupleSchemeFactory());
    }

    public String stringCmd; // required
    public String stringAccess; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRING_CMD((short)1, "stringCmd"),
      STRING_ACCESS((short)2, "stringAccess");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRING_CMD
            return STRING_CMD;
          case 2: // STRING_ACCESS
            return STRING_ACCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRING_CMD, new org.apache.thrift.meta_data.FieldMetaData("stringCmd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STRING_ACCESS, new org.apache.thrift.meta_data.FieldMetaData("stringAccess", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UCCal_ReceiveCmd_args.class, metaDataMap);
    }

    public UCCal_ReceiveCmd_args() {
    }

    public UCCal_ReceiveCmd_args(
      String stringCmd,
      String stringAccess)
    {
      this();
      this.stringCmd = stringCmd;
      this.stringAccess = stringAccess;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UCCal_ReceiveCmd_args(UCCal_ReceiveCmd_args other) {
      if (other.isSetStringCmd()) {
        this.stringCmd = other.stringCmd;
      }
      if (other.isSetStringAccess()) {
        this.stringAccess = other.stringAccess;
      }
    }

    public UCCal_ReceiveCmd_args deepCopy() {
      return new UCCal_ReceiveCmd_args(this);
    }

    @Override
    public void clear() {
      this.stringCmd = null;
      this.stringAccess = null;
    }

    public String getStringCmd() {
      return this.stringCmd;
    }

    public UCCal_ReceiveCmd_args setStringCmd(String stringCmd) {
      this.stringCmd = stringCmd;
      return this;
    }

    public void unsetStringCmd() {
      this.stringCmd = null;
    }

    /** Returns true if field stringCmd is set (has been assigned a value) and false otherwise */
    public boolean isSetStringCmd() {
      return this.stringCmd != null;
    }

    public void setStringCmdIsSet(boolean value) {
      if (!value) {
        this.stringCmd = null;
      }
    }

    public String getStringAccess() {
      return this.stringAccess;
    }

    public UCCal_ReceiveCmd_args setStringAccess(String stringAccess) {
      this.stringAccess = stringAccess;
      return this;
    }

    public void unsetStringAccess() {
      this.stringAccess = null;
    }

    /** Returns true if field stringAccess is set (has been assigned a value) and false otherwise */
    public boolean isSetStringAccess() {
      return this.stringAccess != null;
    }

    public void setStringAccessIsSet(boolean value) {
      if (!value) {
        this.stringAccess = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRING_CMD:
        if (value == null) {
          unsetStringCmd();
        } else {
          setStringCmd((String)value);
        }
        break;

      case STRING_ACCESS:
        if (value == null) {
          unsetStringAccess();
        } else {
          setStringAccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRING_CMD:
        return getStringCmd();

      case STRING_ACCESS:
        return getStringAccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRING_CMD:
        return isSetStringCmd();
      case STRING_ACCESS:
        return isSetStringAccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UCCal_ReceiveCmd_args)
        return this.equals((UCCal_ReceiveCmd_args)that);
      return false;
    }

    public boolean equals(UCCal_ReceiveCmd_args that) {
      if (that == null)
        return false;

      boolean this_present_stringCmd = true && this.isSetStringCmd();
      boolean that_present_stringCmd = true && that.isSetStringCmd();
      if (this_present_stringCmd || that_present_stringCmd) {
        if (!(this_present_stringCmd && that_present_stringCmd))
          return false;
        if (!this.stringCmd.equals(that.stringCmd))
          return false;
      }

      boolean this_present_stringAccess = true && this.isSetStringAccess();
      boolean that_present_stringAccess = true && that.isSetStringAccess();
      if (this_present_stringAccess || that_present_stringAccess) {
        if (!(this_present_stringAccess && that_present_stringAccess))
          return false;
        if (!this.stringAccess.equals(that.stringAccess))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stringCmd = true && (isSetStringCmd());
      list.add(present_stringCmd);
      if (present_stringCmd)
        list.add(stringCmd);

      boolean present_stringAccess = true && (isSetStringAccess());
      list.add(present_stringAccess);
      if (present_stringAccess)
        list.add(stringAccess);

      return list.hashCode();
    }

    @Override
    public int compareTo(UCCal_ReceiveCmd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStringCmd()).compareTo(other.isSetStringCmd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringCmd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringCmd, other.stringCmd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStringAccess()).compareTo(other.isSetStringAccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringAccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringAccess, other.stringAccess);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UCCal_ReceiveCmd_args(");
      boolean first = true;

      sb.append("stringCmd:");
      if (this.stringCmd == null) {
        sb.append("null");
      } else {
        sb.append(this.stringCmd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stringAccess:");
      if (this.stringAccess == null) {
        sb.append("null");
      } else {
        sb.append(this.stringAccess);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UCCal_ReceiveCmd_argsStandardSchemeFactory implements SchemeFactory {
      public UCCal_ReceiveCmd_argsStandardScheme getScheme() {
        return new UCCal_ReceiveCmd_argsStandardScheme();
      }
    }

    private static class UCCal_ReceiveCmd_argsStandardScheme extends StandardScheme<UCCal_ReceiveCmd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UCCal_ReceiveCmd_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRING_CMD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringCmd = iprot.readString();
                struct.setStringCmdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STRING_ACCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringAccess = iprot.readString();
                struct.setStringAccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UCCal_ReceiveCmd_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stringCmd != null) {
          oprot.writeFieldBegin(STRING_CMD_FIELD_DESC);
          oprot.writeString(struct.stringCmd);
          oprot.writeFieldEnd();
        }
        if (struct.stringAccess != null) {
          oprot.writeFieldBegin(STRING_ACCESS_FIELD_DESC);
          oprot.writeString(struct.stringAccess);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UCCal_ReceiveCmd_argsTupleSchemeFactory implements SchemeFactory {
      public UCCal_ReceiveCmd_argsTupleScheme getScheme() {
        return new UCCal_ReceiveCmd_argsTupleScheme();
      }
    }

    private static class UCCal_ReceiveCmd_argsTupleScheme extends TupleScheme<UCCal_ReceiveCmd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UCCal_ReceiveCmd_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStringCmd()) {
          optionals.set(0);
        }
        if (struct.isSetStringAccess()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStringCmd()) {
          oprot.writeString(struct.stringCmd);
        }
        if (struct.isSetStringAccess()) {
          oprot.writeString(struct.stringAccess);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UCCal_ReceiveCmd_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.stringCmd = iprot.readString();
          struct.setStringCmdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stringAccess = iprot.readString();
          struct.setStringAccessIsSet(true);
        }
      }
    }

  }

  public static class UCCal_ReceiveCmd_result implements org.apache.thrift.TBase<UCCal_ReceiveCmd_result, UCCal_ReceiveCmd_result._Fields>, java.io.Serializable, Cloneable, Comparable<UCCal_ReceiveCmd_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UCCal_ReceiveCmd_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UCCal_ReceiveCmd_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UCCal_ReceiveCmd_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UCCal_ReceiveCmd_result.class, metaDataMap);
    }

    public UCCal_ReceiveCmd_result() {
    }

    public UCCal_ReceiveCmd_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UCCal_ReceiveCmd_result(UCCal_ReceiveCmd_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public UCCal_ReceiveCmd_result deepCopy() {
      return new UCCal_ReceiveCmd_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public UCCal_ReceiveCmd_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UCCal_ReceiveCmd_result)
        return this.equals((UCCal_ReceiveCmd_result)that);
      return false;
    }

    public boolean equals(UCCal_ReceiveCmd_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(UCCal_ReceiveCmd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UCCal_ReceiveCmd_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UCCal_ReceiveCmd_resultStandardSchemeFactory implements SchemeFactory {
      public UCCal_ReceiveCmd_resultStandardScheme getScheme() {
        return new UCCal_ReceiveCmd_resultStandardScheme();
      }
    }

    private static class UCCal_ReceiveCmd_resultStandardScheme extends StandardScheme<UCCal_ReceiveCmd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UCCal_ReceiveCmd_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UCCal_ReceiveCmd_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UCCal_ReceiveCmd_resultTupleSchemeFactory implements SchemeFactory {
      public UCCal_ReceiveCmd_resultTupleScheme getScheme() {
        return new UCCal_ReceiveCmd_resultTupleScheme();
      }
    }

    private static class UCCal_ReceiveCmd_resultTupleScheme extends TupleScheme<UCCal_ReceiveCmd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UCCal_ReceiveCmd_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UCCal_ReceiveCmd_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class UCCal_ReadIDCardInfo_args implements org.apache.thrift.TBase<UCCal_ReadIDCardInfo_args, UCCal_ReadIDCardInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<UCCal_ReadIDCardInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UCCal_ReadIDCardInfo_args");

    private static final org.apache.thrift.protocol.TField STRING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stringID", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UCCal_ReadIDCardInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UCCal_ReadIDCardInfo_argsTupleSchemeFactory());
    }

    public String stringID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRING_ID((short)1, "stringID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRING_ID
            return STRING_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRING_ID, new org.apache.thrift.meta_data.FieldMetaData("stringID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UCCal_ReadIDCardInfo_args.class, metaDataMap);
    }

    public UCCal_ReadIDCardInfo_args() {
    }

    public UCCal_ReadIDCardInfo_args(
      String stringID)
    {
      this();
      this.stringID = stringID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UCCal_ReadIDCardInfo_args(UCCal_ReadIDCardInfo_args other) {
      if (other.isSetStringID()) {
        this.stringID = other.stringID;
      }
    }

    public UCCal_ReadIDCardInfo_args deepCopy() {
      return new UCCal_ReadIDCardInfo_args(this);
    }

    @Override
    public void clear() {
      this.stringID = null;
    }

    public String getStringID() {
      return this.stringID;
    }

    public UCCal_ReadIDCardInfo_args setStringID(String stringID) {
      this.stringID = stringID;
      return this;
    }

    public void unsetStringID() {
      this.stringID = null;
    }

    /** Returns true if field stringID is set (has been assigned a value) and false otherwise */
    public boolean isSetStringID() {
      return this.stringID != null;
    }

    public void setStringIDIsSet(boolean value) {
      if (!value) {
        this.stringID = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRING_ID:
        if (value == null) {
          unsetStringID();
        } else {
          setStringID((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRING_ID:
        return getStringID();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRING_ID:
        return isSetStringID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UCCal_ReadIDCardInfo_args)
        return this.equals((UCCal_ReadIDCardInfo_args)that);
      return false;
    }

    public boolean equals(UCCal_ReadIDCardInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_stringID = true && this.isSetStringID();
      boolean that_present_stringID = true && that.isSetStringID();
      if (this_present_stringID || that_present_stringID) {
        if (!(this_present_stringID && that_present_stringID))
          return false;
        if (!this.stringID.equals(that.stringID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stringID = true && (isSetStringID());
      list.add(present_stringID);
      if (present_stringID)
        list.add(stringID);

      return list.hashCode();
    }

    @Override
    public int compareTo(UCCal_ReadIDCardInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStringID()).compareTo(other.isSetStringID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringID, other.stringID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UCCal_ReadIDCardInfo_args(");
      boolean first = true;

      sb.append("stringID:");
      if (this.stringID == null) {
        sb.append("null");
      } else {
        sb.append(this.stringID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UCCal_ReadIDCardInfo_argsStandardSchemeFactory implements SchemeFactory {
      public UCCal_ReadIDCardInfo_argsStandardScheme getScheme() {
        return new UCCal_ReadIDCardInfo_argsStandardScheme();
      }
    }

    private static class UCCal_ReadIDCardInfo_argsStandardScheme extends StandardScheme<UCCal_ReadIDCardInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UCCal_ReadIDCardInfo_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRING_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringID = iprot.readString();
                struct.setStringIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UCCal_ReadIDCardInfo_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stringID != null) {
          oprot.writeFieldBegin(STRING_ID_FIELD_DESC);
          oprot.writeString(struct.stringID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UCCal_ReadIDCardInfo_argsTupleSchemeFactory implements SchemeFactory {
      public UCCal_ReadIDCardInfo_argsTupleScheme getScheme() {
        return new UCCal_ReadIDCardInfo_argsTupleScheme();
      }
    }

    private static class UCCal_ReadIDCardInfo_argsTupleScheme extends TupleScheme<UCCal_ReadIDCardInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UCCal_ReadIDCardInfo_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStringID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStringID()) {
          oprot.writeString(struct.stringID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UCCal_ReadIDCardInfo_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.stringID = iprot.readString();
          struct.setStringIDIsSet(true);
        }
      }
    }

  }

  public static class UCCal_ReadIDCardInfo_result implements org.apache.thrift.TBase<UCCal_ReadIDCardInfo_result, UCCal_ReadIDCardInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<UCCal_ReadIDCardInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UCCal_ReadIDCardInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UCCal_ReadIDCardInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UCCal_ReadIDCardInfo_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UCCal_ReadIDCardInfo_result.class, metaDataMap);
    }

    public UCCal_ReadIDCardInfo_result() {
    }

    public UCCal_ReadIDCardInfo_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UCCal_ReadIDCardInfo_result(UCCal_ReadIDCardInfo_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public UCCal_ReadIDCardInfo_result deepCopy() {
      return new UCCal_ReadIDCardInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public UCCal_ReadIDCardInfo_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UCCal_ReadIDCardInfo_result)
        return this.equals((UCCal_ReadIDCardInfo_result)that);
      return false;
    }

    public boolean equals(UCCal_ReadIDCardInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(UCCal_ReadIDCardInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UCCal_ReadIDCardInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UCCal_ReadIDCardInfo_resultStandardSchemeFactory implements SchemeFactory {
      public UCCal_ReadIDCardInfo_resultStandardScheme getScheme() {
        return new UCCal_ReadIDCardInfo_resultStandardScheme();
      }
    }

    private static class UCCal_ReadIDCardInfo_resultStandardScheme extends StandardScheme<UCCal_ReadIDCardInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UCCal_ReadIDCardInfo_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map0.size);
                  String _key1;
                  String _val2;
                  for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                  {
                    _key1 = iprot.readString();
                    _val2 = iprot.readString();
                    struct.success.put(_key1, _val2);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UCCal_ReadIDCardInfo_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter4 : struct.success.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UCCal_ReadIDCardInfo_resultTupleSchemeFactory implements SchemeFactory {
      public UCCal_ReadIDCardInfo_resultTupleScheme getScheme() {
        return new UCCal_ReadIDCardInfo_resultTupleScheme();
      }
    }

    private static class UCCal_ReadIDCardInfo_resultTupleScheme extends TupleScheme<UCCal_ReadIDCardInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UCCal_ReadIDCardInfo_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter5 : struct.success.entrySet())
            {
              oprot.writeString(_iter5.getKey());
              oprot.writeString(_iter5.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UCCal_ReadIDCardInfo_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map6.size);
            String _key7;
            String _val8;
            for (int _i9 = 0; _i9 < _map6.size; ++_i9)
            {
              _key7 = iprot.readString();
              _val8 = iprot.readString();
              struct.success.put(_key7, _val8);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
